{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./jsapp/js/utils.es6","webpack:///./jsapp/js/assetUtils.es6","webpack:///./jsapp/xlform/src/model.row.coffee","webpack:///./jsapp/xlform/src/model.skipLogicParser.coffee","webpack:///./jsapp/xlform/src/model.validationLogicParserFactory.js","webpack:///./jsapp/xlform/src/model.validationLogicParser.coffee","webpack:///./jsapp/xlform/src/view.widgets.coffee","webpack:///./jsapp/xlform/src/model.inputDeserializer.coffee","webpack:///./jsapp/xlform/src/model.inputParser.coffee","webpack:///./jsapp/js/components/permissions/permConfig.es6","webpack:///./jsapp/xlform/src/model.utils.coffee","webpack:///./jsapp/xlform/src/_model.coffee","webpack:///./jsapp/js/components/permissions/permParser.es6","webpack:///./test/fixtures/xlformSurveys.coffee","webpack:///./jsapp/xlform/src/view.utils.validator.js","webpack:///./jsapp/xlform/src/model.rowDetailMixins.coffee","webpack:///./jsapp/js/constants.es6","webpack:///./jsapp/xlform/src/mv.validationLogicHelpers.coffee","webpack:///./jsapp/xlform/src/model.rowDetail.validationLogic.coffee","webpack:///./jsapp/xlform/src/view.rowDetail.ValidationLogic.coffee","webpack:///./jsapp/xlform/src/model.surveyFragment.coffee","webpack:///./jsapp/xlform/src/model.rowDetail.coffee","webpack:///./jsapp/xlform/src/model.utils.markdownTable.coffee","webpack:///./jsapp/xlform/src/model.configs.coffee","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./jsapp/xlform/src/mv.skipLogicHelpers.coffee","webpack:///./jsapp/xlform/src/model.base.coffee","webpack:///./jsapp/js/libs/reflux-promise.js","webpack:///./jsapp/js/actions/permissions.es6","webpack:///./jsapp/js/actions/help.es6","webpack:///./jsapp/js/actions.es6","webpack:///./jsapp/xlform/src/model.aliases.coffee","webpack:///./jsapp/js/dataInterface.es6","webpack:///./test/helper/fauxChai.coffee","webpack:///./jsapp/xlform/src/model.rowDetails.skipLogic.coffee","webpack:///./jsapp/xlform/src/view.utils.coffee","webpack:///./jsapp/xlform/src/model.choices.coffee","webpack:///./jsapp/xlform/src/csv.coffee","webpack:///./test/index.js","webpack:///./jsapp/xlform/src/model.survey.coffee","webpack:///./jsapp/xlform/src/view.rowDetail.SkipLogic.coffee","webpack:///./test/xlform/aliases.tests.coffee","webpack:///./test/xlform/choices.tests.coffee","webpack:///./test/xlform/csv.tests.coffee","webpack:///./jsapp/xlform/src/model.surveyDetail.coffee","webpack:///./test/xlform/deserializer.tests.coffee","webpack:///./test/xlform/group.tests.coffee","webpack:///./test/xlform/inputParser.tests.coffee","webpack:///./test/xlform/translations.tests.coffee","webpack:///./test/xlform/model.tests.coffee","webpack:///./test/xlform/survey.tests.coffee","webpack:///./test/xlform/utils.tests.coffee","webpack:///./jsapp/js/utils.tests.es6","webpack:///./jsapp/js/assetUtils.mocks.es6","webpack:///./jsapp/js/assetUtils.tests.es6","webpack:///./jsapp/js/components/permissions/permissionsMocks.es6","webpack:///./jsapp/js/components/permissions/permParser.tests.es6"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","LANGUAGE_COOKIE_NAME","assign","require","alertify","defaults","notifier","delay","position","closeButton","cookies","Cookies","notify","msg","atype","formatTime","timeStr","moment","calendar","sameElse","formatTimeDate","format","formatDate","getAnonymousUserPermission","permissions","filter","perm","undefined","user__username","user","match","constants","ANON_USERNAME","surveyToValidJson","survey","toFlatJSON","JSON","stringify","unnullifyTranslations","surveyDataJSON","assetContent","surveyData","parse","translatedProps","translated","defaultLang","translations_0","settings","default_language","choices","forEach","choice","translatedProp","surveyRow","nullifyTranslations","translations","baseSurvey","clonedeep","indexOf","Error","formDefaultLang","_initialParams","includes","defaultLangIndex","unshift","pop","row","transletedPropArr","propVal","$autoname","redirectTo","href","location","getUsernameFromUrl","userUrl","buildUserUrl","username","startsWith","protocol","console","error","ROOT_URL","parsePermissions","owner","users","perms","map","codename","permission","can","reduce","cans","split","_log","log","args","profileSeconds","profile","setTimeout","profileEnd","__strings","str","gettext","originalSupportEmail","replaceSupportEmail","supportDetails","replace","email","currentLang","getLangAsObject","langString","openingIndex","closingIndex","langCode","substring","langName","trim","code","getLangString","obj","_t","lastId","newId","prefix","randString","Math","random","toString","stringToColor","prc","color","num","parseInt","amt","round","R","G","B","shade","int_to_rgba","word","h","charCodeAt","hash","isAValidUrl","url","URL","e","checkLatLng","geolocation","validFileTypes","join","koboMatrixParser","params","content","source","hasMatrix","surveyLength","type","appearance","$kuid","matrix","localStorage","getItem","cols","kuid","keys","k","escapeHtml","div","document","createElement","appendChild","createTextNode","innerHTML","readParameters","separator","otherSeparators","RegExp","part","writeParameters","renderCheckbox","id","label","isImportant","additionalClass","launchPrinting","print","getSurveyFlatPaths","output","openedGroups","QUESTION_TYPES","has","rowName","groupsPath","moveToCollection","assetUid","collectionId","actions","resources","updateAsset","parent","_","Backbone","base","$configs","$utils","$rowDetail","$choices","$skipLogicHelpers","BaseRow","attributes","options","kls","ensureKuid","set","txtid","initialize","convertAttributesToRowDetails","isError","RowDetail","val","_parent","silent","attributesArray","arr","v","sort","a","b","_order","isGroup","constructor","isInGroup","detach","opts","remove","selectableRows","questions","limit","non_selectable","getSurvey","forEachRow","question","getValue","includeGroups","export_relevant_values","survey_arr","additionalSheets","toJSON2","outObj","hidden","isBoolean","boolOutputs","toJSON","BaseModel","SimpleRow","finalize","simpleEnsureKuid","getTypeId","linkUp","_isSelectQuestion","get_type","question_types","which","Model","RankRow","surv","sheets","ScoreRankMixin","_extendAll","rr","extend_to_row","isFunction","each","_begin_kuid","_end_json","end_json","_afterIterator","cb","ctxt","addl","extend","includeGroupEnds","_toJSON","clone","add","merge","r2","Row","_isCloned","_rankRows","rankRow","_rankLevels","item","_scoreRows","scoreRow","_scoreChoices","_beginEndKey","_additionalJson","__rows","_rowAttributeName","subrow","mrg","ctx","RankRows","model","Collection","RankMixin","rank_list_id","getList","begin_xlsformrow","Array","ScoreRow","ScoreRows","ScoreMixin","score_list_id_item","score_list_id","warnings","score_list","defaultsUnlessDefined","newRowDetails","defaultsForType","curTypeDefaults","newVals","vk","vv","_type","tpVal","typeDetail","select_from_list_name","processType","rd","newType","isObject","tpid","p2","values","p3","matchedList","rtp","lookupRowType","on","listName","typeStr","specifyChoice","orOtherOption","cl","clname","newRowType","newRow","trigger","names","sluggifyLabel","getAcceptedFiles","setAcceptedFiles","bodyAcceptString","setDetail","getParameters","setParameters","paramObject","paramString","_list","ChoiceList","setList","list","listToSet","RowError","_error","xlfHideWarnings","what","$factory","equalityCriterionPattern","existenceCriterionPattern","criteriaJoinPattern","selectMultiplePattern","parseCriterion","text","matches","operator","response_value","parseMultiselectCriterion","res","criteria","criteriaLength","joinOperators","uniq","criterion","toUpperCase","viewWidgets","Base","attach_to","$el","append","el","bind_event","callback","off","prop","View","Label","className","input","tagName","render","addClass","attr","cid","EmptyView","TextArea","stopPropagation","TextBox","placeholder","Button","html","DropDownModel","DropDown","_options","options_html","option","target","select2","minimumResultsForSearch","inputDeserializer","_csv_to_params","requiredSheetNameList","csv","$aliases","inp","deserialize","validate","validateParse","csv_repr","cobj","sheeted","out","sht","sheet","toObjects","_parse_sheets","repr","isArray","out_sheet","contents","new_row","col","shtName","isString","q","valid_with_sheet","surveyType","sheetId","sn","inputParser","cloneDeep","utils","ParsedStruct","atts","hasBeenParsed","testGroupable","flatten_translated_fields","_translated_val","parseArr","sArr","counts","open","close","count_att","opn_cls","att","grpStack","_pushGrp","grp","_curGrp","_popGrp","closedByAtts","_l","_groupAtts","begin","message","normalizeRequiredValues","normalizedSurvey","required","truthyValues","falsyValues","nullified","loadChoiceLists","passedChoices","tmp","choiceNames","lName","choiceRow","cn","stateChanges","orig_obj","new_obj","any","permConfig","Reflux","createStore","init","this","state","listenTo","getConfig","completed","onGetConfigCompleted","failed","onGetConfigFailed","setState","change","changed","response","results","getPermissionByCodename","permCodename","verifyReady","find","getPermission","permUrl","$skipLogicParser","$validationLogicParser","_trim","skipLogicParser","validationLogicParser","split_paste","trimmed","out_out","orow","randChar","charI","floor","String","fromCharCode","newI","toLowerCase","parseHelper","parseSkipLogic","collection","parent_row","meta","parsedValues","reset","parseable","expressionCode","crit","criterionOption","findRowByName","other_names","sluggify","preventDuplicates","lowerCase","preventDuplicateUnderscores","stripSpaces","lrstrip","incrementorPadding","validXmlTag","isValidXmlTag","search","lstrip","rstrip","descriptor","replaceNonWordCharacters","nonWordCharsExceptions","underscores","characterLimit","regex","isNumber","names_lc","attempt_base","attempt","increment","increment_str","pow","$survey","$row","$rowDetailsSkipLogic","_keys","rowDetailsSkipLogic","configs","parseFormData","parsed","formView","buildBackendPerm","PERMISSIONS_CODENAMES","formEdit","submissionsViewPartial","permObj","partial_permissions","filters","submissionsViewPartialUsers","submissionsView","submissionsAdd","submissionsEdit","submissionsValidate","removeImpliedPerms","removeContradictoryPerms","contraPerms","Set","backendPerm","contradictory","contraPerm","impliedPerms","implied","impliedPerm","permissionCodename","buildFormData","formData","partial","_submitted_by","$in","parseUserWithPermsList","itemPerm","outputPerm","parseBackendData","ownerUrl","includeAnon","groupedData","isOwner","sortParseBackendOutput","parseOldBackendData","permDef","permParser","SurveyFixture","equivs","invals","_append","_o","equiv","inval","main","_main","surveys","cascading","x","pizza_survey","xlf1","select_one","yes_no","xlf2","groups","rows","singleton","Validator","__validators","invalidChars","chars","test","unique","validationsLength","validations","currentValidation","failureMessage","$modelRowDetailsSkipLogic","$viewRowDetailSkipLogic","$modelUtils","$validationLogicHelpers","$modelRowDetailValidationLogic","$viewRowDetailValidationLogic","relevant","serialize","Raven","captureException","postInitialize","model_factory","SkipLogicFactory","view_factory","SkipLogicViewFactory","helper_factory","SkipLogicHelperFactory","facade","SkipLogicPresentationFacade","constraint","ValidationLogicModelFactory","ValidationLogicViewFactory","ValidationLogicHelperFactory","deduplicate","rootPath","head","querySelector","host","Map","COLLECTION_PERMISSIONS","HOOK_LOG_STATUSES","SUCCESS","PENDING","FAILED","KEY_CODES","MODAL_TYPES","SHARING","UPLOADING_XLS","NEW_FORM","ENKETO_PREVIEW","SUBMISSION","REPLACE_PROJECT","TABLE_COLUMNS","REST_SERVICES","FORM_LANGUAGES","FORM_TRANSLATIONS_TABLE","PROJECT_SETTINGS_CONTEXTS","NEW","EXISTING","REPLACE","BUILDER","update_states","UNSAVED_CHANGES","UP_TO_DATE","PENDING_UPDATE","SAVE_FAILED","AVAILABLE_FORM_STYLES","VALIDATION_STATUSES","no_status","validation_status_not_approved","validation_status_approved","validation_status_on_hold","VALIDATION_STATUSES_LIST","ASSET_TYPES","block","template","ASSET_KINDS","kind","faIcon","META_QUESTION_TYPES","NAME_MAX_LENGTH","$","validationLogicHelpers","create_presenter","criterion_model","criterion_view","ValidationLogicPresenter","current_question","create_builder","ValidationLogicBuilder","create_context","ValidationLogicHelperContext","serialized_criteria","change_question","SkipLogicPresenter","_parse_skip_logic_criteria","_get_question","build_empty_criterion","operator_picker_view","create_operator_picker","response_value_view","create_response_value_view","_operator_type","presenter","build_criterion_logic","create_operator","operator_type","operator_type_id","operators","operator_types","SkipLogicBuilder","questionTypeHasNoValidationOperators","use_hand_code_helper","use_mode_selector_helper","ValidationLogicModeSelectorHelper","destination","ValidationLogicHandCodeHelper","builder","button","create_empty","typeId","SkipLogicHelperContext","context","handcode_button","create_button","SkipLogicModeSelectorHelper","$handCode","textarea","$destination","replaceWith","SkipLogicHandCodeHelper","rowDetailValidationLogic","$skipLogicModel","symbol","ValidationLogicTextOperator","ValidationLogicDateOperator","ValidationLogicBasicOperator","ValidationLogicExistenceOperator","ValidationLogicSelectMultipleOperator","EmptyOperator","create_criterion_model","ValidationLogicCriterion","question_name","SkipLogicOperator","selected","SelectMultipleSkipLogicOperator","old_question_type","question_type","get_id","change_operator","get_value","response_type","change_response","SkipLogicCriterion","viewRowDetailValidationLogic","$skipLogicView","$viewWidgets","create_criterion_builder_view","ValidationLogicCriterionBuilder","create_question_picker","ValidationLogicQuestionPicker","op_type","OperatorPicker","SkipLogicCriterionBuilderView","$base","surveyFragment","KobomatrixRow","KobomatrixRows","KobomatrixMixin","_kobomatrix_columns","_kobomatrix_cols","items","kobomatrix_list","passFunctionToMetaModel","fname","_meta","_forEachRow","_beforeIterator","includeErrors","index","flat","SurveyFragment","Rows","_validate","clearErrors","isValid","addError","errors","invoke","getRowDescriptors","descriptors","findRowByCid","fn","addRowAtIndex","addRow","at","afterRow","after","models","beforeRow","before","_addGroup","concat","rowCids","lowest_i","row_i","first_row","addOpts","previous","precedingRow","parentRow","newGroupDetails","Group","_insertRowInPlace","_allRows","BaseCollection","grpDefaults","typeIsRepeat","_isRepeat","autoname","slgOpts","new_name","splitApart","startingIndex","groupStart","groupEnd","_groupOrRepeatKey","group","shts","_kuid","_as_json","INVALID_TYPES_AT_THIS_STAGE","_determineConstructorByParams","formSettingsTypes","RowConstructor","comparator","ordinal","markdownTable","mdSurveyStructureToObject","md","curSheet","sObj","_pushSheet","sheetObjs","rowObj","cell","_r","rcells","csvJsonToMarkdown","csvJson","_lengths","_record_max","_ljust","diff","_append_line_arr","_arr","preceding","outstr","_sht","columns","typeLabels","defaultSurveyDetails","start_time","description","default","end_time","today","simserial","subscriberid","deviceid","aliases","phoneNumber","audit","SurveyDetailSchemaItem","_forSurvey","SurveyDetailSchema","typeList","_typeList","surveyDetailSchema","defaultsGeneral","geotrace","_hideUnlessChanged","geoshape","geopoint","image","video","audio","file","note","integer","barcode","decimal","date","range","calculate","calculation","datetime","time","acknowledge","paramTypes","number","boolean","questionParams","start","defaultValue","end","step","randomize","seed","select_multiple","preventRequired","isMedia","Type","types","exp","tp","typeSelectList","autoset_kuid","columnOrder","hint","guidance_hint","constraint_message","tags","webpackContext","req","webpackContextResolve","resolve","skipLogicHelpers","view","update_choice_list","choicelist_cid","current_response_value","dispatcher","attach_operator","change_response_view","finish_changing","operator_id","response_text","response_view","attach_response","rV","is_valid","question_picker_view","build_criterion_builder","build_criterion","extra","build_operator_logic","build_operator_model","equality_operator_type","parser_name","operator_model","create_criterion_view","selectable","use_criterion_builder_helper","empty","presenters","SkipLogicCriterionBuilderHelper","criterion_delimiter","Events","determine_add_new_criterion_visibility","removeInvalidPresenters","presenters_to_be_removed","serialize_all","determine_criterion_delimiter_visibility","$criterion_delimiter","hide","show","$add_new_criterion_button","serialized","add_empty","all_presenters_are_valid","action","switch_editing_mode","build_hand_code_criteria","$parent","create_textarea","criterion_builder_button","ops","EX","EXISTENCE","EQUALITY","GREATER_THAN","GREATER_THAN_EQ","EQ","GT","GE","negated_label","abbreviated_label","abbreviated_negated_label","ans_notnull","ans_null","resp_equals","resp_notequals","multiplechoice_selected","multiplechoice_notselected","resp_greater","resp_less","resp_greaterequals","resp_lessequals","validation","$viewUtils","$rowDetailMixins","validators","customValue","pluck","mixin","arg","resp","ii","nextRow","vals2set","idAttribute","_oValue","changes","createFunctions","PromiseFactory","triggerPromise","me","arguments","canHandlePromise","children","createdPromise","reject","willCallPromise","nextTick","previousPromise","promise","inputPromise","then","removeSuccess","listen","removeFailed","catch","listenAndPromise","bindContext","removeListen","returnedPromise","promiseFactory","PublisherMethods","triggerAsync","use","RefluxPromise","Promise","permissionsActions","createActions","getAssetPermissions","getCollectionPermissions","bulkSetAssetPermissions","assignCollectionPermission","assignAssetPermission","removeAssetPermission","removeCollectionPermission","copyPermissionsFrom","assignPublicPerm","setCollectionDiscoverability","dataInterface","getPermissionsConfig","done","fail","uid","permissionAssignments","removePermission","sourceUid","targetUid","discoverable","patchCollection","discoverable_when_public","helpActions","getInAppMessages","setMessageAcknowledged","setMessageReadTime","getHelpInAppMessages","readTime","patchHelpInAppMessage","interactions","acknowledged","isAcknowledged","help","navigation","auth","verifyLogin","logout","changePassword","getEnvironment","getApiToken","addExternalItemAtPosition","assets","collections","listCollections","createAsset","createImport","loadAsset","deployAsset","setDeploymentActive","createSnapshot","cloneAsset","deleteAsset","listTags","createCollection","updateCollection","asyncResult","deleteCollection","loadAssetSubResource","loadAssetContent","loadResource","createResource","updateSubmissionValidationStatus","removeSubmissionValidationStatus","getAssetFiles","notFound","hooks","getAll","update","delete","getLogs","retryLog","retryLogs","misc","checkUsername","updateProfile","getServerEnvironment","queryUserExistence","callbacks","patchProfile","onComplete","onFail","hadFieldsErrors","entries","responseJSON","errorProp","serverEnvironment","base64Encoded","postCreateImport","status","details","createAssetSnapshot","next","captureMessage","patchAsset","asset","onFailed","redeployment","onDone","failure_message","xform_id_string","detail","responseText","alert","deployment__active","assetId","reports","setStyle","setCustom","report_styles","report_custom","table","updateSettings","setMapStyles","mapStyles","map_styles","started","err","searchData","searchAssets","selfProfile","loggedin","anonymous","currentPassword","newPassword","current_password","new_password","environment","apiToken","token","dispatchMethodName","getAssetContent","sid","getHooks","addExternalService","hookUid","updateExternalService","deleteExternalService","getHookLogs","lid","retryExternalServiceLog","retryExternalServiceLogs","aliases_dict","repeat","kobomatrix","score","rank","groupable","flatten","groupsOrRepeats","testGroupOrRepeat","hiddenTypes","custom","$ajax","ajax","dataType","method","assetMapping","ajaxError","event","request","errorMessage","serverMessage","Deferred","listTemplates","getJSON","createTemporaryAssetSnapshot","getHook","contentType","getHookLog","getReportData","identifierString","identifiers","group_by","version_id","new_asset_type","clone_from","clone_from_version_id","asset_type","cloneCollection","libraryDefaultSearch","subscribeCollection","unsubscribeCollection","collection__uid","getImportDetails","getAsset","createExport","getAssetExports","deleteAssetExport","euid","getAssetXformView","assetsHash","getCollection","loadNextPageUrl","nextPageUrl","active","FormData","processData","getResource","assetType","getSubmissions","pageSize","page","fields","query","f","desc","getSubmission","patchSubmissions","bulkRemoveSubmissionsValidationStatus","getSubmissionsQuery","deleteSubmission","bulkDeleteSubmissions","getEnketoEditLink","uploadAssetFile","deleteAssetFile","setLanguage","login","creds","chai","chaiExpect","expect","toBe","y","to","equal","toThrow","toBeDefined","not","be","toContain","contain","toEqual","eql","toBeTruthy","ok","toBeUndefined","TextOperator","DateOperator","ExistenceSkipLogicOperator","create_response_model","IntegerResponseModel","DecimalResponseModel","ResponseModel","factory","response_model","questionName","is_negated","get_correct_type","set_option_names","current_value","choicelist","choice_cids","set_value","Operator","_set_value","pattern","value_is_not_number","lastIndexOf","DateResponseModel","viewUtils","$div","enketoServer","normalizeEventName","eventName","reorderElemsByData","selector","dataAttribute","parentEl","parentElement","appendTo","cleanStringify","attArr","debugFrame","debugFrameStyle","width","height","bottom","left","overflow","zIndex","backgroundColor","showFn","txt","class","css","launchQuestionLibrary","wrap","click","enketoIframe","enketoPreviewUri","buildUrl","previewUrl","_loadConfigs","launch","src","load","fromCsv","surveyCsv","holder","previewServer","body","onError","complete","jqhr","unique_string","onSuccess","informative_message","statusText","title","ViewComposer","views","event_name","Option","unset","destroy","getKeys","with_val","Options","summaryObj","__cascadedList","_get_previous_linked_choice_list","_get_last_linked_choice_list","prev","_get_first_linked_choice_list","_has_corresponding_row","_name","_create_corresponding_row_data","full_path","_full_path_choice_filter","prevs","rows_data","build_row_data","curlist","choice_filter","compact","last","cl_name","next_list","create_corresponding_rows","_index","row_data","getOptionKeys","option_key","option_keys","json","getNames","opt","ChoiceLists","getListNames","shorter","Csv","param","_isString","string","toArray","arrayToObjects","rowArray","_isArray","buildRowArray","rowObjects","column","colsChanged","toObject","toArrays","asCsvCellValue","delimiter","_remove_extra_escape_chars","ss","fromStringArray","outpArr","fromArray","headRow","csvString","arrayToObject","sortByKey","includeSortByKey","sortByKeyI","sbKeyVal","removeTrailingNewlines","_parse_string","strData","strDelimiter","_objPattern","arrMatches","exec","strMatchedDelimiter","strMatchedValue","parseFloat","isNaN","parsedMatch","SheetedCsv","_sheetIds","_sheets","parseSheetedCsv","osids","outp","rowA","headRowStr","shcsv","orderedSheetIds","cell1","remaining","shCsv","substr","_nativeIsArray","callee","jQuery","$surveyFragment","$surveyDetail","$inputDeserializer","$inputParser","$markdownTable","Survey","addlOpts","Settings","enable_auto_name","sname","surveyDetails","SurveyDetails","loadSchema","surveyDetailsSchema","importDetail","importDefaults","linkUpChoiceLists","choiceKeys","overlapping_choice_keys","intersection","choiceList","insert_row","rowlist","name_detail","_ensure_row_list_is_copied","insertSurvey","targetGroupId","foundGroup","index_incr","noDetach","spaces","flattened_choices","_c","list_name","list_item","setManually","addlSheets","sd","logFn","tabs","logr","summarize","rowCount","hasGps","prepCols","exclude","toSsStructure","toCsvJson","oCols","oRows","addRowToORows","colJson","choicesCsvJson","lists","_getSubLists","clName","clAtts","toMarkdown","toCSV","_usingSurveyLoadCsv","_is_csv","_deserialized","_parsed","loadDict","auto_name","changing_form_title","viewRowDetailSkipLogic","events","uniqueId","addCriterion","evt","deleteCriterion","modelId","$target","markChangedDelimSelector","alreadyRendered","mark_question_specified","is_specified","toggleClass","bind_question_picker","questionVal","$question_picker","disable_placeholder_option","bind_operator_picker","$operator_picker","bind_response_value","response_value_handler","$response_value","element","QuestionPicker","$firstChild","_set_style","numValue","Number","absolute_value","abs","parents","SkipLogicEmptyResponse","SkipLogicTextResponse","handler","SkipLogicValidatingTextResponseView","setElement","$error_message","show_invalid_view","clear_invalid_view","$input","focus","removeClass","SkipLogicDropDownResponse","responses","handle_model_cid_change","target_question","set_options","create_textbox","create_label","expectSorted","describe","it","expectGroupableParse","$surveyFixtures","beforeEach","yesno","_city_choicelist","row2","yesnoClone","example","_csv","compile","ex1","converted_to_objects","converted_to_string","sampleSurveyObj","key1","key2","key3","k4","k5","tf","expectedError","ss2","notSurvey","SurveyDetail","parameters","schema","_schema","dtobj","clonedRow","_n","pkg","r1","r_end","cr1","cr_end","chain","_firstGroup","first","_lastGroup","first_group","g1","g2","survey_content","r0","r3","grp1","c1","c2","c3","$surveys","expected","process","$model","xlform_survey_model","pizzaSurvey","PIZZA_SURVEY","createSurveyCsv","choiceSheet","createSurvey","firstRow","compareCsvs","x1","x2","x1r","x2r","dumpAndLoad","scsv","xlf","dead_simple","LISTS","gender","rowc","labels","processed_required","exported","r1type","row1","survey_kuids","ynm","yn","census","CENSUS_SURVEY","iterateOver","singleQ","withChoices","lastRow","afterEach","populateRow","expectValue","_load_csv","_load_md","expectKeys","_results","surveyNames","getName","qa","qc","getProp","propName","pasted","expectation","_eqKeyVals","splitted","valid_xml","invalid_xml","inp_exps","inps","exps","additionals","_out","langObj","pizzaType","delivery","deep","throw","foo","bar","fum","baz","pair","surveyWithGroups","Your_place","Your_name","When_did_you_eat","What_did_you_eat","Snack_name","Time_of_consumption","How_much_protein_was_it","How_much_H2O_was_it","Favourite_food","Favourite_fruit","Favourite_carrot","Favourite_potato","Favourite_vegan_hummus","Favourite_spiece","Comments","assetWithAnonymousUser","assetWithMultipleUsers","assetWithPartial","endpoints","sortedOutput","built","userWithPermsList"],"mappings":"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IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,gBAAiB,IACjB,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OA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","file":"tests-0d7a490cd2ebc6452d34.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/compiled/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([844,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\n * A collection of miscellaneous utility functions.\n *\n * NOTE: these are used also by the Form Builder coffee code (see\n * `jsapp/xlform/src/view.surveyApp.coffee`)\n *\n * TODO: group these functions by what are they doing or where are they mostly\n * (or uniquely) used, and split to smaller files.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport moment from 'moment';\nimport alertify from 'alertifyjs';\nimport {Cookies} from 'react-cookie';\n// imporitng whole constants, as we override ROOT_URL in tests\nimport constants from 'js/constants';\n\nexport const LANGUAGE_COOKIE_NAME = 'django_language';\n\nexport var assign = require('object-assign');\n\nalertify.defaults.notifier.delay = 10;\nalertify.defaults.notifier.position = 'bottom-left';\nalertify.defaults.notifier.closeButton = true;\n\nconst cookies = new Cookies();\n\nexport function notify(msg, atype='success') {\n  alertify.notify(msg, atype);\n}\n\nexport function formatTime(timeStr) {\n  var _m = moment(timeStr);\n  return _m.calendar(null, {sameElse: 'LL'});\n}\n\nexport function formatTimeDate(timeStr) {\n  var _m = moment(timeStr);\n  return _m.format('LLL');\n}\n\nexport function formatDate(timeStr) {\n  var _m = moment(timeStr);\n  return _m.format('ll');\n}\n\nexport function getAnonymousUserPermission(permissions) {\n  return permissions.filter(function(perm){\n    if (perm.user__username === undefined) {\n      perm.user__username = perm.user.match(/\\/users\\/(.*)\\//)[1];\n    }\n    return perm.user__username === constants.ANON_USERNAME;\n  })[0];\n}\n\nexport function surveyToValidJson(survey) {\n  // skip logic references only preserved after initial call\n  // to \"survey.toFlatJSON()\"\n  survey.toFlatJSON();\n  // returning the result of the second call to \"toFlatJSON()\"\n  return JSON.stringify(survey.toFlatJSON());\n}\n\n\n/**\n * This function reverses what `nullifyTranslations` did to the form data.\n * @param {string} surveyDataJSON\n * @param {object} assetContent\n * @return {string} fixed surveyDataJSON\n */\nexport function unnullifyTranslations(surveyDataJSON, assetContent) {\n  let surveyData = JSON.parse(surveyDataJSON);\n\n  let translatedProps = [];\n  if (assetContent.translated) {\n     translatedProps = assetContent.translated;\n  }\n\n  // TRANSLATIONS HACK (Part 2/2):\n  // set default_language\n  let defaultLang = assetContent.translations_0;\n  if (!defaultLang) {\n    defaultLang = null;\n  }\n  if (!surveyData.settings[0].default_language && defaultLang !== null) {\n    surveyData.settings[0].default_language = defaultLang;\n  }\n\n  if (defaultLang !== null) {\n    // replace every \"translatedProp\" with \"translatedProp::defaultLang\"\n    if (surveyData.choices) {\n      surveyData.choices.forEach((choice) => {\n        translatedProps.forEach((translatedProp) => {\n          if (typeof choice[translatedProp] !== 'undefined') {\n            choice[`${translatedProp}::${defaultLang}`] = choice[translatedProp];\n            delete choice[translatedProp];\n          }\n        });\n      });\n    }\n    if (surveyData.survey) {\n      surveyData.survey.forEach((surveyRow) => {\n        translatedProps.forEach((translatedProp) => {\n          if (typeof surveyRow[translatedProp] !== 'undefined') {\n            surveyRow[`${translatedProp}::${defaultLang}`] = surveyRow[translatedProp];\n            delete surveyRow[translatedProp];\n          }\n        });\n      });\n    }\n  }\n\n  return JSON.stringify(surveyData);\n}\n\n/**\n * @typedef NullifiedTranslations\n * @property {object} survey - Modified survey.\n * @property {Array<string|null>} translations - Modified translations.\n * @property {Array<string|null>} translations_0 - The original default language name.\n */\n\n/**\n * A function that adjust the translations data to the Form Builder code.\n * Requires the sibling `unnullifyTranslations` function to be called before\n * saving the form.\n * @param {Array<string|null>} [translations]\n * @param {Array<string>} translatedProps\n * @param {object} survey\n * @param {object} baseSurvey\n * @return {NullifiedTranslations}\n */\nexport function nullifyTranslations(translations, translatedProps, survey, baseSurvey) {\n  const data = {\n    survey: clonedeep(survey),\n    translations: clonedeep(translations)\n  };\n\n  if (typeof translations === 'undefined') {\n    data.translations = [null];\n    return data;\n  }\n\n  if (data.translations.length > 1 && data.translations.indexOf(null) !== -1) {\n    throw new Error('There is an unnamed translation in your form definition.\\nPlease give a name to all translations in your form.\\nUse \"Manage Translations\" option from form landing page.');\n  }\n\n  /*\n  TRANSLATIONS HACK (Part 1/2):\n  all the coffee code assumes first language to be null, and we don't want\n  to introduce potential code-breaking refactor in old code, so we store\n  first language, then replace with null and reverse this just before saving\n  NOTE: when importing assets from Library into form, we need to make sure\n  the default language is the same (or force baseSurvey default language)\n  */\n  if (baseSurvey) {\n    const formDefaultLang = baseSurvey._initialParams.translations_0 || null;\n    if (data.translations[0] === formDefaultLang) {\n      // case 1: nothing to do - same default language in both\n    } else if (data.translations.includes(formDefaultLang)) {\n      // case 2: imported asset has form default language but not as first, so\n      // we need to reorder things\n      const defaultLangIndex = data.translations.indexOf(formDefaultLang);\n      data.translations.unshift(data.translations.pop(defaultLangIndex));\n      data.survey.forEach((row) => {\n        translatedProps.forEach((translatedProp) => {\n          const transletedPropArr = row[translatedProp];\n          if (transletedPropArr) {\n            transletedPropArr.unshift(transletedPropArr.pop(defaultLangIndex));\n          }\n        });\n      });\n    }\n\n    if (!data.translations.includes(formDefaultLang)) {\n      // case 3: imported asset doesn't have form default language, so we\n      // force it onto the asset as the first language and try setting some\n      // meaningful property value\n      data.translations.unshift(formDefaultLang);\n      data.survey.forEach((row) => {\n        translatedProps.forEach((translatedProp) => {\n          if (row[translatedProp]) {\n            let propVal = null;\n            if (row.name) {\n              propVal = row.name;\n            } else if (row.$autoname) {\n              propVal = row.$autoname;\n            }\n            row[translatedProp].unshift(propVal);\n          }\n        });\n      });\n    }\n  }\n\n  // no need to nullify null\n  if (data.translations[0] !== null) {\n    data.translations_0 = data.translations[0];\n    data.translations[0] = null;\n  }\n\n  return data;\n}\n\nexport function redirectTo(href) {\n  window.location.href = href;\n}\n\n// works universally for v1 and v2 urls\nexport function getUsernameFromUrl(userUrl) {\n  return userUrl.match(/\\/users\\/(.*)\\//)[1];\n}\n\nexport function buildUserUrl(username) {\n  if (username.startsWith(window.location.protocol)) {\n    console.error(\"buildUserUrl() called with URL instead of username (incomplete v2 migration)\");\n    return username;\n  }\n  return `${constants.ROOT_URL}/api/v2/users/${username}/`;\n}\n\nexport function parsePermissions(owner, permissions) {\n  var users = [];\n  var perms = {};\n  if (!permissions) {\n    return [];\n  }\n  permissions.map((perm) => {\n    perm.user__username = perm.user.match(/\\/users\\/(.*)\\//)[1];\n    const codename = perm.permission.match(/\\/permissions\\/(.+)\\//);\n    if (codename !== null) {\n      console.error(\"parsePermissions(): converting new-style permission URL to codename (incomplete v2 migration)\");\n      perm.permission = codename[1];\n    }\n    return perm;\n  }).filter((perm)=> {\n    return ( perm.user__username !== owner && perm.user__username !== constants.ANON_USERNAME);\n  }).forEach((perm)=> {\n    if(users.indexOf(perm.user__username) === -1) {\n      users.push(perm.user__username);\n      perms[perm.user__username] = [];\n    }\n    perms[perm.user__username].push(perm);\n  });\n  return users.map((username)=>{\n    return {\n      username: username,\n      can: perms[username].reduce((cans, perm)=> {\n        var permCode = perm.permission.includes('_submissions') ? perm.permission : perm.permission.split('_')[0];\n        cans[permCode] = perm;\n        return cans;\n      }, {})\n    };\n  });\n}\n\n\nexport var log = (function(){\n  var _log = function(...args) {\n    console.log.apply(console, args);\n    return args[0];\n  };\n  _log.profileSeconds = function(n=1) {\n    console.profile();\n    window.setTimeout(function(){\n      console.profileEnd();\n    }, n * 1000);\n  };\n  return _log;\n})();\nwindow.log = log;\n\n\nvar __strings = [];\n\n\n/*a global gettext function*/\nexport function t(str) {\n  if (window.gettext) {\n    return window.gettext(str);\n  } else {\n    return str;\n  }\n}\n\n\nconst originalSupportEmail = 'help@kobotoolbox.org';\n\n// use this utility function to replace hardcoded email in transifex translations\nexport function replaceSupportEmail(str) {\n  if (typeof supportDetails !== 'undefined') {\n    return str.replace(originalSupportEmail, supportDetails.email);\n  } else {\n    return str;\n  }\n}\n\nexport function currentLang() {\n  return cookies.get(LANGUAGE_COOKIE_NAME) || 'en';\n}\n\n// langString contains name and code e.g. \"English (en)\"\nexport function getLangAsObject(langString) {\n  const openingIndex = langString.indexOf('(');\n  const closingIndex = langString.indexOf(')');\n\n  const langCode = langString.substring(openingIndex + 1, closingIndex);\n\n  const langName = langString.substring(0, openingIndex).trim();\n\n  if (\n    langCode &&\n    langName &&\n    // make sure langString contains just name and bracket-wrapped code\n    langName.length + langCode.length + 3 === langString.length\n  ) {\n    return {\n      code: langCode,\n      name: langName\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport function getLangString(obj) {\n  if (typeof obj === 'object' && obj.name && obj.code) {\n    return `${obj.name} (${obj.code})`;\n  } else {\n    return undefined;\n  }\n}\n\nlog.t = function () {\n  let _t = {};\n  __strings.forEach(function(str){ _t[str] = str; })\n  console.log(JSON.stringify(_t, null, 4));\n};\n\n// unique id for forms with inputs and labels\nlet lastId = 0;\nexport var newId = function(prefix='id') {\n  lastId++;\n  return `${prefix}${lastId}`;\n};\n\nexport var randString = function () {\n  return Math.random().toString(36).match(/\\.(\\S{6}).*/)[1];\n};\n\nexport function stringToColor(str, prc) {\n  // Higher prc = lighter color, lower = darker\n  prc = typeof prc === 'number' ? prc : -15;\n  var hash = function(word) {\n      var h = 0;\n      for (var i = 0; i < word.length; i++) {\n          h = word.charCodeAt(i) + ((h << 5) - h);\n      }\n      return h;\n  };\n  var shade = function(color, prc) {\n      var num = parseInt(color, 16),\n          amt = Math.round(2.55 * prc),\n          R = (num >> 16) + amt,\n          G = (num >> 8 & 0x00FF) + amt,\n          B = (num & 0x0000FF) + amt;\n      return (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n          (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n          (B < 255 ? B < 1 ? 0 : B : 255))\n          .toString(16)\n          .slice(1);\n  };\n  var int_to_rgba = function(i) {\n      var color = ((i >> 24) & 0xFF).toString(16) +\n          ((i >> 16) & 0xFF).toString(16) +\n          ((i >> 8) & 0xFF).toString(16) +\n          (i & 0xFF).toString(16);\n      return color;\n  };\n  return shade(int_to_rgba(hash(str)), prc);\n}\n\nexport function isAValidUrl(url) {\n  try {\n    new URL(url);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexport function checkLatLng(geolocation) {\n  if (geolocation && geolocation[0] && geolocation[1]) return true;\n  else return false;\n}\n\n\nexport function validFileTypes() {\n  const VALID_ASSET_UPLOAD_FILE_TYPES = [\n    '.xls',\n    '.xlsx',\n    'application/xls',\n    'application/vnd.ms-excel',\n    'application/octet-stream',\n    'application/vnd.openxmlformats',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    '' // Keep this to fix issue with IE Edge sending an empty MIME type\n  ];\n  return VALID_ASSET_UPLOAD_FILE_TYPES.join(',');\n}\n\nexport function koboMatrixParser(params) {\n  let content = {};\n  if (params.content)\n    content = JSON.parse(params.content);\n  if (params.source)\n    content = JSON.parse(params.source);\n\n  if (!content.survey)\n    return params;\n\n  var hasMatrix = false;\n  var surveyLength = content.survey.length;\n\n  // add open/close tags for kobomatrix groups\n  for (var i = 0; i < surveyLength; i++) {\n    if (content.survey[i].type === 'kobomatrix') {\n      content.survey[i].type = 'begin_kobomatrix';\n      content.survey[i].appearance = 'field-list';\n      surveyLength++;\n      content.survey.splice(i + 1, 0, {type: 'end_kobomatrix', '$kuid': `/${content.survey[i].$kuid}`});\n    }\n  }\n\n  // add columns as items in the group\n  for (i = 0; i < surveyLength; i++) {\n    if (content.survey[i].type === 'begin_kobomatrix') {\n      var j = i;\n      hasMatrix = true;\n      var matrix = localStorage.getItem(`koboMatrix.${content.survey[i].$kuid}`);\n\n      if (matrix != null) {\n        matrix = JSON.parse(matrix);\n        for (var kuid of matrix.cols) {\n          i++;\n          surveyLength++;\n          content.survey.splice(i, 0, matrix[kuid]);\n        }\n\n        for (var k of Object.keys(matrix.choices)) {\n          content.choices.push(matrix.choices[k]);\n        }\n      }\n      // TODO: handle corrupt matrix data\n    }\n  }\n\n  if (hasMatrix) {\n    if (params.content)\n      params.content = JSON.stringify(content);\n    if (params.source)\n      params.source = JSON.stringify(content);\n  }\n  return params;\n}\n\nexport function escapeHtml(str) {\n  const div = document.createElement('div');\n  div.appendChild(document.createTextNode(str));\n  return div.innerHTML;\n}\n\nexport function readParameters(str) {\n  if (typeof str !== 'string') {\n    return null;\n  }\n\n  const params = {};\n\n  let separator = ' ';\n  if (str.includes(';')) {\n    separator = ';';\n  } else if (str.includes(',')) {\n    separator = ',';\n  }\n  const otherSeparators = ';, '.replace(separator, '');\n  const cleanStr = str.replace(new RegExp(' *= *', 'g'), '=');\n  const parts = cleanStr.split(new RegExp(`[${otherSeparators}]*${separator}[${otherSeparators}]*`, 'g'));\n\n  parts.forEach((part) => {\n    if (part.includes('=')) {\n      const key = part.slice(0, part.indexOf('='));\n      const value = part.slice(key.length + 1);\n      params[key] = value;\n    }\n  });\n\n  if (Object.keys(params).length < 1) {\n    return null;\n  }\n  return params;\n}\n\nexport function writeParameters(obj) {\n  let params = [];\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] !== undefined && obj[key] !== null) {\n      let value = obj[key];\n      if (typeof value === 'object') {\n        value = JSON.stringify(value);\n      }\n      params.push(`${key}=${value}`);\n    }\n  });\n  return params.join(';');\n}\n\nexport function renderCheckbox(id, label, isImportant) {\n  let additionalClass = '';\n  if (isImportant) {\n    additionalClass += 'alertify-toggle-important';\n  }\n  return `<div class=\"alertify-toggle checkbox ${additionalClass}\"><label class=\"checkbox__wrapper\"><input type=\"checkbox\" class=\"checkbox__input\" id=\"${id}\"><span class=\"checkbox__label\">${label}</span></label></div>`;\n};\n\nexport function launchPrinting() {\n  window.print();\n}\n","import {actions} from './actions';\nimport {QUESTION_TYPES} from 'js/constants';\n\n/**\n * @param {object} survey\n * @returns {object} a pair of quesion names and their full paths\n */\nexport function getSurveyFlatPaths(survey) {\n  const output = {};\n  const openedGroups = [];\n\n  survey.forEach((row) => {\n    if (row.type === 'begin_group' || row.type === 'begin_repeat') {\n      openedGroups.push(row.name || row.$autoname);\n    }\n    if (row.type === 'end_group' || row.type === 'end_repeat') {\n      openedGroups.pop();\n    }\n\n    if (QUESTION_TYPES.has(row.type)) {\n      const rowName = row.name || row.$autoname;\n      let groupsPath = '';\n      if (openedGroups.length >= 1) {\n        groupsPath = openedGroups.join('/') + '/';\n      }\n\n      output[rowName] = `${groupsPath}${rowName}`;\n    }\n  });\n\n  return output;\n}\n\n/**\n * Moves asset to a non-nested collection.\n * @param {string} assetUid\n * @param {string} collectionId\n */\nexport function moveToCollection(assetUid, collectionId) {\n  actions.resources.updateAsset(\n    assetUid,\n    {parent: `/api/v2/collections/${collectionId}/`}\n  );\n}\n\nexport default {\n  getSurveyFlatPaths,\n  moveToCollection\n};\n","global = @\n\n_ = require 'underscore'\nBackbone = require 'backbone'\nalertify = require 'alertifyjs'\nbase = require './model.base'\n$configs = require './model.configs'\n$utils = require './model.utils'\n$surveyDetail = require './model.surveyDetail'\n$aliases = require './model.aliases'\n$rowDetail = require './model.rowDetail'\n$choices = require './model.choices'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n_t = require('utils').t\nreadParameters = require('utils').readParameters\nwriteParameters = require('utils').writeParameters\n\nmodule.exports = do ->\n  row = {}\n\n  class row.BaseRow extends base.BaseModel\n    @kls = \"BaseRow\"\n    constructor: (attributes={}, options={})->\n      for key, val of attributes when key is \"\"\n        delete attributes[key]\n      super(attributes, options)\n\n    ensureKuid: ->\n      if '$kuid' not of @attributes\n        @set '$kuid', $utils.txtid()\n\n    initialize: ->\n      @ensureKuid()\n      @convertAttributesToRowDetails()\n\n    isError: -> false\n    convertAttributesToRowDetails: ->\n      for key, val of @attributes\n        unless val instanceof $rowDetail.RowDetail\n          @set key, new $rowDetail.RowDetail({key: key, value: val}, {_parent: @}), {silent: true}\n    attributesArray: ()->\n      arr = ([k, v] for k, v of @attributes)\n      arr.sort (a,b)-> if a[1]._order < b[1]._order then -1 else 1\n      arr\n\n    isGroup: ->\n      @constructor.kls is \"Group\"\n\n    isInGroup: ->\n      @_parent?._parent?.constructor.kls is \"Group\"\n\n    detach: (opts)->\n      if @_parent\n        @_parent.remove @, opts\n        @_parent = null\n      ` `\n\n    selectableRows: () ->\n      questions = []\n      limit = false\n\n      non_selectable = ['datetime', 'time', 'note', 'calculate', 'group', 'kobomatrix', 'repeat', 'rank', 'score']\n\n      survey = @getSurvey()\n      if survey == null\n        return null\n      survey.forEachRow (question) =>\n        limit = limit || question is @\n        if !limit && question.getValue('type') not in non_selectable\n          questions.push question\n      , includeGroups:true\n      questions\n\n    export_relevant_values: (survey_arr, additionalSheets)->\n      survey_arr.push @toJSON2()\n\n    toJSON2: ->\n      outObj = {}\n      for [key, val] in @attributesArray()\n        if key is 'type' and val.get('typeId') in ['select_one', 'select_multiple']\n          outObj['type'] = val.get('typeId')\n          outObj['select_from_list_name'] = val.get('listName')\n          continue\n        else\n          result = @getValue(key)\n        unless @hidden\n          if _.isBoolean(result)\n            outObj[key] = $configs.boolOutputs[if result then \"true\" else \"false\"]\n          else if '' isnt result\n            outObj[key] = result\n      outObj\n\n    toJSON: ->\n      outObj = {}\n      for [key, val] in @attributesArray()\n        result = @getValue(key)\n        unless @hidden\n          if _.isBoolean(result)\n            outObj[key] = $configs.boolOutputs[if result then \"true\" else \"false\"]\n          else\n            outObj[key] = result\n      outObj\n\n  class SimpleRow extends Backbone.Model\n    finalize: -> ``\n    simpleEnsureKuid: ->\n      if '$kuid' not of @attributes\n        @set('$kuid', $utils.txtid())\n    getTypeId: -> @get('type')\n    linkUp: ->\n    _isSelectQuestion: ()-> false\n    get_type: ->\n      $skipLogicHelpers.question_types[@getTypeId()] || $skipLogicHelpers.question_types['default']\n    getValue: (which)-> @get(which)\n\n  class RankRow extends SimpleRow\n    initialize: ->\n      @simpleEnsureKuid()\n      @set('type', 'rank__level')\n    export_relevant_values: (surv, sheets)->\n      surv.push @attributes\n\n  class ScoreRankMixin\n    _extendAll: (rr)->\n      extend_to_row = (val, key)=>\n        if _.isFunction(val)\n          rr[key] = (args...)->\n            val.apply(rr, args)\n        else\n          rr[key] = val\n      _.each @, extend_to_row\n      extend_to_row(@forEachRow, 'forEachRow')\n      _begin_kuid = rr.getValue('$kuid', false)\n      _end_json = @end_json({\"$kuid\": \"/#{_begin_kuid}\"})\n\n      rr._afterIterator = (cb, ctxt)->\n        obj =\n          export_relevant_values: (surv, addl)->\n            surv.push _.extend({}, _end_json)\n          toJSON: ->\n            _.extend({}, _end_json)\n\n        cb(obj)  if ctxt.includeGroupEnds\n\n      _toJSON = rr.toJSON\n\n      rr.clone = ()->\n        attributes = rr.toJSON2()\n\n        options =\n          _parent: rr._parent\n          add: false\n          merge: false\n          remove: false\n          silent: true\n\n        r2 = new row.Row(attributes, options)\n        r2._isCloned = true\n\n        if rr._rankRows\n          # if rr is a rank question\n          for rankRow in rr._rankRows.models\n            r2._rankRows.add(rankRow.toJSON())\n          r2._rankLevels = rr.getSurvey().choices.add(name: $utils.txtid())\n          for item in rr.getList().options.models\n            r2._rankLevels.options.add(item.toJSON())\n          r2.set('kobo--rank-items', r2._rankLevels.get('name'))\n          @convertAttributesToRowDetails()\n          r2.get('type').set('list', r2._rankLevels)\n        else\n          # if rr is a score question\n          for scoreRow in rr._scoreRows.models\n            r2._scoreRows.add(scoreRow.toJSON())\n          r2._scoreChoices = rr.getSurvey().choices.add(name: $utils.txtid())\n          for item in rr.getList().options.models\n            r2._scoreChoices.options.add(item.toJSON())\n          r2.set('kobo--score-choices', r2._scoreChoices.get('name'))\n          @convertAttributesToRowDetails()\n          r2.get('type').set('list', r2._scoreChoices)\n        r2\n\n      rr.toJSON = ()->\n        _.extend _toJSON.call(rr), {\n          'type': \"begin_#{rr._beginEndKey()}\"\n        }, @_additionalJson?()\n\n      _.each @constructor.prototype, extend_to_row\n      if rr.attributes.__rows\n        for subrow in rr.attributes.__rows\n          @[@_rowAttributeName].add(subrow)\n        delete rr.attributes.__rows\n\n    getValue: (which)->\n      @get(which)\n\n    end_json: (mrg={})->\n      _.extend({type: \"end_#{@_beginEndKey()}\"}, mrg)\n\n    forEachRow: (cb, ctx)->\n      cb(@)\n      @[@_rowAttributeName].each (subrow)-> cb(subrow)\n      @_afterIterator(cb, ctx)  if '_afterIterator' of @\n\n\n  class RankRows extends Backbone.Collection\n    model: RankRow\n\n  class RankMixin extends ScoreRankMixin\n    constructor: (rr)->\n      @_rankRows = new RankRows()\n      @_rowAttributeName = '_rankRows'\n      @_extendAll(rr)\n      rankConstraintMessageKey = 'kobo--rank-constraint-message'\n      if !rr.get(rankConstraintMessageKey)\n        rr.set(rankConstraintMessageKey, _t(\"Items cannot be selected more than once\"))\n\n    _beginEndKey: ->\n      'rank'\n\n    linkUp: (ctx)->\n      rank_list_id = @get('kobo--rank-items')?.get('value')\n      if rank_list_id\n        @_rankLevels = @getSurvey().choices.get(rank_list_id)\n      else\n        @_rankLevels = @getSurvey().choices.create()\n      @_additionalJson = =>\n        'kobo--rank-items': @getList().get('name')\n      @getList = => @_rankLevels\n\n    export_relevant_values: (survey_arr, additionalSheets)->\n      if @_rankLevels\n        additionalSheets['choices'].add(@_rankLevels)\n      begin_xlsformrow = _.clone(@toJSON2())\n      begin_xlsformrow.type = \"begin_rank\"\n      begin_xlsformrow['kobo--rank-items'] = @getList().get('name')\n      survey_arr.push(begin_xlsformrow)\n      ``\n\n  class ScoreChoiceList extends Array\n\n  class ScoreRow extends SimpleRow\n    initialize: ->\n      @set('type', 'score__row')\n      @simpleEnsureKuid()\n    export_relevant_values: (surv, sheets)->\n      surv.push(@attributes)\n\n  class ScoreRows extends Backbone.Collection\n    model: ScoreRow\n\n  class ScoreMixin extends ScoreRankMixin\n    constructor: (rr)->\n      @_scoreRows = new ScoreRows()\n      @_rowAttributeName = '_scoreRows'\n      @_extendAll(rr)\n\n    _beginEndKey: ->\n      'score'\n\n    linkUp: (ctx)->\n      @getList = ()=> @_scoreChoices\n      @_additionalJson = ()=>\n        'kobo--score-choices': @getList().get('name')\n      score_list_id_item = @get('kobo--score-choices')\n      if score_list_id_item\n        score_list_id = score_list_id_item.get('value')\n        if score_list_id\n          @_scoreChoices = @getSurvey().choices.get(score_list_id)\n        else\n          ctx.warnings.push \"Score choices list not found\"\n          @_scoreChoices = @getSurvey().choices.add({})\n      else\n        ctx.warnings.push \"Score choices list not set\"\n        @_scoreChoices = @getSurvey().choices.add(name: $utils.txtid())\n      ``\n\n    export_relevant_values: (survey_arr, additionalSheets)->\n      score_list = @_scoreChoices\n      if score_list\n        additionalSheets['choices'].add(score_list)\n      output = _.clone(@toJSON2())\n      output.type = \"begin_score\"\n      output['kobo--score-choices'] = @getList().get('name')\n      survey_arr.push(output)\n      ``\n\n  class row.Row extends row.BaseRow\n    @kls = \"Row\"\n    initialize: ->\n      ###\n      The best way to understand the @details collection is\n      that it is a list of cells of the XLSForm spreadsheet.\n      The column name is the \"key\" and the value is the \"value\".\n      We opted for a collection (rather than just saving in the attributes of\n      this model) because of the various state-related attributes\n      that need to be saved for each cell and this allows more room to grow.\n\n      E.g.: {\"key\": \"type\", \"value\": \"select_one colors\"}\n            needs to keep track of how the value was built\n      ###\n      if @_parent\n        defaultsUnlessDefined = @_parent.newRowDetails || $configs.newRowDetails\n        defaultsForType = @_parent.defaultsForType || $configs.defaultsForType\n      else\n        console?.error \"Row not linked to parent survey.\"\n        defaultsUnlessDefined = $configs.newRowDetails\n        defaultsForType = $configs.defaultsForType\n\n      if @attributes.type and @attributes.type of defaultsForType\n        curTypeDefaults = defaultsForType[@attributes.type]\n      else\n        curTypeDefaults = {}\n\n      defaults = _.extend {}, defaultsUnlessDefined, curTypeDefaults\n\n      for key, vals of defaults\n        unless key of @attributes\n          newVals = {}\n          for vk, vv of vals\n            newVals[vk] = if (\"function\" is typeof vv) then vv() else vv\n          @set key, newVals\n\n      if '$kuid' not of @attributes\n        @set '$kuid', $utils.txtid()\n\n      _type = @getValue('type')\n\n      if _type is 'score'\n        new ScoreMixin(@)\n      else if _type is 'rank'\n        new RankMixin(@)\n      @convertAttributesToRowDetails()\n\n      typeDetail = @get(\"type\")\n      tpVal = typeDetail.get(\"value\")\n      select_from_list_name = @get(\"select_from_list_name\")\n      if select_from_list_name and tpVal\n        tpVal = \"#{tpVal} #{select_from_list_name.get('value')}\"\n        typeDetail.set(\"value\", tpVal, silent: true)\n\n      processType = (rd, newType, ctxt)=>\n        # if value changes, it could be set from an initialization value\n        # or it could be changed elsewhere.\n        # we need to keep typeId, listName, and orOther in sync.\n        if _.isObject(newType)\n          tpid = _.keys(newType)[0]\n          p2 = _.values(newType)[0]\n        else\n          [tpid, p2, p3] = newType.split(\" \")\n\n        typeDetail.set(\"typeId\", tpid, silent: true)\n        if p2\n          typeDetail.set(\"listName\", p2, silent: true)\n          matchedList = @getSurvey().choices.get(p2)\n          if matchedList\n            typeDetail.set(\"list\", matchedList)\n        if p3 is \"or_other\" or tpid in [\"select_one_or_other\", \"select_multiple_or_other\"]\n          typeDetail.set(\"orOther\", p3, silent: true)\n        if (rtp = $configs.lookupRowType(tpid))\n          typeDetail.set(\"rowType\", rtp, silent: true)\n        else\n          throw new Error \"type `#{tpid}` not found\"\n      processType(typeDetail, tpVal, {})\n      typeDetail.on \"change:value\", processType\n      typeDetail.on \"change:listName\", (rd, listName, ctx)->\n        rtp = typeDetail.get(\"rowType\")\n        typeStr = \"#{typeDetail.get(\"typeId\")}\"\n        if rtp.specifyChoice and listName\n          typeStr += \" #{listName}\"\n        if rtp.orOtherOption and typeDetail.get(\"orOther\")\n          typeStr += \" or_other\"\n        typeDetail.set({value: typeStr}, silent: true)\n      typeDetail.on \"change:list\", (rd, cl, ctx)->\n        if typeDetail.get(\"rowType\").specifyChoice\n          clname = cl.get(\"name\")\n          unless clname\n            clname = $utils.txtid()\n            cl.set(\"name\", clname, silent: true)\n          @set(\"value\", \"#{@get('typeId')} #{clname}\")\n    getTypeId: ->\n      @get('type').get('typeId')\n    clone: ->\n      attributes = {}\n      options =\n        _parent: @_parent\n        add: false\n        merge: false\n        remove: false\n        silent: true\n\n\n      _.each @attributes, (value, key) => attributes[key] = @getValue key\n\n      newRow = new row.Row attributes, options\n\n      newRowType = newRow.get('type')\n      if newRowType.get('typeId') in ['select_one', 'select_multiple']\n        newRowType.set 'list', @getList().clone()\n        newRowType.set 'listName', newRowType.get('list').get 'name'\n\n      @getSurvey().trigger('change')\n\n      return newRow\n\n    finalize: ->\n      existing_name = @getValue(\"name\")\n      unless existing_name\n        names = []\n        @getSurvey().forEachRow (r)->\n          name = r.getValue(\"name\")\n          names.push(name)  if name\n        label = @getValue(\"label\")\n        @get(\"name\").set(\"value\", $utils.sluggifyLabel(label, names))\n      @\n\n    get_type: ->\n      $skipLogicHelpers.question_types[@getTypeId()] || $skipLogicHelpers.question_types['default']\n\n    _isSelectQuestion: ->\n      # TODO [ald]: pull this from $aliases\n      @get('type').get('typeId') in ['select_one', 'select_multiple']\n\n    getAcceptedFiles: -> return @attributes['body::accept']?.attributes?.value\n\n    setAcceptedFiles: (bodyAcceptString) ->\n      @setDetail('body::accept', bodyAcceptString)\n      return\n\n    getParameters: -> readParameters(@attributes.parameters?.attributes?.value)\n\n    setParameters: (paramObject) ->\n      paramString = writeParameters(paramObject)\n      @setDetail('parameters', paramString)\n      return\n\n    getList: ->\n      _list = @get('type')?.get('list')\n      if (not _list) and @_isSelectQuestion()\n        _list = new $choices.ChoiceList(name: $utils.txtid())\n        @setList(_list)\n      _list\n\n    setList: (list)->\n      listToSet = @getSurvey().choices.get(list)\n      unless listToSet\n        @getSurvey().choices.add(list)\n        listToSet = @getSurvey().choices.get(list)\n      throw new Error(\"List not found: #{list}\")  unless listToSet\n      @get(\"type\").set(\"list\", listToSet)\n    parse: ->\n      val.parse()  for key, val of @attributes\n\n    linkUp: (ctx)->\n      val.linkUp(ctx)  for key, val of @attributes\n\n  class row.RowError extends row.BaseRow\n    constructor: (obj, options)->\n      @_error = options.error\n      unless window.xlfHideWarnings\n        console?.error(\"Error creating row: [#{options.error}]\", obj)\n        alertify.error(\"Error creating row: [#{options.error}]\");\n      super(obj, options)\n    isError: -> true\n    getValue: (what)->\n      if what of @attributes\n        @attributes[what].get('value')\n      else\n        \"[error]\"\n\n  row\n","$factory = require('./model.validationLogicParserFactory')\n\n### debug method for regexes\nerr_if_unmatch = (re1, re2)->\n  if re1 and re2 and re1.toString() isnt re2.toString()\n    console.error ['inputs did not match', re1.toString(), re2.toString()].join '\\n'\nlog_equiv = (i1, i2, i3)->\n  console.log([i1.toString()])\n  err_if_unmatch(i1, i2) or err_if_unmatch(i2, i3)\n  i1\n###\n\nmodule.exports = do ->\n  equalityCriterionPattern = ///\n      ^\\${(\\w+)}\\s*                      # question reference in the format of ${name}\n      (!=|<=|>=|=|<|>)\\s*                # operator (careful: if < is listed before <=, the = will be treated as part of the value)\n      (                                  # start of the value group\n        (?:                              #   start of a non-matching group\n          date\\(\\'\\d{4}-\\d{2}-\\d{2}\\'\\)) #     something resembling a date: date('xxxx-xx-xx')\n        |                                #   or\n          (?:-?(?:\\d+\\.\\d+|\\.\\d+|\\d+.?)) #     a signed integer or decimal\n        |                                #   or\n          (?:\\'[^']+\\')                  #     a string surrounded by single quotes (careful: the quotes are included in the match!)\n      )                                  # end of the value group\n    ///\n\n  # /\\${(\\w+)}\\s*((?:=|!=)\\s*(?:NULL|''))/i\n  existenceCriterionPattern = ///\n      \\${\n        (\\w+)\n      }\\s*\n      (\n        (?:=|!=)\n        \\s*\n        (?:NULL|'')\n      )\n    ///i\n\n  # / and | or /gi\n  criteriaJoinPattern =\n    ///#{' and '}|#{' or '}///gi\n\n  # /selected\\(\\$\\{(\\w+)\\},\\s*\\'(\\w+)\\'\\)/\n  selectMultiplePattern = ///\n      selected\\(\\$\\{\n      (\\w+)\n      \\},\n      \\s*\n      \\'\n      (\\w+)\n      \\'\n      \\)\n    ///\n\n  $factory(equalityCriterionPattern,\n            existenceCriterionPattern,\n            criteriaJoinPattern,\n            selectMultiplePattern)\n","var _ = require('underscore');\n\nmodule.exports = (function(){\n    return function (equalityCriterionPattern, existenceCriterionPattern, criteriaJoinPattern, selectMultiplePattern) {\n        function parseCriterion(text) {\n            var matches = text.match(existenceCriterionPattern);\n            if (matches === null) {\n                matches = text.match(equalityCriterionPattern);\n            }\n\n            if (!!matches) {\n                matches[2] = matches[2].replace(/\\s+/, '').replace(/null/i, 'NULL');\n            } else {\n                return parseMultiselectCriterion(text);\n            }\n\n            var equalityMapper = {\n                '=': 'resp_equals',\n                '!=': 'resp_notequals',\n                '>': 'resp_greater',\n                '<': 'resp_less',\n                '>=': 'resp_greaterequals',\n                '<=': 'resp_lessequals',\n                '!=\\'\\'': 'ans_notnull',\n                '=\\'\\'': 'ans_null'\n            };\n\n            var res = {\n                name: matches[1],\n                operator: equalityMapper[matches[2]]\n            };\n\n            if (matches[3]) {\n                // strip surrounding single quotes, if any\n                var response_value = matches[3].replace(/^'([^']*)'$/, '$1');\n                // extract xxxx-xx-xx from date('xxxx-xx-xx')\n                response_value = response_value.replace(/date\\('(\\d{4}-\\d{2}-\\d{2})'\\)/, '$1');\n                res.response_value = response_value;\n            }\n\n            return res;\n        }\n\n        function parseMultiselectCriterion(text) {\n            var matches = text.match(selectMultiplePattern);\n\n            if (!matches) {\n                throw new Error('criterion not recognized: \"' + text + '\"');\n            }\n\n            return {\n                name: matches[1],\n                operator: text.indexOf('not(') == -1 ? 'multiplechoice_selected' : 'multiplechoice_notselected',\n                response_value: matches[2]\n            };\n        }\n\n        return function (text) {\n            var criteria = text.split(criteriaJoinPattern),\n                criteriaLength = criteria.length,\n                joinOperators = text.match(criteriaJoinPattern);\n\n\n            if (!!joinOperators && _.uniq(joinOperators).length > 1) {\n                throw new Error('multiple criteria join operators are not supported at the moment');\n            }\n\n            if (criteriaLength === 1) {\n                return {\n                    criteria: [parseCriterion(text)]\n                };\n            } else {\n                return {\n                    criteria: _.map(criteria, function (criterion) {\n                        return parseCriterion(criterion);\n                    }),\n                    operator: joinOperators[0].replace(/ /g, '').toUpperCase()\n                };\n            }\n        };\n    }\n})();\n","$factory = require('./model.validationLogicParserFactory')\n\nmodule.exports = do ->\n  equalityCriterionPattern = ///\n      (\\.)\\s*                            # always a leading dot\n      (!=|<=|>=|=|<|>)\\s*                # operator (careful: if < is listed before <=, the = will be treated as part of the value)\n      (                                  # start of the value group\n        (?:                              #   start of a non-matching group\n          date\\(\\'\\d{4}-\\d{2}-\\d{2}\\'\\)) #     something resembling a date: date('xxxx-xx-xx')\n        |                                #   or\n          (?:-?(?:\\d+\\.\\d+|\\.\\d+|\\d+.?)) #     a signed integer or decimal\n        |                                #   or\n          (?:\\'[^']+\\')                  #     a string surrounded by single quotes (careful: the quotes are included in the match!)\n      )                                  # end of the value group\n    ///\n\n  # /(\\.)\\s*((?:=|!=)\\s*(?:NULL|''))/i\n  existenceCriterionPattern = ///\n      (\\.)\\s*\n      (\n        (?:=|!=)\n        \\s*\n        (?:NULL|'')\n      )\n    ///i\n\n  # / and | or /gi\n  criteriaJoinPattern =\n    ///#{' and '}|#{' or '}///gi\n\n  # /selected\\((\\.)\\s*,\\s*\\'(\\w+)\\'\\)/\n  selectMultiplePattern = ///\n      selected\\(\n        (\\.)\\s*\n        ,\\s*\\'\n        (\\w+)\\'\n      \\)\n    ///\n\n  $factory(equalityCriterionPattern,\n            existenceCriterionPattern,\n            criteriaJoinPattern,\n            selectMultiplePattern)\n","_ = require 'underscore'\nBackbone = require('backbone')\n\nmodule.exports = do ->\n  viewWidgets = {}\n\n  class viewWidgets.Base extends Backbone.View\n    attach_to: ($el) ->\n      if $el instanceof viewWidgets.Base\n        $el = $el.$el\n      $el.append(@el)\n\n    bind_event: (type, callback) ->\n      @$el.off type, callback\n      @$el.on type, callback\n    detach: () ->\n      @$el.remove()\n    val: (value) ->\n      if value\n        @$el.val value\n        if !@$el.val()?\n          @$el.prop('selectedIndex', 0)\n      else return @$el.val()\n\n  class viewWidgets.Label extends viewWidgets.Base\n    tagName: 'label'\n    constructor: (@text, @className, @input) ->\n      super()\n    val: () ->\n    bind_event: () ->\n    render: () ->\n      if @text\n        @$el.text(@text)\n      if @className\n        @$el.addClass @className\n      if @input\n        @$el.attr 'for', @input.cid\n      @\n\n  class viewWidgets.EmptyView extends viewWidgets.Base\n    attach_to: () -> return\n    val: () -> return\n    bind_event: () -> return\n    render: () -> @\n    val: () -> null\n\n  class viewWidgets.TextArea extends viewWidgets.Base\n    tagName: 'textarea'\n    render: () ->\n      @$el.val @text\n      @$el.addClass @className\n      @$el.on 'paste', (e) -> e.stopPropagation()\n\n      @\n    constructor: (@text, @className) -> super()\n\n  class viewWidgets.TextBox extends viewWidgets.Base\n    tagName: 'input'\n    render: () ->\n      @$el.attr 'type', 'text'\n      @$el.val @text\n      @$el.addClass @className\n      @$el.attr 'placeholder', @placeholder\n      @$el.on 'paste', (e) -> e.stopPropagation()\n\n      @\n    constructor: (@text, @className, @placeholder) -> super()\n\n  class viewWidgets.Button extends viewWidgets.Base\n    tagName: 'button'\n    render: () ->\n      @$el.html @text\n      @$el.addClass @className\n\n      @\n    constructor: (@text, @className) -> super()\n\n  class viewWidgets.DropDownModel extends Backbone.Model\n\n  class viewWidgets.DropDown extends viewWidgets.Base\n    tagName: 'select'\n    constructor: (@options) ->\n      super\n      _options = @options\n      if !(@options instanceof viewWidgets.DropDownModel)\n        @options = new viewWidgets.DropDownModel()\n        @options.set 'options', _options\n      @options.on 'change:options', @render.bind(@)\n    render: () =>\n      options_html = ''\n      _.each @options.get('options'), (option) ->\n        options_html += '<option value=\"' + option.value + '\">' + option.text + '</option>'\n\n      @$el.html options_html\n      @\n\n    attach_to: (target) ->\n      super(target)\n      @$el.select2({ minimumResultsForSearch: -1 })\n\n  viewWidgets\n","###\n# [inputDeserializer]\n#  wrapper around methods for converting raw input into survey structure\n# ______________________________________________________________________\n###\n\n_ = require 'underscore'\ncsv = require './csv'\n$aliases = require './model.aliases'\n\nmodule.exports = do ->\n  inputDeserializer = (inp, ctx={})->\n    r = deserialize inp, ctx\n    if not ctx.error and ctx.validate\n      validateParse(r, ctx)\n    r\n\n  # [inputDeserializer.deserialize] parses csv string, json string,\n  #  or object into survey object\n  # -------------------------------\n  deserialize = do ->\n    _csv_to_params = (csv_repr)->\n      cobj = csv.sheeted(csv_repr)\n      out = {}\n\n      out.survey = if (sht = cobj.sheet \"survey\") then sht.toObjects() else []\n      out.choices = if (sht = cobj.sheet \"choices\") then sht.toObjects() else []\n      if (sht = cobj.sheet \"settings\")\n        out.settings = sht.toObjects()[0]\n\n      out\n\n    _parse_sheets = (repr)->\n      # If a sheet has a first-row which is an array, that array will be treated as column\n      # headers and any subsequent array-rows will be matched up\n\n      for shtName, sheet of repr\n        if _.isArray(sheet) and sheet.length > 0 and _.isArray(sheet[0])\n          out_sheet = []\n          [cols, contents...] = sheet\n          for row in contents\n            if _.isArray(row)\n              new_row = {}\n              for col, i in cols\n                if i < row.length and row[i] not in [undefined, null]\n                  new_row[col] = row[i]\n              out_sheet.push(new_row)\n            else\n              out_sheet.push(row)\n          repr[shtName] = out_sheet\n      repr\n\n    # returns: function\n    (repr, ctx={})->\n      if _.isString(repr)\n        _csv_to_params repr\n      else if _.isObject repr\n        _parse_sheets repr\n      else\n        ``\n\n  # [inputDeserializer.validateParse]\n  #  ensure correct sheet names exist in imported surveys\n  # ---------------------------------\n  validateParse = do ->\n    requiredSheetNameList = $aliases.q.requiredSheetNameList()\n\n    # returns: function\n    (repr, ctx={})->\n      valid_with_sheet = false\n      for sheetId in requiredSheetNameList\n        if repr[sheetId]\n          ctx.surveyType = sheetId\n          valid_with_sheet = true\n      ctx.settings = true  if repr['settings']\n      ctx.choices = true  if repr['choices']\n      unless valid_with_sheet\n        sn = requiredSheetNameList.join(', ')\n        ctx.error = \"Missing a survey sheet [#{sn}]\"\n      !ctx.error\n\n  inputDeserializer.validateParse = validateParse\n  inputDeserializer.deserialize = deserialize\n  inputDeserializer\n","_ = require 'underscore'\ncloneDeep = require('lodash.clonedeep')\n$aliases = require './model.aliases'\n$configs = require './model.configs'\nutils = require '../../js/utils'\n\nmodule.exports = do ->\n  inputParser = {}\n\n  class ParsedStruct\n    constructor: (@type, @atts={})->\n      @contents = []\n    push: (item)->\n      @contents.push(item)\n      ``\n    export: ->\n      arr = []\n      for item in @contents\n        if item instanceof ParsedStruct\n          item = item.export()\n        arr.push(item)\n      _.extend({}, @atts, {type: @type, __rows: arr})\n\n  hasBeenParsed = (obj)->\n    for row in obj\n      if row.__rows\n        return true\n      else if $aliases.q.testGroupable(row.type)\n        return false\n    return true\n  inputParser.hasBeenParsed = hasBeenParsed\n\n  flatten_translated_fields = (item, translations)->\n    for key, val of item\n      if _.isArray(val) and key != 'tags'\n        delete item[key]\n        _.map(translations, (_t, i)->\n          _translated_val = val[i]\n          if _t\n            lang_str = \"#{key}::#{_t}\"\n          else\n            lang_str = key\n          item[lang_str] = _translated_val\n        )\n    return item\n\n  parseArr = (type='survey', sArr, translations=false)->\n    counts = {\n      open: {}\n      close: {}\n    }\n    count_att = (opn_cls, att)->\n      counts[opn_cls][att]?=0\n      counts[opn_cls][att]++\n      ``\n    grpStack = [new ParsedStruct(type)]\n\n    _pushGrp = (type='group', item)->\n      count_att('open', type)\n      grp = new ParsedStruct(type, item)\n      _curGrp().push(grp)\n      grpStack.push(grp)\n\n    _popGrp = (closedByAtts, type)->\n      count_att('close', type)\n      _grp = grpStack.pop()\n      if _grp.type isnt closedByAtts.type\n        throw new Error(\"mismatched group/repeat tags\")\n      ``\n\n    _curGrp = ->\n      _l = grpStack.length\n      if _l is 0\n        throw new Error(\"unmatched group/repeat\")\n      grpStack[_l-1]\n\n    for item in sArr\n      _groupAtts = $aliases.q.testGroupable(item.type)\n\n      if translations and translations.length > 0\n        item = flatten_translated_fields(item, translations)\n\n      if _groupAtts\n        if _groupAtts.begin\n          _pushGrp(_groupAtts.type, item)\n        else\n          _popGrp(_groupAtts, item.type)\n      else\n        _curGrp().push(item)\n\n    if grpStack.length isnt 1\n      throw new Error(JSON.stringify({\n          message: \"unclosed groupable set\",\n          counts: counts\n        }))\n\n    _curGrp().export().__rows\n\n  # normalizes required value - truthy values become `true` and falsy values become `false`\n  normalizeRequiredValues = (survey) ->\n    normalizedSurvey = cloneDeep(survey)\n    for row in normalizedSurvey\n      if row.required in $configs.truthyValues\n        row.required = true\n      else if row.required in $configs.falsyValues or row.required in [undefined, '']\n        row.required = false\n    return normalizedSurvey\n\n  inputParser.parseArr = parseArr\n\n  # pass baseSurvey whenever you import other asset into existing form\n  inputParser.parse = (o, baseSurvey)->\n    translations = o.translations\n\n    nullified = utils.nullifyTranslations(o.translations, o.translated, o.survey, baseSurvey)\n\n    # we edit the received object directly, which seems like BAD CODE™\n    # but in fact is required for the languages to work properly\n    o.survey = nullified.survey;\n    o.translations = nullified.translations\n    o.translations_0 = nullified.translations_0\n\n    if o.survey\n      o.survey = normalizeRequiredValues(o.survey)\n\n    # sorts groups and repeats into groups and repeats (recreates the structure)\n    if o.survey\n      o.survey = parseArr('survey', o.survey, o.translations)\n\n    if o.choices\n      o.choices = parseArr('choices', o.choices, o.translations)\n\n    # settings is sometimes packaged as an array length=1\n    if o.settings and _.isArray(o.settings) and o.settings.length is 1\n      o.settings = o.settings[0]\n\n    return o\n\n  inputParser.loadChoiceLists = (passedChoices, choices)->\n    tmp = {}\n    choiceNames = []\n    for choiceRow in passedChoices\n      lName = choiceRow[\"list name\"] || choiceRow[\"list_name\"]\n      unless tmp[lName]\n        tmp[lName] = []\n        choiceNames.push(lName)\n      tmp[lName].push(choiceRow)\n    for cn in choiceNames\n      choices.add(name: cn, options: tmp[cn])\n\n  # groupByVisibility = (inp, hidden=[], remain=[])->\n  #   hiddenTypes = $aliases.q.hiddenTypes()\n  #   throw Error(\"inputParser.sortByVisibility requires an array\")  unless _.isArray(inp)\n  #   for row in inp\n  #     dest = if row.type? in hiddenTypes then hidden else remain\n  #   [hidden, inp]\n\n  # inputParser.sortByVisibility = sortByVisibility\n  inputParser\n","import Reflux from 'reflux';\nimport {actions} from 'js/actions';\nimport {\n  t,\n  notify,\n  assign\n} from 'js/utils';\n\n// TODO instead of this use `stateChanges` function from '/js/utils'\n// after https://github.com/kobotoolbox/kpi/pull/1959 is merged\nfunction stateChanges(orig_obj, new_obj) {\n  var out = {},\n      any = false;\n  Object.keys(new_obj).forEach(function(key) {\n    if (orig_obj[key] !== new_obj[key]) {\n      out[key] = new_obj[key];\n      any = true;\n    }\n  });\n  if (!any) {\n    return false;\n  }\n  return out;\n}\n\n/**\n * @typedef {Object} PermDefinition - A permission object from backend.\n * @property {string} url - Url of given permission type.\n * @property {string} name\n * @property {string} description\n * @property {string} codename\n * @property {string[]} implied - A list of implied permissions.\n * @property {string[]} contradictory - A list of contradictory permissions.\n */\n\n/**\n * NOTE: this relies on the app being initialized by calling\n * `actions.permissions.getConfig()`, otherwise expect `verifyReady` to throw\n */\nconst permConfig = Reflux.createStore({\n  init() {\n    this.state = {\n      permissions: []\n    };\n    this.listenTo(actions.permissions.getConfig.completed, this.onGetConfigCompleted);\n    this.listenTo(actions.permissions.getConfig.failed, this.onGetConfigFailed);\n  },\n\n  setState (change) {\n    const changed = stateChanges(this.state, change);\n    if (changed) {\n      assign(this.state, changed);\n      this.trigger(changed);\n    }\n  },\n\n  onGetConfigCompleted(response) {\n    this.setState({permissions: response.results});\n  },\n\n  onGetConfigFailed() {\n    notify('Failed to get permissions config!', 'error');\n  },\n\n  /**\n   * @param {string} permCodename\n   * @returns {PermDefinition}\n   */\n  getPermissionByCodename(permCodename) {\n    this.verifyReady();\n    const foundPerm = this.state.permissions.find((permission) => {\n      return permission.codename === permCodename;\n    });\n    return foundPerm;\n  },\n\n  /**\n   * @param {string} permUrl\n   * @returns {PermDefinition}\n   */\n  getPermission(permUrl) {\n    this.verifyReady();\n    const foundPerm = this.state.permissions.find((permission) => {\n      return permission.url === permUrl;\n    });\n    return foundPerm;\n  },\n\n  /**\n   * Throws if trying to use permConfig before it fetches data from BE.\n   */\n  verifyReady() {\n    if (this.state.permissions.length === 0) {\n      throw new Error(t('Permission config is not ready or failed to initialize!'));\n    }\n  }\n});\n\nexport default permConfig;\n","_ = require 'underscore'\n$skipLogicParser = require './model.skipLogicParser'\n$validationLogicParser = require './model.validationLogicParser'\n\nmodule.exports = do ->\n\n  utils =\n    skipLogicParser: $skipLogicParser\n    validationLogicParser: $validationLogicParser\n\n  _trim = (str)->\n    str.replace(/^[\\s\\t\\uFEFF\\xA0]+|[\\s\\t\\uFEFF\\xA0]+$/g, '')\n\n  utils.split_paste = (str)->\n    out = []\n    for row in str.split('\\n')\n      trimmed = _trim(row)\n      unless trimmed.match(/^\\s*$/)\n        out.push(trimmed.split(/\\t/))\n    out_out = []\n    for row in out[1..]\n      orow = []\n      for n in [0...row.length]\n        key = out[0][n]\n        val = row[n]\n        if val.length > 0\n          orow.push([key, val])\n      out_out.push(_.object(orow))\n    out_out\n\n  utils.txtid = ()->\n    # a is text\n    # b is numeric or text\n    # c is mishmash\n    o = 'AAnCAnn'.replace /[AaCn]/g, (c)->\n      randChar= ()->\n        charI = Math.floor(Math.random()*52)\n        charI += (if charI <= 25 then 65 else 71)\n        String.fromCharCode charI\n\n      r = Math.random()\n      if c is 'a'\n        randChar()\n      else if c is 'A'\n        String.fromCharCode 65+(r*26|0)\n      else if c is 'C'\n        newI = Math.floor(r*62)\n        if newI > 52 then (newI - 52) else randChar()\n      else if c is 'n'\n        Math.floor(r*10)\n    o.toLowerCase()\n\n  utils.parseHelper =\n    parseSkipLogic: (collection, value, parent_row) ->\n      collection.meta.set(\"rawValue\", value)\n      try\n        parsedValues = $skipLogicParser(value)\n        collection.reset()\n        collection.parseable = true\n        for crit in parsedValues.criteria\n          opts = {\n            name: crit.name\n            expressionCode: crit.operator\n          }\n          if crit.operator is \"multiplechoice_selected\"\n            opts.criterionOption = collection.getSurvey().findRowByName(crit.name).getList().options.get(crit.response_value)\n          else\n            opts.criterion = crit.response_value\n          collection.add(opts, silent: true, _parent: parent_row)\n        if parsedValues.operator\n          collection.meta.set(\"delimSelect\", parsedValues.operator.toLowerCase())\n        ``\n      catch e\n        collection.parseable = false\n\n  utils.sluggifyLabel = (str, other_names=[])->\n    utils.sluggify(str, {\n        preventDuplicates: other_names\n        lowerCase: false\n        preventDuplicateUnderscores: true\n        stripSpaces: true\n        lrstrip: true\n        incrementorPadding: 3\n        validXmlTag: true\n      })\n\n  utils.isValidXmlTag = (str)->\n    str.search(/^[a-zA-Z_:]([a-zA-Z0-9_:.])*$/) is 0\n\n  utils.sluggify = (str, opts={})->\n    if str == ''\n      return ''\n    # Convert text to a friendly format. Rules are passed as options\n    opts = _.defaults(opts, {\n        # l/r strip: strip spaces from begin/end of string\n        lrstrip: false\n        lstrip: false\n        rstrip: false\n        # descriptor: used in error messages\n        descriptor: \"slug\"\n        lowerCase: true\n        replaceNonWordCharacters: true\n        nonWordCharsExceptions: false\n        preventDuplicateUnderscores: false\n        validXmlTag: false\n        underscores: true\n        characterLimit: 30\n        # preventDuplicates: an array with a list of values that should be avoided\n        preventDuplicates: false\n        incrementorPadding: false\n      })\n\n    if opts.lrstrip\n      opts.lstrip = true\n      opts.rstrip = true\n\n    if opts.lstrip\n      str = str.replace(/^\\s+/, \"\")\n\n    if opts.rstrip\n      str = str.replace(/\\s+$/, \"\")\n\n    if opts.lowerCase\n      str = str.toLowerCase()\n\n    if opts.underscores\n      str = str.replace(/\\s/g, \"_\").replace(/[_]+/g, \"_\")\n\n    if opts.replaceNonWordCharacters\n      if opts.nonWordCharsExceptions\n        regex = ///\\W^[#{opts.nonWordCharsExceptions}]///g\n      else\n        regex = /\\W+/g\n      str = str.replace(regex, '_')\n      # possibly a bit specific, but removes an underscore from the end\n      # of the string\n      if str.match(/._$/)\n        str = str.replace(/_$/, '')\n\n    if _.isNumber opts.characterLimit\n      str = str.slice(0, opts.characterLimit)\n\n    if opts.validXmlTag\n      if str[0].match(/^\\d/)\n        str = \"_\" + str\n\n    if opts.preventDuplicateUnderscores\n      while str.search(/__/) isnt -1\n        str = str.replace(/__/, '_')\n\n    if _.isArray(opts.preventDuplicates)\n      str = do ->\n        names_lc = (name.toLowerCase()  for name in opts.preventDuplicates when name)\n        attempt_base = str\n\n        if attempt_base.length is 0\n          throw new Error(\"Renaming Error: #{opts.descriptor} is empty\")\n\n        attempt = attempt_base\n        increment = 0\n        while attempt.toLowerCase() in names_lc\n          increment++\n          increment_str = \"#{increment}\"\n          if opts.incrementorPadding and increment < Math.pow(10, opts.incrementorPadding)\n            increment_str = (\"000000000000\" + increment).slice(-1 * opts.incrementorPadding)\n          attempt = \"#{attempt_base}_#{increment_str}\"\n        attempt\n\n    str\n\n  utils\n","###\ndkobo_xlform.model[...]\n###\n\n_ = require 'underscore'\n$survey = require './model.survey'\n$utils = require './model.utils'\n$row = require './model.row'\n$rowDetailsSkipLogic = require './model.rowDetails.skipLogic'\n$configs = require './model.configs'\n\nmodule.exports = do ->\n\n  model = {}\n\n  _.extend(model, $survey, $row)\n\n  model._keys = _.keys(model)\n  model.rowDetailsSkipLogic = $rowDetailsSkipLogic\n  model.utils = $utils\n  model.configs = $configs\n\n  model\n","import permConfig from './permConfig';\nimport {\n  ANON_USERNAME,\n  PERMISSIONS_CODENAMES\n} from 'js/constants';\nimport {\n  buildUserUrl,\n  getUsernameFromUrl\n} from 'js/utils';\n\n/**\n * @typedef {Object} BackendPerm\n * @property {string} user - User url.\n * @property {string} permission - Permission url.\n */\n\n/**\n * @typedef {Object} FormData  - Object containing data from the UserAssetPermsEditor form.\n * @property {string} data.username - Who give permissions to.\n * @property {boolean} data.formView - Is able to view forms.\n * @property {boolean} data.formEdit - Is able to edit forms.\n * @property {boolean} data.submissionsView - Is able to view submissions.\n * @property {boolean} data.submissionsViewPartial - If true, then able to view submissions only of some users.\n * @property {string[]} data.submissionsViewPartialUsers - Users mentioned in the above line.\n * @property {boolean} data.submissionsAdd - Is able to add submissions.\n * @property {boolean} data.submissionsEdit - Is able to edit submissions.\n * @property {boolean} data.submissionsValidate - Is able to validate submissions.\n */\n\n/**\n * @typedef {Object} UserPerm\n * @property {string} url - Url of given permission instance (permission x user).\n * @property {string} permission - Url of given permission type.\n */\n\n/**\n * @typedef {Object} UserWithPerms\n * @property {Object} user\n * @property {string} user.url - User url (identifier).\n * @property {string} user.name - User name.\n * @property {boolean} user.isOwner - Marks user that owns an asset that the permissions are for.\n * @property {UserPerm[]} permissions - A list of permissions for that user.\n */\n\n/**\n * Builds an object understandable by Backend endpoints from form data.\n * Removes contradictory and implied permissions from final output.\n *\n * @param {FormData} data\n * @returns {BackendPerm[]} - An array of permissions to be given.\n */\nfunction parseFormData(data) {\n  let parsed = [];\n\n  if (data.formView) {\n    parsed.push(buildBackendPerm(data.username, PERMISSIONS_CODENAMES.get('view_asset')));\n  }\n\n  if (data.formEdit) {\n    parsed.push(buildBackendPerm(data.username, PERMISSIONS_CODENAMES.get('change_asset')));\n  }\n\n  if (data.submissionsViewPartial) {\n    let permObj = buildBackendPerm(data.username, PERMISSIONS_CODENAMES.get('partial_submissions'));\n    permObj.partial_permissions = [{\n      url: permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.get('view_submissions')).url,\n      filters: [{'_submitted_by': {'$in': data.submissionsViewPartialUsers}}]\n    }];\n    parsed.push(permObj);\n  } else if (data.submissionsView) {\n    parsed.push(buildBackendPerm(data.username, PERMISSIONS_CODENAMES.get('view_submissions')));\n  }\n\n  if (data.submissionsAdd) {\n    parsed.push(buildBackendPerm(data.username, PERMISSIONS_CODENAMES.get('add_submissions')));\n  }\n\n  if (data.submissionsEdit) {\n    parsed.push(buildBackendPerm(data.username, PERMISSIONS_CODENAMES.get('change_submissions')));\n  }\n\n  if (data.submissionsValidate) {\n    parsed.push(buildBackendPerm(data.username, PERMISSIONS_CODENAMES.get('validate_submissions')));\n  }\n\n  parsed = removeContradictoryPerms(parsed);\n  parsed = removeImpliedPerms(parsed);\n\n  return parsed;\n}\n\n/**\n * Removes contradictory permissions from the parsed list of BackendPerms.\n *\n * @param {BackendPerm[]} parsed - A list of permissions.\n */\nfunction removeContradictoryPerms(parsed) {\n  let contraPerms = new Set();\n  parsed.forEach((backendPerm) => {\n    const permDef = permConfig.getPermission(backendPerm.permission);\n    permDef.contradictory.forEach((contraPerm) => {\n      contraPerms.add(contraPerm);\n    });\n  });\n  parsed = parsed.filter((backendPerm) => {\n    return !contraPerms.has(backendPerm.permission);\n  });\n  return parsed;\n}\n\n/**\n * Removes implied permissions from the parsed list of BackendPerms.\n *\n * @param {BackendPerm[]} parsed - A list of permissions.\n */\nfunction removeImpliedPerms(parsed) {\n  let impliedPerms = new Set();\n  parsed.forEach((backendPerm) => {\n    const permDef = permConfig.getPermission(backendPerm.permission);\n    permDef.implied.forEach((impliedPerm) => {\n      impliedPerms.add(impliedPerm);\n    });\n  });\n  parsed = parsed.filter((backendPerm) => {\n    return !impliedPerms.has(backendPerm.permission);\n  });\n  return parsed;\n}\n\n/**\n * @param {string} username\n * @param {string} permissionCodename\n * @returns {BackendPerm}\n */\nfunction buildBackendPerm(username, permissionCodename) {\n  return {\n    user: buildUserUrl(username),\n    permission: permConfig.getPermissionByCodename(permissionCodename).url\n  };\n}\n\n/**\n * Builds form data from list of permissions.\n *\n * @param {UserPerm[]} permissions\n * @returns {FormData}\n */\nfunction buildFormData(permissions) {\n  const formData = {};\n\n  permissions.forEach((perm) => {\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.get('view_asset')).url) {\n      formData.formView = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.get('change_asset')).url) {\n      formData.formEdit = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.get('partial_submissions')).url) {\n      formData.submissionsView = true;\n      formData.submissionsViewPartial = true;\n      perm.partial_permissions.forEach((partial) => {\n        partial.filters.forEach((filter) => {\n          if (filter._submitted_by) {\n            formData.submissionsViewPartialUsers = filter._submitted_by.$in;\n          }\n        });\n      });\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.get('add_submissions')).url) {\n      formData.submissionsAdd = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.get('view_submissions')).url) {\n      formData.submissionsView = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.get('change_submissions')).url) {\n      formData.submissionsEdit = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.get('validate_submissions')).url) {\n      formData.submissionsValidate = true;\n    }\n  });\n\n  return formData;\n}\n\n/**\n * Builds a flat array of permissions for Backend endpoint\n *\n * @param {UserWithPerms[]} data - The one you get from parseBackendData or parseOldBackendData\n * @returns {BackendPerm[]} A flat list of BackendPerms\n */\nfunction parseUserWithPermsList(data) {\n  const output = [];\n  data.forEach((item) => {\n    item.permissions.forEach((itemPerm) => {\n      const outputPerm = {\n        user: item.user.url,\n        permission: itemPerm.permission,\n      };\n      if (itemPerm.partial_permissions) {\n        outputPerm.partial_permissions = itemPerm.partial_permissions;\n      }\n      output.push(outputPerm);\n    });\n  });\n  return output;\n}\n\n/**\n * Groups raw Backend permissions list data into array of users who have a list of permissions.\n *\n * @param {Object} data - Permissions array (results property from endpoint response).\n * @param {string} ownerUrl - Asset owner url (used as identifier).\n * @param {boolean} includeAnon - Whether to include permissions assigned to the anonymous user.\n *\n * @returns {UserWithPerms[]} An ordered list of users with all their permissions.\n */\nfunction parseBackendData(data, ownerUrl, includeAnon = false) {\n  const output = [];\n\n  const groupedData = {};\n  data.forEach((item) => {\n    // anonymous user permissions are our inner way of handling public sharing\n    if (getUsernameFromUrl(item.user) === ANON_USERNAME && !includeAnon) {\n      return;\n    }\n    if (!groupedData[item.user]) {\n      groupedData[item.user] = [];\n    }\n    groupedData[item.user].push({\n      url: item.url,\n      permission: item.permission,\n      partial_permissions: item.partial_permissions ? item.partial_permissions : undefined\n    });\n  });\n\n  Object.keys(groupedData).forEach((userUrl) => {\n    output.push({\n      user: {\n        url: userUrl,\n        name: getUsernameFromUrl(userUrl),\n        // not all endpoints return user url in the v2 format, so as a fallback\n        // we also check plain old usernames\n        isOwner: (\n          userUrl === ownerUrl ||\n          getUsernameFromUrl(userUrl) === getUsernameFromUrl(ownerUrl)\n        )\n      },\n      permissions: groupedData[userUrl]\n    });\n  });\n\n  return sortParseBackendOutput(output);\n}\n\n/**\n * Groups OLD raw Backend permissions list data into array of users who have a list of permissions.\n *\n * @param {Object} data - OLD permissions array.\n * @param {string} ownerUrl - Asset owner url (used as identifier).\n *\n * @returns {UserWithPerms[]} An list of users with all their permissions.\n */\nfunction parseOldBackendData(data, ownerUrl) {\n  const output = [];\n\n  const groupedData = {};\n  data.forEach((item) => {\n    // anonymous user permissions are our inner way of handling public sharing\n    // so we don't want to display them\n    if (item.user__username === ANON_USERNAME) {\n      return;\n    }\n    if (!groupedData[item.user]) {\n      groupedData[item.user] = [];\n    }\n    const permDef = permConfig.getPermission(item.permission);\n    groupedData[item.user].push({\n      url: item.url,\n      permission: permDef.url\n    });\n  });\n\n  Object.keys(groupedData).forEach((userUrl) => {\n    output.push({\n      user: {\n        url: userUrl,\n        name: getUsernameFromUrl(userUrl),\n        // not all endpoints return user url in the v2 format, so as a fallback\n        // we also check plain old usernames\n        isOwner: (\n          userUrl === ownerUrl ||\n          getUsernameFromUrl(userUrl) === getUsernameFromUrl(ownerUrl)\n        )\n      },\n      permissions: groupedData[userUrl]\n    });\n  });\n\n  return sortParseBackendOutput(output);\n}\n\n/**\n * Sort by abcs but keep the owner at the top.\n *\n * @param {UserWithPerms[]} output - Possibly unsorted.\n * @returns {UserWithPerms[]} - Definitely sorted.\n */\nfunction sortParseBackendOutput(output) {\n  return output.sort((a, b) => {\n    if (a.user.isOwner) {\n      return -1;\n    } else if (b.user.isOwner) {\n      return 1;\n    } else if (a.user.url < b.user.url) {\n      return -1;\n    } else if (a.user.url > b.user.url) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nexport const permParser = {\n  parseFormData: parseFormData,\n  buildFormData: buildFormData,\n  parseBackendData: parseBackendData,\n  parseOldBackendData: parseOldBackendData,\n  parseUserWithPermsList: parseUserWithPermsList,\n  sortParseBackendOutput: sortParseBackendOutput // for testing purposes\n};\n","###\nfixtures of surveys, wrapped in javascript objects.\n(Probably overcomplicated, but at the core they're\nsample surveys for tests.)\n###\n\n_ = require(\"underscore\")\n\nclass SurveyFixture\n  constructor: (@name)->\n    @equivs = []\n    @invals = []\n  _append: (o, att)->\n    if o instanceof Array\n      @_append(_o, att)  for _o in o\n    else\n      @[att].push(o)\n    @\n  equiv: (o...)-> @_append(o, 'equivs')\n  inval: (o...)-> @_append(o, 'invals')\n  main: (m)->\n    if m\n      @_main = m\n      @\n    else\n      @_main\n\nsurveys = {}\n\nsurveys.cascading =\n  choices: (_.object([\"list_name\", \"name\", \"label\", \"state\", \"county\"], x) \\\n                  for x in [\n                    [\"state\", \"texas\", \"Texas\", null, null],\n                    [\"state\", \"washington\", \"Washington\", null, null],\n                    [\"county\", \"king\", \"King\", \"washington\", null],\n                    [\"county\", \"pierce\", \"Pierce\", \"washington\", null],\n                    [\"county\", \"king\", \"King\", \"texas\", null],\n                    [\"county\", \"cameron\", \"Cameron\", \"texas\", null],\n                    [\"city\", \"dumont\", \"Dumont\", null, \"king\"],\n                    [\"city\", \"finney\", \"Finney\", null, \"king\"],\n                    [\"city\", \"brownsville\", \"brownsville\", null, \"cameron\"],\n                    [\"city\", \"harlingen\", \"harlingen\", null, \"cameron\"],\n                    [\"city\", \"seattle\", \"Seattle\", null, \"king\"],\n                    [\"city\", \"redmond\", \"Redmond\", null, \"king\"],\n                    [\"city\", \"tacoma\", \"Tacoma\", null, \"pierce\"],\n                    [\"city\", \"puyallup\", \"Puyallup\", null, \"pierce\"]])\n\nsurveys.pizza_survey = do->\n  csv = \"\"\"\n  survey,,,\n  ,type,name,label\n  ,select_one yes_no,likes_pizza,Do you like pizza?\n  choices,,,\n  ,list name,name,label\n  ,yes_no,yes,Yes\n  ,yes_no,no,No\n  \"\"\"\n\n  xlf1 =\n    survey: [\n      type:\n        select_one: \"yes_no\"\n\n      name: \"likes_pizza\"\n      label: \"Do you like pizza?\"\n    ]\n    choices:\n      yes_no: [\n        {\n          name: \"yes\"\n          label: \"Yes\"\n        }\n        {\n          name: \"no\"\n          label: \"No\"\n        }\n      ]\n\n  xlf2 =\n    survey: [\n      type: \"select_one yes_no\"\n      name: \"likes_pizza\"\n      label: \"Do you like pizza?\"\n    ]\n    choices:\n      yes_no: [\n        {\n          name: \"yes\"\n          label: \"Yes\"\n        }\n        {\n          name: \"no\"\n          label: \"No\"\n        }\n      ]\n\n  new SurveyFixture(\"pizza_survey\").equiv(xlf1, xlf2, csv).main(xlf1)\n\nsurveys.groups = do ->\n  csv = \"\"\"\n  survey,,,\n  ,type,name,label\n  ,text,q1,Question1\n  ,begin group,grp,\n  ,text,g1q1,Group1Question1\n  ,text,g1q2,Group1Question2\n  ,end group,,\n  \"\"\"\n\n  xlf1 = survey: [\n    {\n      type: \"text\"\n      name: \"q1\"\n      label: \"Question1\"\n    }\n    {\n      type: \"begin group\"\n      name: \"grp\"\n    }\n    {\n      type: \"text\"\n      name: \"g1q1\"\n      label: \"Group1Question1\"\n    }\n    {\n      type: \"text\"\n      name: \"g1q2\"\n      label: \"Group1Question2\"\n    }\n    {\n      type: \"end group\"\n    }\n  ]\n\n  xlf2 = survey: [\n    {\n      type: \"text\"\n      name: \"q1\"\n      label: \"Question1\"\n    }\n    {\n      type: \"group\"\n      name: \"grp\"\n      rows: [\n        {\n          type: \"text\"\n          name: \"g1q1\"\n          label: \"Group1Question1\"\n        }\n        {\n          type: \"text\"\n          name: \"g1q2\"\n          label: \"Group1Question2\"\n        }\n      ]\n    }\n    {\n      type: \"end group\"\n    }\n  ]\n\n  new SurveyFixture('groups').equiv(csv, xlf1, xlf2).main(xlf1)\n\nmodule.exports = surveys\n","/* global viewUtils */\n'use strict';\n\n/*\n    Options:\n        Validations: array containing validation descriptors:\n            name:string - the name of the validator function to invoke\n            failureMessage:string - the message passed to the callback when validation fails\n            args:array - additional arguments to pass into the validation function\n*/\nmodule.exports = (function(){\n\nreturn (function () {\n    var singleton = {\n            create: function (options) {\n                return new Validator(options);\n            },\n            __validators: {\n                invalidChars: function (value, chars) {\n                    var matcher = new RegExp('[' + chars + ']');\n                    return !matcher.test(value);\n                },\n                unique: function (value, list) {\n                    return _.filter(list, function (item) { return item === value; }).length === 0;\n                }\n            }\n        };\n\n\n    var Validator = function (options) {\n        this.options = options;\n    };\n\n    Validator.prototype.validate = function (value) {\n        var validationsLength = this.options.validations.length,\n            validations = this.options.validations;\n\n        for (var i = 0; i < validationsLength; i++) {\n            var currentValidation = validations[i];\n            if (!currentValidation.args) {\n                currentValidation.args = [];\n            }\n            currentValidation.args.unshift(value);\n\n            if (!singleton.__validators[currentValidation.name].apply(this, currentValidation.args)) {\n                return currentValidation.failureMessage;\n            }\n        }\n        return true;\n    };\n\n    return singleton;\n\n} ());\n\n})();\n","$skipLogicHelpers = require './mv.skipLogicHelpers'\n$modelRowDetailsSkipLogic = require './model.rowDetails.skipLogic'\n$viewRowDetailSkipLogic = require './view.rowDetail.SkipLogic'\n$modelUtils = require './model.utils'\n$validationLogicHelpers = require './mv.validationLogicHelpers'\n$modelRowDetailValidationLogic = require './model.rowDetail.validationLogic'\n$viewRowDetailValidationLogic = require './view.rowDetail.ValidationLogic'\n\nmodule.exports = do ->\n  # To be extended ontop of a RowDetail when the key matches\n  # the attribute in XLF.RowDetailMixin\n  SkipLogicDetailMixin =\n    getValue: ()->\n      v = @serialize()\n      if v is \"undefined\"\n        Raven?.captureException(\"Serialized value is returning a string, undefined\")\n        v = \"\"\n      v\n\n    postInitialize: ()->\n      # TODO: get skip logic factories connected\n      survey = @getSurvey()\n      model_factory = new $modelRowDetailsSkipLogic.SkipLogicFactory survey\n      view_factory = new $viewRowDetailSkipLogic.SkipLogicViewFactory survey\n      helper_factory = new $skipLogicHelpers.SkipLogicHelperFactory model_factory, view_factory, survey, @_parent, @.get('value')\n\n      @facade = new $skipLogicHelpers.SkipLogicPresentationFacade model_factory, helper_factory, view_factory\n\n    serialize: ()->\n      # @hidden = false\n      # note: reimplement \"hidden\" if response is invalid\n      @facade.serialize()\n\n    parse: ()->\n\n    linkUp: (ctx)->\n      @facade.initialize()\n\n  ValidationLogicMixin =\n    getValue: () ->\n      v = @serialize()\n      if v is \"undefined\"\n        Raven?.captureException(\"Serialized value is returning a string, undefined\")\n        v = \"\"\n      v\n\n    postInitialize: () ->\n      survey = @getSurvey()\n      model_factory = new $modelRowDetailValidationLogic.ValidationLogicModelFactory survey\n      view_factory = new $viewRowDetailValidationLogic.ValidationLogicViewFactory survey\n      helper_factory = new $validationLogicHelpers.ValidationLogicHelperFactory model_factory, view_factory, survey, @_parent, @.get('value')\n\n      @facade = new $skipLogicHelpers.SkipLogicPresentationFacade model_factory, helper_factory, view_factory\n\n    serialize: ()->\n      # @hidden = false\n      # note: reimplement \"hidden\" if response is invalid\n      @facade.serialize()\n\n    parse: ()->\n\n    linkUp: (ctx)->\n      @facade.initialize()\n\n  rowDetailMixins =\n    relevant: SkipLogicDetailMixin\n    constraint: ValidationLogicMixin\n    label:\n      postInitialize: ()->\n        # When the row's name changes, trigger the row's [finalize] function.\n        return\n    name:\n      deduplicate: (survey) ->\n        names = []\n        survey.forEachRow (r)=>\n          if r.get('name') != @\n            name = r.getValue(\"name\")\n            names.push(name)\n        , includeGroups: true\n\n        $modelUtils.sluggifyLabel @get('value'), names\n  rowDetailMixins\n","/**\n * A list of all shareable constants for the application.\n */\n\nimport {t} from './utils';\n\nexport const ROOT_URL = (() => {\n  // This is an \"absolute path reference (a URL without the domain name)\"\n  // according to the Django docs\n  let rootPath = document.head.querySelector('meta[name=kpi-root-path]');\n  if (rootPath === null) {\n    console.error('no kpi-root-path meta tag set. defaulting to \"\"');\n    rootPath = '';\n  } else {\n    // Strip trailing slashes\n    rootPath = rootPath.content.replace(/\\/*$/, '');\n  }\n  return `${window.location.protocol}//${window.location.host}${rootPath}`;\n})();\n\nexport const ANON_USERNAME = 'AnonymousUser';\n\n/**\n * A hardcoded list of permissions codenames.\n * All of them are really defined on backend, but we need it here to be able to\n * build UI for handling them.\n */\nexport const PERMISSIONS_CODENAMES = new Map();\nnew Set([\n  'view_asset',\n  'change_asset',\n  'add_submissions',\n  'view_submissions',\n  'partial_submissions',\n  'change_submissions',\n  'validate_submissions',\n  'view_collection',\n  'change_collection'\n]).forEach((codename) => {PERMISSIONS_CODENAMES.set(codename, codename);});\n\n// TODO remove after collection is merged with asset\n// // https://github.com/kobotoolbox/kpi/issues/2332\nexport const COLLECTION_PERMISSIONS = {};\nCOLLECTION_PERMISSIONS[PERMISSIONS_CODENAMES.get('view_collection')] = t('View collection');\nCOLLECTION_PERMISSIONS[PERMISSIONS_CODENAMES.get('change_collection')] = t('Edit collection');\n\nexport const HOOK_LOG_STATUSES = {\n  SUCCESS: 2,\n  PENDING: 1,\n  FAILED: 0\n};\n\nexport const KEY_CODES = new Map([\n  ['TAB', 9],\n  ['ENTER', 13],\n  ['ESC', 27],\n  ['SPACE', 32],\n  ['NBSP', 160], // non-breakable space\n]);\n\nexport const MODAL_TYPES = {\n  SHARING: 'sharing',\n  UPLOADING_XLS: 'uploading-xls',\n  NEW_FORM: 'new-form',\n  ENKETO_PREVIEW: 'enketo-preview',\n  SUBMISSION: 'submission',\n  REPLACE_PROJECT: 'replace-project',\n  TABLE_COLUMNS: 'table-columns',\n  REST_SERVICES: 'rest-services',\n  FORM_LANGUAGES: 'form-languages',\n  FORM_TRANSLATIONS_TABLE: 'form-translation-table'\n};\n\nexport const PROJECT_SETTINGS_CONTEXTS = {\n  NEW: 'newForm',\n  EXISTING: 'existingForm',\n  REPLACE: 'replaceProject',\n  BUILDER: 'formBuilderAside'\n};\n\nexport const update_states = {\n  UNSAVED_CHANGES: -1,\n  UP_TO_DATE: true,\n  PENDING_UPDATE: false,\n  SAVE_FAILED: 'SAVE_FAILED',\n};\n\nexport const AVAILABLE_FORM_STYLES = [\n  {value: '', label: t('Default - single page')},\n  {value: 'theme-grid no-text-transform', label: t('Grid theme')},\n  {value: 'theme-grid', label: t('Grid theme with headings in ALL CAPS')},\n  {value: 'pages', label: t('Multiple pages')},\n  {value: 'theme-grid pages no-text-transform', label: t('Grid theme + Multiple pages')},\n  {value: 'theme-grid pages', label: t('Grid theme + Multiple pages + headings in ALL CAPS')},\n];\n\nexport const VALIDATION_STATUSES = {\n  no_status: {\n    value: null,\n    label: '—'\n  },\n  validation_status_not_approved: {\n    value: 'validation_status_not_approved',\n    label: t('Not Approved')\n  },\n  validation_status_approved: {\n    value: 'validation_status_approved',\n    label: t('Approved')\n  },\n  validation_status_on_hold: {\n    value: 'validation_status_on_hold',\n    label: t('On Hold')\n  },\n};\n\nexport const VALIDATION_STATUSES_LIST = [\n  VALIDATION_STATUSES.no_status,\n  VALIDATION_STATUSES.validation_status_not_approved,\n  VALIDATION_STATUSES.validation_status_approved,\n  VALIDATION_STATUSES.validation_status_on_hold\n];\n\nexport const ASSET_TYPES = {\n  question: {\n    id: 'question',\n    label: t('question')\n  },\n  block: {\n    id: 'block',\n    label: t('block')\n  },\n  template: {\n    id: 'template',\n    label: t('template')\n  },\n  survey: {\n    id: 'survey',\n    label: t('project')\n  }\n};\n\nexport const ASSET_KINDS = new Map();\nnew Set([\n  'asset',\n  'collection'\n]).forEach((kind) => {ASSET_KINDS.set(kind, kind);});\n\nexport const QUESTION_TYPES = new Map([\n  [\n    'select_one',\n    {\n      label: t('Select One'),\n      faIcon: 'fa-dot-circle-o',\n      id: 'select_one'\n    }\n  ],\n  [\n    'select_multiple',\n    {\n      label: t('Select Many'),\n      faIcon: 'fa-list-ul',\n      id: 'select_multiple'\n    }\n  ],\n  [\n    'text',\n    {\n      label: t('Text'),\n      faIcon: 'fa-lato-text',\n      id: 'text'\n    }\n  ],\n  [\n    'integer',\n    {\n      label: t('Number'),\n      faIcon: 'fa-lato-integer',\n      id: 'integer'\n    }\n  ],\n  [\n    'decimal',\n    {\n      label: t('Decimal'),\n      faIcon: 'fa-lato-decimal',\n      id: 'decimal'\n    }\n  ],\n  [\n    'date',\n    {\n      label: t('Date'),\n      faIcon: 'fa-calendar',\n      id: 'date'\n    }\n  ],\n  [\n    'time',\n    {\n      label: t('Time'),\n      faIcon: 'fa-clock-o',\n      id: 'time'\n    }\n  ],\n  [\n    'datetime',\n    {\n      label: t('Date & time'),\n      faIcon: 'fa-calendar clock-over',\n      id: 'datetime'\n    }\n  ],\n  [\n    'geopoint',\n    {\n      label: t('Point'),\n      faIcon: 'fa-map-marker',\n      id: 'geopoint'\n    }\n  ],\n  [\n    'image',\n    {\n      label: t('Photo'),\n      faIcon: 'fa-picture-o',\n      id: 'image'\n    }\n  ],\n  [\n    'audio',\n    {\n      label: t('Audio'),\n      faIcon: 'fa-volume-up',\n      id: 'audio'\n    }\n  ],\n  [\n    'video',\n    {\n      label: t('Video'),\n      faIcon: 'fa-video-camera',\n      id: 'video'\n    }\n  ],\n  [\n    'geotrace',\n    {\n      label: t('Line'),\n      faIcon: 'fa-share-alt',\n      id: 'geotrace'\n    }\n  ],\n  [\n    'note',\n    {\n      label: t('Note'),\n      faIcon: 'fa-bars',\n      id: 'note'\n    }\n  ],\n  [\n    'barcode',\n    {\n      label: t('Barcode / QR Code'),\n      faIcon: 'fa-qrcode',\n      id: 'barcode'\n    }\n  ],\n  [\n    'acknowledge',\n    {\n      label: t('Acknowledge'),\n      faIcon: 'fa-check-square-o',\n      id: 'acknowledge'\n    }\n  ],\n  [\n    'geoshape',\n    {\n      label: t('Area'),\n      faIcon: 'fa-square',\n      id: 'geoshape'\n    }\n  ],\n  [\n    'score',\n    {\n      label: t('Rating'),\n      faIcon: 'fa-server',\n      id: 'score'\n    }\n  ],\n  [\n    'kobomatrix',\n    {\n      label: t('Question Matrix'),\n      faIcon: 'fa-table',\n      id: 'kobomatrix'\n    }\n  ],\n  [\n    'rank',\n    {\n      label: t('Ranking'),\n      faIcon: 'fa-sort-amount-desc',\n      id: 'rank'\n    }\n  ],\n  [\n    'calculate',\n    {\n      label: t('Calculate'),\n      faIcon: 'fa-lato-calculate',\n      id: 'calculate'\n    }\n  ],\n  [\n    'file',\n    {\n      label: t('File'),\n      faIcon: 'fa-file',\n      id: 'file'\n    }\n  ],\n  [\n    'range',\n    {\n      label: t('Range'),\n      faIcon: 'fa-lato-range',\n      id: 'range'\n    }\n  ]\n]);\n\nexport const META_QUESTION_TYPES = new Map();\nnew Set([\n  'start',\n  'end',\n  'today',\n  'username',\n  'simserial',\n  'subscriberid',\n  'deviceid',\n  'phonenumber',\n  'audit'\n]).forEach((codename) => {META_QUESTION_TYPES.set(codename, codename);});\n\nexport const NAME_MAX_LENGTH = 255;\n\nconst constants = {\n  ROOT_URL,\n  ANON_USERNAME,\n  PERMISSIONS_CODENAMES,\n  COLLECTION_PERMISSIONS,\n  HOOK_LOG_STATUSES,\n  KEY_CODES,\n  MODAL_TYPES,\n  PROJECT_SETTINGS_CONTEXTS,\n  update_states,\n  AVAILABLE_FORM_STYLES,\n  VALIDATION_STATUSES,\n  VALIDATION_STATUSES_LIST,\n  ASSET_TYPES,\n  ASSET_KINDS,\n  QUESTION_TYPES,\n  META_QUESTION_TYPES,\n  NAME_MAX_LENGTH\n};\n\nexport default constants;\n","$ = require 'jquery'\n$validationLogicParser = require './model.validationLogicParser'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n_t = require('utils').t\n\nmodule.exports = do ->\n  validationLogicHelpers = {}\n\n  class validationLogicHelpers.ValidationLogicHelperFactory extends $skipLogicHelpers.SkipLogicHelperFactory\n    create_presenter: (criterion_model, criterion_view) ->\n      return new validationLogicHelpers.ValidationLogicPresenter criterion_model, criterion_view, @current_question, @survey, @view_factory\n    create_builder: () ->\n      return new validationLogicHelpers.ValidationLogicBuilder @model_factory, @view_factory, @survey, @current_question, @\n    create_context: () ->\n      return new validationLogicHelpers.ValidationLogicHelperContext @model_factory, @view_factory, @, @serialized_criteria\n\n  class validationLogicHelpers.ValidationLogicPresenter extends $skipLogicHelpers.SkipLogicPresenter\n    change_question: () -> return\n\n  class validationLogicHelpers.ValidationLogicBuilder extends $skipLogicHelpers.SkipLogicBuilder\n    _parse_skip_logic_criteria: (criteria) ->\n      return $validationLogicParser criteria\n\n    _get_question: () ->\n      @current_question\n\n    build_empty_criterion: () ->\n      operator_picker_view = @view_factory.create_operator_picker @current_question.get_type()\n\n      response_value_view = @view_factory.create_response_value_view @current_question, @current_question.get_type(), @_operator_type()\n\n      presenter = @build_criterion_logic @model_factory.create_operator('empty'), operator_picker_view, response_value_view\n\n      presenter.model.change_question @current_question.cid\n\n      return presenter\n\n    questions: () ->\n      [@current_question]\n    _operator_type: () ->\n      operator_type = super\n      if !operator_type?\n        operator_type_id = @current_question.get_type().operators[0]\n        operator_type = $skipLogicHelpers.operator_types[if operator_type_id == 1 then @current_question.get_type().operators[1] else operator_type_id]\n      return operator_type\n\n  class validationLogicHelpers.ValidationLogicHelperContext extends $skipLogicHelpers.SkipLogicHelperContext\n    use_mode_selector_helper: () ->\n      @state = new validationLogicHelpers.ValidationLogicModeSelectorHelper @view_factory, @\n      @render @destination\n    use_hand_code_helper: () ->\n      @state = new validationLogicHelpers.ValidationLogicHandCodeHelper(@state.serialize(), @builder, @view_factory, @)\n      if @questionTypeHasNoValidationOperators()\n        @state.button = @view_factory.create_empty()\n      @render @destination\n      return\n    constructor: (@model_factory, @view_factory, @helper_factory, serialized_criteria) ->\n      @state = serialize: () -> return serialized_criteria\n      if @questionTypeHasNoValidationOperators()\n        @use_hand_code_helper()\n      else\n        super\n    questionTypeHasNoValidationOperators: () ->\n      typeId = @helper_factory.current_question.get('type').get('typeId')\n      if !typeId\n        return console.error('no type id found for question', @helper_factory.current_question)\n      operators = $skipLogicHelpers.question_types[typeId]?.operators\n      if !operators\n        operators = $skipLogicHelpers.question_types['default'].operators\n      operators.length == operators[0]\n\n  class validationLogicHelpers.ValidationLogicModeSelectorHelper extends $skipLogicHelpers.SkipLogicModeSelectorHelper\n    constructor: (view_factory, @context) ->\n      super\n      @handcode_button = view_factory.create_button '<i>${}</i> ' + _t(\"Manually enter your validation logic in XLSForm code\"), 'skiplogic__button skiplogic__select-handcode'\n\n  class validationLogicHelpers.ValidationLogicHandCodeHelper extends $skipLogicHelpers.SkipLogicHandCodeHelper\n    render: ($destination) ->\n      $destination.replaceWith(@$handCode)\n      @button.render().attach_to @$handCode\n      @button.bind_event 'click', () =>\n        @$handCode.replaceWith($destination)\n        @context.use_mode_selector_helper()\n      @$handCode.on('change', () =>\n        @context.view_factory.survey.trigger('change')\n      )\n    serialize: () ->\n      @textarea.val()\n    constructor: () ->\n      super\n      @$handCode = $(\"\"\"\n        <div class=\"card__settings__fields__field\">\n          <label for=\"#{@context.helper_factory.current_question.cid}-handcode\">#{_t(\"Validation Code:\")}</label>\n          <span class=\"settings__input\">\n            <input type=\"text\" name=\"constraint\" id=\"#{@context.helper_factory.current_question.cid}-handcode\" class=\"text\" value=\"#{@criteria}\">\n          </span>\n        </div>\n      \"\"\")\n      @textarea = @$handCode.find('#' + @context.helper_factory.current_question.cid + '-handcode')\n\n\n  validationLogicHelpers\n","Backbone = require 'backbone'\n$skipLogicModel = require './model.rowDetails.skipLogic'\n\nmodule.exports = do ->\n  rowDetailValidationLogic = {}\n  class rowDetailValidationLogic.ValidationLogicModelFactory extends $skipLogicModel.SkipLogicFactory\n    create_operator: (type, symbol, id) ->\n      operator = null\n      switch type\n        when 'text' then operator = new rowDetailValidationLogic.ValidationLogicTextOperator symbol\n        when 'date' then operator = new rowDetailValidationLogic.ValidationLogicDateOperator symbol\n        when 'basic' then operator = new rowDetailValidationLogic.ValidationLogicBasicOperator symbol\n        when 'existence' then operator = new rowDetailValidationLogic.ValidationLogicExistenceOperator symbol\n        when 'select_multiple' then operator = new rowDetailValidationLogic.ValidationLogicSelectMultipleOperator symbol\n        when 'empty' then return new $skipLogicModel.EmptyOperator()\n\n      operator.set 'id', id\n      return operator\n    create_criterion_model: () ->\n      new rowDetailValidationLogic.ValidationLogicCriterion(@, @survey)\n\n  class rowDetailValidationLogic.ValidationLogicBasicOperator extends $skipLogicModel.SkipLogicOperator\n    serialize: (question_name, response_value) ->\n      return '. ' + this.get('symbol') + ' ' + response_value\n  class rowDetailValidationLogic.ValidationLogicTextOperator extends rowDetailValidationLogic.ValidationLogicBasicOperator\n    serialize: (question_name, response_value) ->\n      return super '', ' ' + \"'\" + response_value.replace(/'/g, \"\\\\'\") + \"'\"\n  class rowDetailValidationLogic.ValidationLogicDateOperator extends rowDetailValidationLogic.ValidationLogicBasicOperator\n    serialize: (question_name, response_value) ->\n      if response_value.indexOf('date') == -1\n        response_value = \"date('\" + response_value + \"')\"\n      return super '', ' ' + response_value\n  class rowDetailValidationLogic.ValidationLogicExistenceOperator extends rowDetailValidationLogic.ValidationLogicBasicOperator\n    serialize: () ->\n      return super '', \"''\"\n  class rowDetailValidationLogic.ValidationLogicSelectMultipleOperator extends $skipLogicModel.SelectMultipleSkipLogicOperator\n    serialize: (question_name, response_value) ->\n      selected = \"selected(., '\" + response_value + \"')\"\n      if this.get 'is_negated'\n          return 'not(' + selected + ')'\n      return selected\n\n  class rowDetailValidationLogic.ValidationLogicCriterion extends $skipLogicModel.SkipLogicCriterion\n    change_question: (cid) ->\n      old_question_type = if @_get_question() then @_get_question().get_type() else name: null\n      @set \"question_cid\", cid\n      question_type = @_get_question().get_type()\n\n      if @get(\"operator\").get_id()? && !(@get(\"operator\").get_id() in question_type.operators)\n        @change_operator if question_type.operators[0] != 1 then question_type.operators[0] else question_type.operators[1]\n      else if old_question_type.name != question_type.name\n        @change_operator @get(\"operator\").get_value()\n      if (@get(\"operator\").get_type().response_type == null) && @_get_question().response_type != @get(\"response_value\")?.get_type()\n        @change_response @get(\"response_value\").get(\"value\")\n\n  rowDetailValidationLogic\n","_ = require 'underscore'\n$skipLogicView = require './view.rowDetail.SkipLogic'\n$viewWidgets = require './view.widgets'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n\nmodule.exports = do ->\n  viewRowDetailValidationLogic = {}\n  class viewRowDetailValidationLogic.ValidationLogicViewFactory extends $skipLogicView.SkipLogicViewFactory\n    create_criterion_builder_view: () ->\n      return new viewRowDetailValidationLogic.ValidationLogicCriterionBuilder()\n    create_question_picker: () ->\n      return new viewRowDetailValidationLogic.ValidationLogicQuestionPicker\n    create_operator_picker: (question_type) ->\n      operators = _.filter($skipLogicHelpers.operator_types, (op_type) -> op_type.id != 1 && op_type.id in question_type.operators)\n      return new $skipLogicView.OperatorPicker operators\n\n  class viewRowDetailValidationLogic.ValidationLogicCriterionBuilder extends $skipLogicView.SkipLogicCriterionBuilderView\n    render: () ->\n      super\n      @$el.html(@$el.html().replace 'only be displayed', 'be valid only')\n\n      @\n\n  class viewRowDetailValidationLogic.ValidationLogicQuestionPicker extends $viewWidgets.Label\n    constructor: () ->\n      super(\"This question's response has to be\")\n    attach_to: (target) ->\n      target.find('.skiplogic__rowselect').remove()\n      super(target)\n\n  viewRowDetailValidationLogic\n","\n_ = require 'underscore'\nBackbone = require 'backbone'\n$base = require './model.base'\n$row = require './model.row'\n$aliases = require './model.aliases'\n$utils = require './model.utils'\n$configs = require './model.configs'\n$surveyDetail = require './model.surveyDetail'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n\nmodule.exports = do ->\n  _t = require(\"utils\").t\n\n  surveyFragment = {}\n\n  class KobomatrixRow extends Backbone.Model\n    _isSelectQuestion: -> false\n\n  class KobomatrixRows extends Backbone.Collection\n    model: KobomatrixRow\n\n  class KobomatrixMixin\n    constructor: (rr)->\n      @_kobomatrix_columns = new KobomatrixRows()\n      @_rowAttributeName = '_kobomatrix_columns'\n\n      extend_to_row = (val, key)=>\n        if _.isFunction(val)\n          rr[key] = (args...)->\n            val.apply(rr, args)\n        else\n          rr[key] = val\n      _.each @, extend_to_row\n      extend_to_row(@forEachRow, 'forEachRow')\n\n      _begin_kuid = rr.getValue('$kuid', false)\n      _end_json = {\n        \"type\": \"end_#{@_beginEndKey()}\"\n        \"$kuid\": \"/#{_begin_kuid}\"\n      }\n      rr._afterIterator = (cb, ctxt)->\n        obj =\n          export_relevant_values: (surv, addl)->\n            surv.push _.extend({}, _end_json)\n          toJSON: ->\n            _.extend({}, _end_json)\n\n        cb(obj)  if ctxt.includeGroupEnds\n\n      _toJSON = rr.toJSON\n\n      rr.clone = ()->\n        console.error('clone kobomatrix rows')\n\n      rr.toJSON = ()->\n        _.extend _toJSON.call(rr), {\n          'type': \"begin_#{rr._beginEndKey()}\"\n        }, @_additionalJson?()\n\n      _.each @constructor.prototype, extend_to_row\n\n      if rr.attributes.__rows\n        for subrow in rr.attributes.__rows\n          @[@_rowAttributeName].add(subrow)\n        delete rr.attributes.__rows\n\n\n    _kobomatrix_cols: ->\n      @rows\n\n    _isSelectQuestion: -> false\n    get_type: -> $skipLogicHelpers.question_types['default']\n    _beginEndKey: ->\n      'kobomatrix'\n\n    linkUp: (ctx)->\n      @getList = ()=> @items\n      items = {}\n      kobomatrix_list = @get('kobo--matrix_list')?.get('value')\n\n      if kobomatrix_list\n        items[kobomatrix_list] = @getSurvey().choices.get(kobomatrix_list)\n      else\n        kobomatrix_list = @.set('kobo--matrix_list', \"matrix_#{$utils.txtid()}\")\n        items[kobomatrix_list] = @getSurvey().choices.create()\n\n      @rows.each (row)=>\n        if listName = row.get('select_from_list_name')?.get('value')\n          items[listName] = @getSurvey().choices.get(listName)\n\n      @items = items\n      @items\n\n\n  passFunctionToMetaModel = (obj, fname)->\n    obj[\"__#{fname}\"] = obj[fname]\n    obj[fname] = (args...) -> obj._meta[fname].apply(obj._meta, args)\n\n  _forEachRow = (cb, ctx)->\n    @_beforeIterator(cb, ctx)  if '_beforeIterator' of @\n    unless 'includeErrors' of ctx\n      ctx.includeErrors = false\n    @rows.each (r, index, list)->\n      if typeof r.forEachRow is 'function'\n        if ctx.includeGroups\n          cb(r)\n        if not ctx.flat\n          r.forEachRow cb, ctx\n      else if r.isError()\n        cb(r)  if ctx.includeErrors\n      else\n        cb(r)\n    @_afterIterator(cb, ctx)  if '_afterIterator' of @\n    return\n\n  class surveyFragment.SurveyFragment extends $base.BaseCollection\n    constructor: (a,b)->\n      @rows = new Rows([], _parent: @)\n      @_meta = new Backbone.Model()\n      passFunctionToMetaModel(@, \"set\")\n      passFunctionToMetaModel(@, \"get\")\n      passFunctionToMetaModel(@, \"on\")\n      passFunctionToMetaModel(@, \"off\")\n      passFunctionToMetaModel(@, \"trigger\")\n      super(a,b)\n    _validate: ->\n      @clearErrors()\n      isValid = true\n      if !@settings.get('form_id')\n        @addError('form id must not be empty')\n        isValid = false\n\n      if !@settings.get('form_title')\n        @addError('form title must not be empty')\n        isValid = false\n\n      return isValid\n    clearErrors: () ->\n      @errors = []\n    addError: (message) ->\n      @errors.push message\n    linkUp: (ctx)-> @invoke('linkUp', ctx)\n    forEachRow: (cb, ctx={})->\n      _forEachRow.apply(@, [cb, ctx])\n    getRowDescriptors: () ->\n      descriptors = []\n      @forEachRow (row) ->\n        descriptor =\n          label: row.getValue('label')\n          name: row.getValue('name')\n        descriptors.push(descriptor)\n      descriptors\n    findRowByCid: (cid, options={})->\n      match = false\n      fn = (row)->\n        if row.cid is cid\n          match = row\n        # maybe implement a way to bust out\n        # of this loop with false response.\n        !match\n      @forEachRow fn, options\n      match\n\n    findRowByName: (name, opts)->\n      match = false\n      @forEachRow (row)->\n        if (row.getValue(\"name\") || $utils.sluggifyLabel row.getValue('label')) is name\n          match = row\n        # maybe implement a way to bust out\n        # of this loop with false response.\n        !match\n      ,opts\n      match\n    addRowAtIndex: (r, index)-> @addRow(r, at: index)\n    addRow: (r, opts={})->\n      if (afterRow = opts.after)\n        delete opts.after\n        opts._parent = afterRow._parent\n        index = 1 + opts._parent.models.indexOf(afterRow)\n        opts.at = index\n      else if (beforeRow = opts.before)\n        delete opts.before\n        opts._parent = beforeRow._parent\n        index = opts._parent.models.indexOf(beforeRow)\n        opts.at = index\n      else\n        opts._parent = @rows\n      opts._parent.add r, opts\n\n    detach: ->\n      @_parent.remove(@)\n      ``\n\n    remove: (item)->\n      item.detach()\n\n    _addGroup: (opts)->\n      # move to surveyFrag\n      opts._parent = @rows\n\n      unless 'type' of opts\n        opts.type = 'group'\n\n      unless '__rows' of opts\n        opts.__rows = []\n\n      opts.__rows = [].concat.apply([], opts.__rows)\n\n      rowCids = []\n      @forEachRow (\n          (r)->\n            rowCids.push(r.cid)\n        ), includeGroups: true, includeErrors: true\n\n      lowest_i = false\n      for row in opts.__rows\n        row_i = rowCids.indexOf row.cid\n        if (lowest_i is false) or (row_i < lowest_i)\n          lowest_i = row_i\n          first_row = row\n\n      addOpts =\n        previous: first_row.precedingRow()\n        parent: first_row.parentRow()\n      for row in opts.__rows\n        row.detach(silent: true)\n\n      unless opts.label?\n        opts.label = $configs.newGroupDetails.label.value\n      grp = new surveyFragment.Group(opts)\n      @getSurvey()._insertRowInPlace grp, addOpts\n      par = addOpts.parent or @getSurvey().rows\n      par.trigger('add', grp)\n\n    _allRows: ->\n      # move to surveyFrag\n      rows = []\n      @forEachRow ((r)-> rows.push(r)  if r.constructor.kls is \"Row\"), {}\n      rows\n\n    finalize: ->\n      # move to surveyFrag\n      @forEachRow ((r)=> r.finalize()), includeGroups: true\n      @\n\n  class surveyFragment.Group extends $row.BaseRow\n    @kls = \"Group\"\n    @key = \"group\"\n    constructor: (a={}, b)->\n      __rows = a.__rows or []\n      if a.label == undefined\n        a.label = ''\n      @_parent = a._parent\n      delete a.__rows\n      @rows = new Rows([], _parent: @)\n      super(a,b)\n      @rows.add __rows  if __rows\n      for row in __rows\n        row._parent = row.collection = @rows\n\n    _isSelectQuestion: -> false\n    get_type: -> $skipLogicHelpers.question_types['default']\n\n    initialize: ->\n      grpDefaults = $configs.newGroupDetails\n      for key, obj of grpDefaults\n        if !@has key\n          if typeof obj.value is 'function'\n            @set key, obj.value(@)\n          else\n            @set key, obj\n      @ensureKuid()\n      typeIsRepeat = @get('type') is 'repeat'\n      @set('_isRepeat', typeIsRepeat)\n      @convertAttributesToRowDetails()\n      if @getValue('type') is 'kobomatrix'\n        new KobomatrixMixin(@)\n\n    addRowAtIndex: (row, index) ->\n      row._parent = @rows\n      @rows.add(row, at:index)\n    _isRepeat: ()->\n      !!(@get(\"_isRepeat\")?.get(\"value\"))\n\n    autoname: ->\n      name = @getValue('name')\n      if name in [undefined, '']\n        slgOpts =\n          lowerCase: false\n          stripSpaces: true\n          lrstrip: true\n          incrementorPadding: 3\n          validXmlTag: true\n        new_name = $utils.sluggify(@getValue('label'), slgOpts)\n        @setDetail('name', new_name)\n\n    finalize: ->\n      @autoname()\n\n    detach: (opts)->\n      @_parent.remove(@, opts)\n\n    splitApart: ->\n      startingIndex = @_parent.models.indexOf(@)\n      @detach()\n      for row, n in @rows.models\n        row._parent = @_parent\n        @_parent._parent.addRowAtIndex(row, startingIndex + n)\n\n    _beforeIterator: (cb, ctxt)->\n      cb(@groupStart())  if ctxt.includeGroupEnds\n    _afterIterator: (cb, ctxt)->\n      cb(@groupEnd())  if ctxt.includeGroupEnds\n\n    forEachRow: (cb, ctx={})->\n      _forEachRow.apply(@, [cb, ctx])\n\n    _groupOrRepeatKey: ->\n      if @_isRepeat() then \"repeat\" else \"group\"\n\n    groupStart: ->\n      group = @\n      export_relevant_values: (surv, shts)-> surv.push(@toJSON())\n      toJSON: ->\n        out = {}\n        for k, val of group.attributes\n          if k isnt '_isRepeat'\n            out[k] = val.getValue()\n        out.type = \"begin_#{group._groupOrRepeatKey()}\"\n        out\n    groupEnd: ->\n      group = @\n      _kuid = @getValue(\"$kuid\")\n      _as_json =\n        type: \"end_#{@_groupOrRepeatKey()}\"\n        $kuid: \"/#{_kuid}\"\n\n      export_relevant_values: (surv, shts)->\n        surv.push _.extend {}, _as_json\n      toJSON: ()->\n        _.extend {}, _as_json\n\n  INVALID_TYPES_AT_THIS_STAGE = ['begin_group', 'end_group', 'begin_repeat', 'end_repeat']\n  _determineConstructorByParams = (obj)->\n    formSettingsTypes = do ->\n      for key, val of $configs.defaultSurveyDetails\n        val.name\n    type = obj?.type\n    if type in INVALID_TYPES_AT_THIS_STAGE\n      # inputParser should have converted groups and repeats into a structure by this point\n      throw new Error(\"Invalid type at this stage: #{type}\")\n\n    if type in formSettingsTypes\n      # e.g. \"today\"\n      throw new Error(\"#{type} is not properly handled as a SurveyDetail\")\n      $surveyDetail.SurveyDetail\n    else if type is 'score'\n      $row.Row\n    else if type in ['group', 'repeat', 'kobomatrix']\n      surveyFragment.Group\n    else\n      $row.Row\n\n  class Rows extends $base.BaseCollection\n    constructor: (args...)->\n      super(args...)\n      @on 'add', (a,b,c)=> @_parent.getSurvey().trigger('rows-add', a,b,c)\n      @on 'remove', (a,b,c)=> @_parent.getSurvey().trigger('rows-remove', a,b,c)\n    model: (obj, ctxt)->\n      RowConstructor = _determineConstructorByParams(obj)\n      try\n        new RowConstructor(obj, _.extend({}, ctxt, _parent: ctxt.collection))\n      catch e\n        # Store exceptions in with the survey\n        new $row.RowError(obj, _.extend({}, ctxt, error: e, _parent: ctxt.collection))\n    comparator: (m)-> m.ordinal\n\n  surveyFragment\n","$base = require './model.base'\n\nmodule.exports = do ->\n  RowDetail: $base.RowDetail\n","csv = require './csv'\n\nmodule.exports = do ->\n\n  markdownTable = {}\n  ###\n  this markdownTable is not meant to be used in production for real surveys.\n  It's simply here because it provides a clean way to display xlsforms in the source code.\n  ###\n\n  markdownTable.mdSurveyStructureToObject = (md)->\n    _trim = (s)-> String(s).replace(/^\\s+|\\s+$/g, '')\n    shtName = false\n    curSheet = false\n    sObj = {}\n    _pushSheet = ->\n      cols = curSheet[0]\n      sheetObjs = []\n      for row in curSheet.slice(1)\n        rowObj = {}\n        for cell, n in row when cols[n]\n          rowObj[cols[n]] = cell\n        sheetObjs.push(rowObj)\n      sObj[shtName] = sheetObjs\n      curSheet = []\n    for row in md.split('\\n')\n      _r = []\n      rcells = _trim(row).split('|')\n      for cell, i in rcells when i > 0\n        _r.push _trim(cell)\n      if _r[0]\n        _pushSheet()  if curSheet\n        shtName = _r[0]\n        curSheet = []\n      else if curSheet\n        curSheet.push(_r.slice(1, _r.length-1))\n      _r\n    _pushSheet()\n    sObj\n\n\n  markdownTable.csvJsonToMarkdown = (csvJson)->\n    _lengths = []\n    _record_max = (val, index)->\n      if !_lengths[index]\n        (_lengths[index] = 0)\n      if val > _lengths[index]\n        (_lengths[index] = val)\n      ``\n    _ljust = (str, n) ->\n      (str = '')  if !str\n      diff = n - str.length\n      if diff > 0\n        str += (new Array(diff+1)).join(' ')\n      str\n    _append_line_arr = (_arr, preceding=0)->\n      for i in [0...preceding]\n        _arr.unshift('')\n      _arr.length = _lengths.length\n      for x, i in _arr\n        _arr[i] = _ljust(x, _lengths[i])\n      outstr += \"| #{_arr.join(' | ')} |\\n\"\n      ``\n\n    sheeted = csv.sheeted()\n    outstr = \"\\n\"\n\n    for shtName, content of csvJson\n      _record_max(shtName.length, 0)\n      _sht = sheeted.sheet shtName, csv(content)\n      for cell, i in content.columns\n        _record_max(cell.length, i+1)\n      for row in _sht.rowArray\n        for cell, i in row\n          _record_max(cell.length, i+1)\n\n    for shtName, sheet of sheeted._sheets\n      _append_line_arr([shtName])\n      _append_line_arr(sheet.columns, 1)\n      _append_line_arr(row, 1)  for row in sheet.rowArray\n\n    outstr\n\n  markdownTable\n","###\ndefaultSurveyDetails\n--------------------\nThese values will be populated in the form builder and the user\nwill have the option to turn them on or off.\n\nDetails pulled from ODK documents / google docs. Notably this one:\n  https://docs.google.com/spreadsheet/ccc?key=0AgpC5gsTSm_4dDRVOEprRkVuSFZUWTlvclJ6UFRvdFE#gid=0\n###\n\n_ = require 'underscore'\nBackbone = require 'backbone'\n$utils = require './model.utils'\n\nmodule.exports = do ->\n  configs = {}\n  configs.defaultSurveyDetails =\n    start_time:\n      name: \"start\"\n      label: \"start time\"\n      description: \"Records when the survey was begun\"\n      default: true\n    end_time:\n      name: \"end\"\n      label: \"end time\"\n      description: \"records when the survey was marked as completed\"\n      default: true\n    today:\n      name: \"today\"\n      label: \"today\"\n      description: \"includes today's date\"\n      default: false\n    username:\n      name: \"username\"\n      label: \"username\"\n      description: \"includes interviewer's username\"\n      default: false\n    simserial:\n      name: \"simserial\"\n      label: \"sim serial\"\n      description: \"records the serial number of the network sim card\"\n      default: false\n    subscriberid:\n      name: \"subscriberid\"\n      label: \"subscriber id\"\n      description: \"records the subscriber id of the sim card\"\n      default: false\n    deviceid:\n      name: \"deviceid\"\n      label: \"device id\"\n      aliases: [\"imei\"]\n      description: \"Records the internal device ID number (works on Android phones)\"\n      default: false\n    phoneNumber:\n      name: \"phonenumber\"\n      label: \"phone number\"\n      description: \"Records the device's phone number, when available\"\n      default: false\n    audit:\n      name: \"audit\"\n      label: \"audit\"\n      description: \"Records the behavior of enumerators as they navigate through a form\"\n      default: false\n\n  do ->\n    class SurveyDetailSchemaItem extends Backbone.Model\n      _forSurvey: ()->\n        name: @get(\"name\")\n        label: @get(\"label\")\n        description: @get(\"description\")\n\n    class configs.SurveyDetailSchema extends Backbone.Collection\n      model: SurveyDetailSchemaItem\n      typeList: ()->\n        unless @_typeList\n          @_typeList = (item.get(\"name\")  for item in @models)\n        @_typeList\n\n  configs.surveyDetailSchema = new configs.SurveyDetailSchema(_.values(configs.defaultSurveyDetails))\n\n  ###\n  Default values for rows of each question type\n  ###\n  configs.defaultsGeneral =\n    label:\n      value: 'New Question'\n  configs.defaultsForType =\n    geotrace:\n      label:\n        value: \"Record a line\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    geoshape:\n      label:\n        value: \"Record an area\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    geopoint:\n      label:\n        value: \"Record your current location\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    image:\n      label:\n        value: \"Point and shoot! Use the camera to take a photo\"\n    video:\n      label:\n        value: \"Use the camera to record a video\"\n    audio:\n      label:\n        value: \"Use the camera's microphone to record a sound\"\n    file:\n      label:\n        value: \"Upload a file\"\n    note:\n      label:\n        value: \"This note can be read out loud\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    integer:\n      label:\n        value: \"Enter a number\"\n    barcode:\n      label:\n        value: \"Use the camera to scan a barcode\"\n    decimal:\n      label:\n        value: \"Enter a number\"\n    date:\n      label:\n        value: \"Enter a date\"\n    range:\n      label:\n        value: \"Enter a number within a specified range\"\n    calculate:\n      calculation:\n        value: \"\"\n      label:\n        value: \"calculation\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    datetime:\n      label:\n        value: \"Enter a date and time\"\n    time:\n      label:\n        value: \"Enter a time\"\n    acknowledge:\n      label:\n        value: \"Acknowledge\"\n\n  configs.paramTypes = {\n    number: 'number',\n    boolean: 'boolean'\n  }\n\n  configs.questionParams = {\n    range: {\n      start: {\n        type: configs.paramTypes.number\n        defaultValue: 0\n      }\n      end: {\n        type: configs.paramTypes.number\n        defaultValue: 10\n      }\n      step: {\n        type: configs.paramTypes.number\n        defaultValue: 1\n      }\n    }\n    image: {\n      'max-pixels': {\n        type: configs.paramTypes.number\n        defaultValue: 1024\n      }\n    }\n    select_one: {\n      randomize: {\n        type: configs.paramTypes.boolean\n      }\n      seed: {\n        type: configs.paramTypes.number\n      }\n    }\n    select_multiple: {\n      randomize: {\n        type: configs.paramTypes.boolean\n      }\n      seed: {\n        type: configs.paramTypes.number\n      }\n    }\n  }\n\n  configs.columns = [\n    \"type\",\n    \"name\",\n    \"label\",\n    \"hint\",\n    \"guidance_hint\",\n    \"required\",\n    \"relevant\",\n    \"default\",\n    \"constraint\"\n  ]\n\n  configs.lookupRowType = do->\n    typeLabels = [\n      [\"note\", \"Note\", preventRequired: true],\n      [\"acknowledge\", \"Acknowledge\"],\n      [\"text\", \"Text\"], # expects text\n      [\"integer\", \"Integer\"], #e.g. 42\n      [\"decimal\", \"Decimal\"], #e.g. 3.14\n      [\"range\", \"Range\"], #e.g. 1-5\n      [\"geopoint\", \"Geopoint (GPS)\"], # Can use satelite GPS coordinates\n      [\"geotrace\", \"Geotrace (GPS)\"], # Can use satelite GPS coordinates\n      [\"geoshape\", \"Geoshape (GPS)\"], # Can use satelite GPS coordinates\n      [\"image\", \"Image\", isMedia: true], # Can use phone camera, for example\n      [\"barcode\", \"Barcode / QR code\"], # Can scan a barcode using the phone camera\n      [\"date\", \"Date\"], #e.g. (4 July, 1776)\n      [\"time\", \"Time\"], #e.g. (4 July, 1776)\n      [\"datetime\", \"Date and Time\"], #e.g. (2012-Jan-4 3:04PM)\n      [\"audio\", \"Audio\", isMedia: true], # Can use phone microphone to record audio\n      [\"video\", \"Video\", isMedia: true], # Can use phone camera to record video\n      [\"file\", \"File\"],\n      [\"calculate\", \"Calculate\"],\n      [\"select_one\", \"Select\", orOtherOption: true, specifyChoice: true],\n      [\"score\", \"Score\"],\n      [\"score__row\", \"Score Row\"],\n      [\"rank\", \"Rank\"],\n      [\"kobomatrix\", \"Advanced Matrix\"],\n      [\"rank__level\", \"Rank Level\"],\n      [\"select_multiple\", \"Multiple choice\", orOtherOption: true, specifyChoice: true]\n    ]\n\n    class Type\n      constructor: ([@name, @label, opts])->\n        opts = {}  unless opts\n        _.extend(@, opts)\n\n    types = (new Type(arr) for arr in typeLabels)\n\n    exp = (typeId)->\n      for tp in types when tp.name is typeId\n        output = tp\n      output\n\n    exp.typeSelectList = do ->\n      () -> types\n\n    exp\n\n  configs.autoset_kuid = true\n\n  configs.columnOrder = do ->\n    (key)->\n      if -1 is configs.columns.indexOf key\n        configs.columns.push(key)\n      configs.columns.indexOf key\n\n  configs.newRowDetails =\n    name:\n      value: \"\"\n    type:\n      value: \"text\"\n    hint:\n      value: \"\"\n      _hideUnlessChanged: true\n    guidance_hint:\n      value: \"\"\n    required:\n      value: false\n      _hideUnlessChanged: true\n    relevant:\n      value: \"\"\n      _hideUnlessChanged: true\n    default:\n      value: \"\"\n      _hideUnlessChanged: true\n    constraint:\n      value: \"\"\n      _hideUnlessChanged: true\n    constraint_message:\n      value: \"\"\n      _hideUnlessChanged: true\n    tags:\n      value: ''\n      _hideUnlessChanged: true\n    appearance:\n      value: ''\n      _hideUnlessChanged: true\n\n  configs.newGroupDetails =\n    name:\n      value: ->\n        \"group_#{$utils.txtid()}\"\n    label:\n      value: \"Group\"\n    type:\n      value: \"group\"\n    _isRepeat:\n      value: false\n    relevant:\n      value: \"\"\n      _hideUnlessChanged: true\n    appearance:\n      value: ''\n      _hideUnlessChanged: true\n\n\n  configs.question_types = {}\n\n  ###\n  String representations of boolean values which are accepted as true from the XLSForm.\n  ###\n\n  configs.truthyValues = [\n    \"yes\",\n    \"YES\",\n    \"true\",\n    \"true()\",\n    \"TRUE\",\n  ]\n  configs.falsyValues = [\n    \"no\",\n    \"NO\",\n    \"false\",\n    \"false()\",\n    \"FALSE\",\n  ]\n\n  # Alternative: XLF.configs.boolOutputs = {\"true\": \"yes\", \"false\": \"no\"}\n  configs.boolOutputs = {\"true\": \"true\", \"false\": \"false\"}\n\n  configs\n","var map = {\n\t\"./af\": 138,\n\t\"./af.js\": 138,\n\t\"./ar\": 139,\n\t\"./ar-dz\": 140,\n\t\"./ar-dz.js\": 140,\n\t\"./ar-kw\": 141,\n\t\"./ar-kw.js\": 141,\n\t\"./ar-ly\": 142,\n\t\"./ar-ly.js\": 142,\n\t\"./ar-ma\": 143,\n\t\"./ar-ma.js\": 143,\n\t\"./ar-sa\": 144,\n\t\"./ar-sa.js\": 144,\n\t\"./ar-tn\": 145,\n\t\"./ar-tn.js\": 145,\n\t\"./ar.js\": 139,\n\t\"./az\": 146,\n\t\"./az.js\": 146,\n\t\"./be\": 147,\n\t\"./be.js\": 147,\n\t\"./bg\": 148,\n\t\"./bg.js\": 148,\n\t\"./bm\": 149,\n\t\"./bm.js\": 149,\n\t\"./bn\": 150,\n\t\"./bn.js\": 150,\n\t\"./bo\": 151,\n\t\"./bo.js\": 151,\n\t\"./br\": 152,\n\t\"./br.js\": 152,\n\t\"./bs\": 153,\n\t\"./bs.js\": 153,\n\t\"./ca\": 154,\n\t\"./ca.js\": 154,\n\t\"./cs\": 155,\n\t\"./cs.js\": 155,\n\t\"./cv\": 156,\n\t\"./cv.js\": 156,\n\t\"./cy\": 157,\n\t\"./cy.js\": 157,\n\t\"./da\": 158,\n\t\"./da.js\": 158,\n\t\"./de\": 159,\n\t\"./de-at\": 160,\n\t\"./de-at.js\": 160,\n\t\"./de-ch\": 161,\n\t\"./de-ch.js\": 161,\n\t\"./de.js\": 159,\n\t\"./dv\": 162,\n\t\"./dv.js\": 162,\n\t\"./el\": 163,\n\t\"./el.js\": 163,\n\t\"./en-SG\": 164,\n\t\"./en-SG.js\": 164,\n\t\"./en-au\": 165,\n\t\"./en-au.js\": 165,\n\t\"./en-ca\": 166,\n\t\"./en-ca.js\": 166,\n\t\"./en-gb\": 167,\n\t\"./en-gb.js\": 167,\n\t\"./en-ie\": 168,\n\t\"./en-ie.js\": 168,\n\t\"./en-il\": 169,\n\t\"./en-il.js\": 169,\n\t\"./en-nz\": 170,\n\t\"./en-nz.js\": 170,\n\t\"./eo\": 171,\n\t\"./eo.js\": 171,\n\t\"./es\": 172,\n\t\"./es-do\": 173,\n\t\"./es-do.js\": 173,\n\t\"./es-us\": 174,\n\t\"./es-us.js\": 174,\n\t\"./es.js\": 172,\n\t\"./et\": 175,\n\t\"./et.js\": 175,\n\t\"./eu\": 176,\n\t\"./eu.js\": 176,\n\t\"./fa\": 177,\n\t\"./fa.js\": 177,\n\t\"./fi\": 178,\n\t\"./fi.js\": 178,\n\t\"./fo\": 179,\n\t\"./fo.js\": 179,\n\t\"./fr\": 180,\n\t\"./fr-ca\": 181,\n\t\"./fr-ca.js\": 181,\n\t\"./fr-ch\": 182,\n\t\"./fr-ch.js\": 182,\n\t\"./fr.js\": 180,\n\t\"./fy\": 183,\n\t\"./fy.js\": 183,\n\t\"./ga\": 184,\n\t\"./ga.js\": 184,\n\t\"./gd\": 185,\n\t\"./gd.js\": 185,\n\t\"./gl\": 186,\n\t\"./gl.js\": 186,\n\t\"./gom-latn\": 187,\n\t\"./gom-latn.js\": 187,\n\t\"./gu\": 188,\n\t\"./gu.js\": 188,\n\t\"./he\": 189,\n\t\"./he.js\": 189,\n\t\"./hi\": 190,\n\t\"./hi.js\": 190,\n\t\"./hr\": 191,\n\t\"./hr.js\": 191,\n\t\"./hu\": 192,\n\t\"./hu.js\": 192,\n\t\"./hy-am\": 193,\n\t\"./hy-am.js\": 193,\n\t\"./id\": 194,\n\t\"./id.js\": 194,\n\t\"./is\": 195,\n\t\"./is.js\": 195,\n\t\"./it\": 196,\n\t\"./it-ch\": 197,\n\t\"./it-ch.js\": 197,\n\t\"./it.js\": 196,\n\t\"./ja\": 198,\n\t\"./ja.js\": 198,\n\t\"./jv\": 199,\n\t\"./jv.js\": 199,\n\t\"./ka\": 200,\n\t\"./ka.js\": 200,\n\t\"./kk\": 201,\n\t\"./kk.js\": 201,\n\t\"./km\": 202,\n\t\"./km.js\": 202,\n\t\"./kn\": 203,\n\t\"./kn.js\": 203,\n\t\"./ko\": 204,\n\t\"./ko.js\": 204,\n\t\"./ku\": 205,\n\t\"./ku.js\": 205,\n\t\"./ky\": 206,\n\t\"./ky.js\": 206,\n\t\"./lb\": 207,\n\t\"./lb.js\": 207,\n\t\"./lo\": 208,\n\t\"./lo.js\": 208,\n\t\"./lt\": 209,\n\t\"./lt.js\": 209,\n\t\"./lv\": 210,\n\t\"./lv.js\": 210,\n\t\"./me\": 211,\n\t\"./me.js\": 211,\n\t\"./mi\": 212,\n\t\"./mi.js\": 212,\n\t\"./mk\": 213,\n\t\"./mk.js\": 213,\n\t\"./ml\": 214,\n\t\"./ml.js\": 214,\n\t\"./mn\": 215,\n\t\"./mn.js\": 215,\n\t\"./mr\": 216,\n\t\"./mr.js\": 216,\n\t\"./ms\": 217,\n\t\"./ms-my\": 218,\n\t\"./ms-my.js\": 218,\n\t\"./ms.js\": 217,\n\t\"./mt\": 219,\n\t\"./mt.js\": 219,\n\t\"./my\": 220,\n\t\"./my.js\": 220,\n\t\"./nb\": 221,\n\t\"./nb.js\": 221,\n\t\"./ne\": 222,\n\t\"./ne.js\": 222,\n\t\"./nl\": 223,\n\t\"./nl-be\": 224,\n\t\"./nl-be.js\": 224,\n\t\"./nl.js\": 223,\n\t\"./nn\": 225,\n\t\"./nn.js\": 225,\n\t\"./pa-in\": 226,\n\t\"./pa-in.js\": 226,\n\t\"./pl\": 227,\n\t\"./pl.js\": 227,\n\t\"./pt\": 228,\n\t\"./pt-br\": 229,\n\t\"./pt-br.js\": 229,\n\t\"./pt.js\": 228,\n\t\"./ro\": 230,\n\t\"./ro.js\": 230,\n\t\"./ru\": 231,\n\t\"./ru.js\": 231,\n\t\"./sd\": 232,\n\t\"./sd.js\": 232,\n\t\"./se\": 233,\n\t\"./se.js\": 233,\n\t\"./si\": 234,\n\t\"./si.js\": 234,\n\t\"./sk\": 235,\n\t\"./sk.js\": 235,\n\t\"./sl\": 236,\n\t\"./sl.js\": 236,\n\t\"./sq\": 237,\n\t\"./sq.js\": 237,\n\t\"./sr\": 238,\n\t\"./sr-cyrl\": 239,\n\t\"./sr-cyrl.js\": 239,\n\t\"./sr.js\": 238,\n\t\"./ss\": 240,\n\t\"./ss.js\": 240,\n\t\"./sv\": 241,\n\t\"./sv.js\": 241,\n\t\"./sw\": 242,\n\t\"./sw.js\": 242,\n\t\"./ta\": 243,\n\t\"./ta.js\": 243,\n\t\"./te\": 244,\n\t\"./te.js\": 244,\n\t\"./tet\": 245,\n\t\"./tet.js\": 245,\n\t\"./tg\": 246,\n\t\"./tg.js\": 246,\n\t\"./th\": 247,\n\t\"./th.js\": 247,\n\t\"./tl-ph\": 248,\n\t\"./tl-ph.js\": 248,\n\t\"./tlh\": 249,\n\t\"./tlh.js\": 249,\n\t\"./tr\": 250,\n\t\"./tr.js\": 250,\n\t\"./tzl\": 251,\n\t\"./tzl.js\": 251,\n\t\"./tzm\": 252,\n\t\"./tzm-latn\": 253,\n\t\"./tzm-latn.js\": 253,\n\t\"./tzm.js\": 252,\n\t\"./ug-cn\": 254,\n\t\"./ug-cn.js\": 254,\n\t\"./uk\": 255,\n\t\"./uk.js\": 255,\n\t\"./ur\": 256,\n\t\"./ur.js\": 256,\n\t\"./uz\": 257,\n\t\"./uz-latn\": 258,\n\t\"./uz-latn.js\": 258,\n\t\"./uz.js\": 257,\n\t\"./vi\": 259,\n\t\"./vi.js\": 259,\n\t\"./x-pseudo\": 260,\n\t\"./x-pseudo.js\": 260,\n\t\"./yo\": 261,\n\t\"./yo.js\": 261,\n\t\"./zh-cn\": 262,\n\t\"./zh-cn.js\": 262,\n\t\"./zh-hk\": 263,\n\t\"./zh-hk.js\": 263,\n\t\"./zh-tw\": 264,\n\t\"./zh-tw.js\": 264\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 356;","_ = require 'underscore'\nBackbone = require 'backbone'\n$ = require 'jquery'\n$skipLogicParser = require './model.skipLogicParser'\n_t = require('utils').t\n\nmodule.exports = do ->\n  skipLogicHelpers = {}\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Factories.RowDetail.SkipLogic.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class skipLogicHelpers.SkipLogicHelperFactory\n    constructor: (@model_factory, @view_factory, @survey, @current_question, @serialized_criteria) ->\n    create_presenter: (criterion_model, criterion_view) ->\n      return new skipLogicHelpers.SkipLogicPresenter criterion_model, criterion_view, @current_question, @survey, @view_factory\n    create_builder: () ->\n      return new skipLogicHelpers.SkipLogicBuilder @model_factory, @view_factory, @survey, @current_question, @\n    create_context: () ->\n      return new skipLogicHelpers.SkipLogicHelperContext @model_factory, @view_factory, @, @serialized_criteria\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Facades.RowDetail.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class skipLogicHelpers.SkipLogicPresentationFacade\n    constructor: (@model_factory, @helper_factory, @view_factory) ->\n    initialize: () ->\n      @context ?= @helper_factory.create_context()\n    serialize: () ->\n      @context ?= @helper_factory.create_context()\n      return @context.serialize()\n    render: (target) ->\n      @context ?= @helper_factory.create_context()\n      @context.render target\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Presentation.RowDetail.SkipLogic.Presenter.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class skipLogicHelpers.SkipLogicPresenter\n    constructor: (@model, @view, @current_question, @survey, @view_factory) ->\n      @view.presenter = @\n      if @survey\n        update_choice_list = (choicelist_cid) =>\n          question = @model._get_question()\n\n          if question && question._isSelectQuestion() && question.getList().cid == choicelist_cid\n\n            current_response_value = @model.get('response_value').get('cid')\n\n            if !question.getList().options.get current_response_value\n              @dispatcher.trigger 'remove:presenter', @model.cid\n            else\n              options = _.map question.getList().options.models, (response) ->\n                text: response.get('label')\n                value: response.cid\n\n              response_picker_model = @view.response_value_view.options\n\n              response_picker_model.set 'options', options\n              @view.response_value_view.val(current_response_value)\n              @view.response_value_view.$el.trigger('change')\n              @model.change_response current_response_value\n\n        @survey.on 'choice-list-update', update_choice_list, @\n\n        @survey.on 'remove-option', update_choice_list, @\n\n        @survey.on 'row-detail-change', (row, key) =>\n          if @destination\n            if key == 'label'\n              @render(@destination)\n        , @\n      else\n        console.error \"this.survey is not yet available\"\n\n    change_question: (question_name) ->\n      @model.change_question question_name\n\n      @question = @model._get_question()\n      question_type = @question.get_type()\n      @question.on 'remove', () =>\n        @dispatcher.trigger 'remove:presenter', @model.cid\n\n      @view.change_operator @view_factory.create_operator_picker question_type\n      @view.operator_picker_view.val @model.get('operator').get_value()\n      @view.attach_operator()\n\n      @change_response_view question_type, @model.get('operator').get_type()\n\n      @finish_changing()\n\n    change_operator: (operator_id) ->\n      @model.change_operator operator_id\n\n      @change_response_view @model._get_question().get_type(), @model.get('operator').get_type()\n\n      @finish_changing()\n\n    change_response: (response_text) ->\n      @model.change_response response_text\n      @finish_changing()\n\n    change_response_view: (question_type, operator_type) ->\n      response_view = @view_factory.create_response_value_view @model._get_question(), question_type, operator_type\n      response_view.model = @model.get 'response_value'\n\n      @view.change_response response_view\n      @view.attach_response()\n\n      response_value = response_view.model.get('value')\n\n      question = @model._get_question()\n      if (question._isSelectQuestion())\n        rV = _.find(question.getList().options.models, (option) ->\n          option.get('name') == response_value)\n        if (rV && rV.cid)\n          response_value = rV.cid\n\n      @view.response_value_view.val response_value\n      response_view.$el.trigger('change')\n\n\n    finish_changing: () ->\n      @dispatcher.trigger 'changed:model', @\n\n    is_valid: () ->\n      if !@model._get_question()\n        return false\n      else if @model.get('operator').get_type().id == 1\n        return true\n      else if @model.get('response_value').get('value')  in ['', undefined] || @model.get('response_value').isValid() == false\n        return false\n      else\n        return true\n\n    render: (@destination) ->\n      @view.question_picker_view.detach()\n      @view.question_picker_view = @view_factory.create_question_picker @current_question\n      @view.render()\n      @view.question_picker_view.val @model.get('question_cid')\n      @view.operator_picker_view.val @model.get('operator').get_value()\n      response_value = @model.get('response_value')?.get('value')\n\n      question = @model._get_question()\n      if (question && question._isSelectQuestion())\n        response_value = _.find(question.getList().options.models, (option) ->\n          option.get('name') == response_value)?.cid\n      @view.response_value_view.val response_value\n      @view.attach_to @destination\n      @dispatcher.trigger 'rendered', @\n\n    serialize: () ->\n      @model.serialize()\n\n  class skipLogicHelpers.SkipLogicBuilder\n    constructor: (@model_factory, @view_factory, @survey, @current_question, @helper_factory) -> return\n    build_criterion_builder: (serialized_criteria) ->\n      if serialized_criteria == ''\n        return [[@build_empty_criterion()], 'and']\n\n      try\n        parsed = @_parse_skip_logic_criteria serialized_criteria\n\n        criteria = _.filter(_.map(parsed.criteria, (criterion) =>\n            @criterion = criterion\n            @build_criterion()\n          )\n        , (item) -> !!item)\n        if criteria.length == 0\n          criteria.push @build_empty_criterion()\n\n      catch e\n        Raven?.captureException new Error('could not parse skip logic. falling back to hand-coded'), extra:\n          criteria: serialized_criteria\n        return false\n      return [criteria, parsed.operator]\n\n    _parse_skip_logic_criteria: (criteria) ->\n      return $skipLogicParser criteria\n\n    build_operator_logic: (question_type) =>\n      return [\n        @build_operator_model(question_type, @_operator_type().symbol[@criterion.operator]),\n        @view_factory.create_operator_picker question_type\n      ]\n\n    build_operator_model: (question_type, symbol) ->\n      operator_type = @_operator_type()\n      return @model_factory.create_operator(\n        (if operator_type.type == 'existence' then 'existence' else question_type.equality_operator_type),\n        symbol,\n        operator_type.id)\n\n    _operator_type: () ->\n      return _.find skipLogicHelpers.operator_types, (op_type) =>\n          @criterion?.operator in op_type.parser_name\n\n    build_criterion_logic: (operator_model, operator_picker_view, response_value_view) ->\n      criterion_model = @model_factory.create_criterion_model()\n      criterion_model.set('operator', operator_model)\n\n      criterion_view = @view_factory.create_criterion_view(\n        @view_factory.create_question_picker(@current_question),\n        operator_picker_view,\n        response_value_view\n      )\n      criterion_view.model = criterion_model\n      return @helper_factory.create_presenter criterion_model, criterion_view\n\n    build_criterion: () =>\n      question = @_get_question()\n      if !question\n        return false\n\n      if !(question in @questions())\n        throw 'question is not selectable'\n\n      question_type = question.get_type()\n\n      [operator_model, operator_picker_view] = @build_operator_logic question_type\n\n      response_value_view = @view_factory.create_response_value_view question, question_type, @_operator_type()\n\n      presenter = @build_criterion_logic operator_model, operator_picker_view, response_value_view\n      presenter.model.change_question question.cid\n\n      response_value = if question._isSelectQuestion() then _.find(question.getList().options.models, (option) => return option.get('name') == @criterion.response_value)?.cid else @criterion.response_value\n      presenter.model.change_response response_value || ''\n      response_value_view.model = presenter.model.get 'response_value'\n      response_value_view.val(response_value)\n\n      return presenter\n    _get_question: () ->\n      @survey.findRowByName @criterion.name\n\n    build_empty_criterion: () =>\n      operator_picker_view = @view_factory.create_operator_picker null\n      response_value_view = @view_factory.create_response_value_view null\n\n      return @build_criterion_logic @model_factory.create_operator('empty'), operator_picker_view, response_value_view\n\n    questions: () ->\n      @selectable = @current_question.selectableRows() || @selectable\n      return @selectable\n\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Presentation.RowDetail.SkipLogic.State.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class skipLogicHelpers.SkipLogicHelperContext\n    render: (@destination) ->\n      if @destination?\n        @destination.empty()\n        @state.render @destination\n      return\n    serialize: () ->\n      return @state.serialize()\n    use_criterion_builder_helper: () ->\n      @builder ?= @helper_factory.create_builder()\n      presenters = @builder.build_criterion_builder(@state.serialize())\n\n      if presenters == false\n        @state = null\n      else\n        @state = new skipLogicHelpers.SkipLogicCriterionBuilderHelper(presenters[0], presenters[1], @builder, @view_factory, @)\n        @render @destination\n      return\n    use_hand_code_helper: () ->\n      @state = new skipLogicHelpers.SkipLogicHandCodeHelper(@state.serialize(), @builder, @view_factory, @)\n      @render @destination\n      return\n    use_mode_selector_helper : () ->\n      @helper_factory.survey.off null, null, @state\n      @state = new skipLogicHelpers.SkipLogicModeSelectorHelper(@view_factory, @)\n      @render @destination\n      return\n    constructor: (@model_factory, @view_factory, @helper_factory, serialized_criteria) ->\n      @state = serialize: () -> return serialized_criteria\n      if !serialized_criteria? || serialized_criteria == ''\n        serialized_criteria = ''\n        @use_mode_selector_helper()\n      else\n        @use_criterion_builder_helper()\n\n      if !@state?\n        @state = serialize: () -> return serialized_criteria\n        @use_hand_code_helper()\n\n  class skipLogicHelpers.SkipLogicCriterionBuilderHelper\n    determine_criterion_delimiter_visibility: () ->\n      if @presenters.length < 2\n        @$criterion_delimiter.hide()\n      else\n        @$criterion_delimiter.show()\n    render: (destination) ->\n      @view.render().attach_to destination\n      @$criterion_delimiter = @view.$(\".skiplogic__delimselect\")\n      @$add_new_criterion_button = @view.$('.skiplogic__addcriterion')\n\n      @determine_criterion_delimiter_visibility()\n\n      @destination = @view.$('.skiplogic__criterialist')\n\n      _.each @presenters, (presenter) =>\n        presenter.render @destination\n\n    serialize: () ->\n      serialized = _.map @presenters, (presenter) ->\n        presenter.serialize()\n      _.filter(serialized, (crit) -> crit).join(' ' + @view.criterion_delimiter + ' ')\n    add_empty: () ->\n      presenter = @builder.build_empty_criterion()\n      presenter.dispatcher = @dispatcher\n      presenter.serialize_all = _.bind @serialize, @\n      @presenters.push presenter\n      presenter.render @destination\n      @determine_criterion_delimiter_visibility()\n    remove: (id) ->\n      _.each @presenters, (presenter, index) =>\n        if presenter? && presenter.model.cid == id\n          presenter = @presenters.splice(index, 1)[0]\n          presenter.view.$el.remove()\n          @builder.survey.off null, null, presenter\n          @determine_add_new_criterion_visibility()\n\n      if @presenters.length == 0\n        @context.use_mode_selector_helper()\n\n    determine_add_new_criterion_visibility: () ->\n      if @all_presenters_are_valid()\n        action = 'show()'\n        @$add_new_criterion_button?.show()\n      else\n        action = 'hide()'\n        @$add_new_criterion_button?.hide()\n\n      if !@$add_new_criterion_button\n        Raven?.captureException(\"@$add_new_criterion_button is not defined. cannot call #{action} [inside of determine_add_new_criterion_visibility]\")\n\n    constructor: (@presenters, separator, @builder, @view_factory, @context) ->\n      @view = @view_factory.create_criterion_builder_view()\n      @view.criterion_delimiter = (separator || 'and').toLowerCase()\n      @view.facade = @\n      @dispatcher = _.clone Backbone.Events\n      @dispatcher.on 'remove:presenter', (cid) =>\n        @remove cid\n\n\n      @dispatcher.on 'changed:model', (presenter) =>\n        @determine_add_new_criterion_visibility()\n\n      @dispatcher.on 'rendered', (presenter) =>\n        @determine_add_new_criterion_visibility()\n\n      removeInvalidPresenters = () =>\n        questions = @builder.questions()\n        presenters_to_be_removed = []\n        _.each @presenters, (presenter) ->\n          if presenter.model._get_question() && !(presenter.model._get_question() in questions)\n            presenters_to_be_removed.push presenter.model.cid\n\n        for presenter in presenters_to_be_removed\n          @remove presenter\n\n        if @presenters.length == 0\n          @context.use_mode_selector_helper()\n\n      @builder.survey.on 'sortablestop', removeInvalidPresenters, @\n\n      removeInvalidPresenters()\n\n      _.each @presenters, (presenter) =>\n        presenter.dispatcher = @dispatcher\n        presenter.serialize_all = _.bind @serialize, @\n\n    all_presenters_are_valid: () ->\n        return !_.find @presenters, (presenter) -> !presenter.is_valid()\n\n    switch_editing_mode: () ->\n      @builder.build_hand_code_criteria @serialize()\n\n  class skipLogicHelpers.SkipLogicHandCodeHelper\n    render: ($destination) ->\n      $destination.append @$parent\n      @textarea.render().attach_to @$parent\n      @button.render().attach_to @$parent\n      @button.bind_event 'click', () => @context.use_mode_selector_helper()\n    serialize: () ->\n      @textarea.$el.val() || @criteria\n    constructor: (@criteria, @builder, @view_factory, @context) ->\n      @$parent = $('<div>')\n      @textarea = @view_factory.create_textarea @criteria, 'skiplogic__handcode-edit'\n      @button = @view_factory.create_button '<i class=\"fa fa-trash-o\"></i>', 'skiplogic-handcode__cancel'\n\n  class skipLogicHelpers.SkipLogicModeSelectorHelper\n    render: ($destination) ->\n      $parent = $('<div>')\n      $destination.append $parent\n      @criterion_builder_button.render().attach_to $parent\n      @handcode_button.render().attach_to $parent\n\n      @criterion_builder_button.bind_event('click', () =>\n        @context.view_factory.survey.trigger('change')\n        @context.use_criterion_builder_helper()\n      )\n      @handcode_button.bind_event('click', () =>\n        @context.view_factory.survey.trigger('change')\n        @context.use_hand_code_helper()\n      )\n\n    serialize: () ->\n      return ''\n    constructor: (view_factory, @context) ->\n      @criterion_builder_button = view_factory.create_button '<i class=\"fa fa-plus\"></i> ' + _t(\"Add a condition\"), 'skiplogic__button skiplogic__select-builder'\n      @handcode_button = view_factory.create_button '<i>${}</i> ' + _t(\"Manually enter your skip logic in XLSForm code\"), 'skiplogic__button skiplogic__select-handcode'\n      ###@view = @view_factory.create_skip_logic_picker_view(context)###\n    switch_editing_mode: () -> return\n\n  operators =\n    EXISTENCE: 1\n    EQUALITY: 2\n    GREATER_THAN: 3\n    GREATER_THAN_EQ: 4\n  ops =\n    EX: operators.EXISTENCE\n    EQ: operators.EQUALITY\n    GT: operators.GREATER_THAN\n    GE: operators.GREATER_THAN_EQ\n\n  skipLogicHelpers.question_types =\n    default:\n      operators: [\n        ops.EX #1\n        ops.EQ #2\n      ]\n      equality_operator_type: 'text'\n      response_type: 'text'\n      name: 'default'\n    select_one:\n      operators: [\n        ops.EQ #2\n        ops.EX #1\n      ]\n      equality_operator_type: 'text'\n      response_type: 'dropdown'\n      name: 'select_one'\n    select_multiple:\n      operators: [\n        ops.EQ #2\n        ops.EX #1\n      ]\n      equality_operator_type: 'select_multiple'\n      response_type: 'dropdown'\n      name: 'select_multiple'\n    integer:\n      operators: [\n        ops.GT #3\n        ops.EX #1\n        ops.EQ #2\n        ops.GE #4\n      ]\n      equality_operator_type: 'basic'\n      response_type: 'integer'\n      name: 'integer'\n\n    # rank:\n    #   operators: [\n    #     ops.EX #1\n    #     ops.EQ #2\n    #   ]\n    #   equality_operator_type: 'select_multiple'\n    #   response_type: 'dropdown'\n    #   name: 'rank'\n    # rank__item:\n    #   operators: [\n    #     ops.EX #1\n    #     ops.EQ #2\n    #   ]\n    #   equality_operator_type: 'select_multiple'\n    #   response_type: 'dropdown'\n    #   name: 'rank_item'\n\n    # score:\n    #   operators: [\n    #     ops.EX #1\n    #     ops.EQ #2\n    #   ]\n    #   equality_operator_type: 'select_multiple'\n    #   response_type: 'dropdown'\n    #   name: 'score'\n    # score__row:\n    #   operators: [\n    #     ops.EX #1\n    #     ops.EQ #2\n    #   ]\n    #   equality_operator_type: 'select_multiple'\n    #   response_type: 'dropdown'\n    #   name: 'score_row'\n\n    barcode:\n      operators: [\n        ops.GT #3\n        ops.EX #1\n        ops.EQ #2\n        ops.GE #4\n      ]\n      equality_operator_type: 'text'\n      response_type: 'text'\n      name: 'barcode'\n    decimal:\n      operators: [\n        ops.EX #1\n        ops.EQ #2\n        ops.GT #3\n        ops.GE #4\n      ]\n      equality_operator_type: 'basic'\n      response_type: 'decimal'\n      name: 'decimal'\n    geopoint:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'geopoint'\n    geotrace:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'geotrace'\n    geoshape:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'geoshape'\n    image:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'image'\n    audio:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'audio'\n    video:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'video'\n    acknowledge:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'acknowledge'\n    date:\n      operators: [\n        ops.EQ #2\n        ops.GT #3\n        ops.GE #4\n      ]\n      equality_operator_type: 'date'\n      response_type: 'text'\n      name: 'date'\n\n\n  skipLogicHelpers.operator_types = [\n    {\n      id: 1\n      type: 'existence'\n      label: _t(\"Was Answered\")\n      negated_label: _t(\"Was not Answered\")\n      abbreviated_label: _t(\"Was Answered\")\n      abbreviated_negated_label: _t(\"Was not Answered\")\n      parser_name: ['ans_notnull','ans_null']\n      symbol: {\n        ans_notnull: '!=',\n        ans_null: '='\n      }\n      response_type: 'empty'\n    }\n    {\n      id: 2\n      type: 'equality'\n      label: ''\n      negated_label: _t(\"not\")\n      abbreviated_label: '='\n      abbreviated_negated_label: '!='\n      parser_name: ['resp_equals', 'resp_notequals', 'multiplechoice_selected', 'multiplechoice_notselected']\n      symbol: {\n        resp_equals: '=',\n        resp_notequals: '!=',\n        multiplechoice_selected: '='\n        multiplechoice_notselected: '!='\n      }\n    }\n    {\n      id: 3\n      type: 'equality'\n      label: _t(\"Greater Than\")\n      negated_label: _t(\"Less Than\")\n      abbreviated_label: '>'\n      abbreviated_negated_label: '<'\n      parser_name: ['resp_greater', 'resp_less']\n      symbol: {\n        resp_greater: '>'\n        resp_less: '<'\n      }\n    }\n    {\n      id: 4\n      type: 'equality'\n      label: _t(\"Greater Than or Equal to\")\n      negated_label: _t(\"Less Than or Equal to\")\n      abbreviated_label: '>='\n      abbreviated_negated_label: '<='\n      parser_name: ['resp_greaterequals', 'resp_lessequals']\n      symbol: {\n        resp_greaterequals: '>=',\n        resp_lessequals: '<='\n      }\n    }\n  ]\n\n  skipLogicHelpers\n","_ = require 'underscore'\nBackbone = require 'backbone'\nvalidation = require 'backbone-validation'\n$viewUtils = require './view.utils'\n$configs = require './model.configs'\n$rowDetailMixins = require './model.rowDetailMixins'\n\nmodule.exports = do ->\n  _.extend validation.validators, {\n    invalidChars: (value, attr, customValue)->\n      unless $viewUtils.Validator.__validators.invalidChars(value, customValue)\n        \"#{value} contains invalid characters\";\n    unique: (value, attr, customValue, model)->\n      rows = model.getSurvey().rows.pluck(model.key)\n      values = _.map(rows, (rd)-> rd.get('value'))\n      unless $viewUtils.Validator.__validators.unique(value, values)\n        \"Question name isn't unique\"\n      else\n        ``\n  }\n\n  _.extend(Backbone.Model.prototype, validation.mixin);\n\n  # TODO: Extend Backbone Validation\n  # _.extend Backbone.Model.prototype, Backbone.Validation.mixin\n\n  base = {}\n  class base.BaseCollection extends Backbone.Collection\n    constructor: (arg, opts)->\n      if arg and \"_parent\" of arg\n        # temporary error, during transition\n        throw new Error(\"_parent chould be assigned as property to 2nd argument to XLF.BaseCollection (not first)\")\n      @_parent = opts._parent  if opts and opts._parent\n      super(arg, opts)\n\n    getSurvey: ->\n      parent = @_parent\n      while parent._parent\n        parent = parent._parent\n      parent\n\n  class base.BaseModel extends Backbone.Model\n    constructor: (arg, opts)->\n      if opts and \"_parent\" of opts\n        @_parent = opts._parent\n      else if \"object\" is typeof arg and \"_parent\" of arg\n        @_parent = arg._parent\n        delete arg._parent\n      super(arg, opts)\n    parse: ->\n    linkUp: (ctx)->\n    finalize: ->\n    getValue: (what)->\n      if what\n        resp = @get(what)\n        if resp is undefined\n          throw new Error(\"Could not get value\")\n        if resp.getValue\n          resp = resp.getValue()\n      else\n        resp = @get(\"value\")\n      resp\n    setDetail: (what, value)->\n      if value.constructor is base.RowDetail\n        @set(what, value)\n      else\n        @set(what, new base.RowDetail({key:what, value: value}, {_parent: @}))\n    parentRow: ->\n      @_parent._parent\n    precedingRow: ->\n      ii = @_parent.models.indexOf(@)\n      if ii isnt 0\n        @_parent.at(ii-1)\n    nextRow: ->\n      ii = @_parent.models.indexOf(@)\n      @_parent.at(ii+1)\n    getSurvey: ->\n      parent = @_parent\n      if parent is null or parent is undefined\n        return null\n      while parent._parent or parent.collection\n        if parent._parent\n          parent = parent._parent\n        else if parent.collection and parent.collection._parent\n          parent = parent.collection._parent\n        else\n          break\n      parent\n\n  _innerValue = (val)->\n    # occasionally, the value passed to rowDetail\n    # is an object, which evaluates to true\n    if _.isObject(val)\n      val.value\n    else\n      val\n\n  class base.RowDetail extends base.BaseModel\n    idAttribute: \"name\"\n    validation: () =>\n      if @key == 'name'\n        return value:\n          unique: true\n          required: true\n      else if @key == 'calculation'\n        return value:\n          required: true\n      else if @key == 'label' && @_parent.constructor.key != 'group'\n        return value:\n          required: true\n      {}\n\n    constructor: ({@key, value}, opts)->\n      @_parent = opts._parent\n      if @key of $rowDetailMixins\n        _.extend(@, $rowDetailMixins[@key])\n      super()\n      # We should consider pulling the value from the CSV at this stage\n      # depending on the question type. truthy-CSV values should be set here\n      # In the quick fix, this is done in the view for 'required' rowDetails\n      # (grep: XLF.configs.truthyValues)\n\n      if value not in [undefined, null]\n        vals2set = {}\n        if _.isString(value) || _.isNumber(value)\n          vals2set.value = value\n        else if _.isObject(value) and \"value\" of value\n          _.extend vals2set, value\n        else\n          vals2set.value = value\n        @set(vals2set)\n\n      @_order = $configs.columnOrder(@key)\n      @postInitialize()\n\n    postInitialize: ()->\n    initialize: ()->\n      # todo: change \"_hideUnlessChanged\" to describe something about the form, not the representation of the form.\n      # E.g. undefinedUnlessChanged or definedIffChanged\n      if @get(\"_hideUnlessChanged\")\n        @hidden = true\n        @_oValue = @get(\"value\")\n        @on \"change\", ()->\n          @hidden = @get(\"value\") is @_oValue\n\n      @on \"change:value\", (rd, val, ctxt)=>\n        # @_parent.trigger \"change\", @key, val, ctxt\n        @_parent.trigger \"detail-change\", @key, val, ctxt\n        @getSurvey().trigger \"row-detail-change\", @_parent, @key, val, ctxt\n      # if @key is \"type\"\n      #   @on \"change:list\", (rd, val, ctxt)=>\n      #     @_parent.trigger \"change\", @key, val, ctxt\n\n      # when attributes change, register changes with parent survey\n      if @key in [\"name\", \"label\", \"hint\", \"guidance_hint\", \"required\",\n                  \"calculation\", \"default\", \"appearance\",\n                  \"constraint_message\", \"tags\"] or @key.match(/^.+::.+/)\n        @on \"change\", (changes)=>\n          @getSurvey().trigger \"change\", changes\n\n  base\n","function createFunctions(Reflux, PromiseFactory) {\n\n    const _ = Reflux.utils;\n\n    /**\n     * Returns a Promise for the triggered action\n     *\n     * @return {Promise}\n     *   Resolved by completed child action.\n     *   Rejected by failed child action.\n     *   If listenAndPromise'd, then promise associated to this trigger.\n     *   Otherwise, the promise is for next child action completion.\n     */\n    function triggerPromise() {\n        var me = this;\n        var args = arguments;\n\n        var canHandlePromise =\n            this.children.indexOf('completed') >= 0 &&\n            this.children.indexOf('failed') >= 0;\n\n        var createdPromise = new PromiseFactory(function(resolve, reject) {\n            // If `listenAndPromise` is listening\n            // patch `promise` w/ context-loaded resolve/reject\n            if (me.willCallPromise) {\n                _.nextTick(function() {\n                    var previousPromise = me.promise;\n                    me.promise = function (inputPromise) {\n                        inputPromise.then(resolve, reject);\n                        // Back to your regularly schedule programming.\n                        me.promise = previousPromise;\n                        return me.promise.apply(me, arguments);\n                    };\n                    me.trigger.apply(me, args);\n                });\n                return;\n            }\n\n            if (canHandlePromise) {\n                var removeSuccess = me.completed.listen(function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    removeSuccess();\n                    removeFailed();\n                    resolve(args.length > 1 ? args : args[0]);\n                });\n\n                var removeFailed = me.failed.listen(function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    removeSuccess();\n                    removeFailed();\n                    reject(args.length > 1 ? args : args[0]);\n                });\n            }\n\n            _.nextTick(function () {\n                me.trigger.apply(me, args);\n            });\n\n            if (!canHandlePromise) {\n                resolve();\n            }\n        });\n\n        // Ensure that the promise does trigger \"Uncaught (in promise)\" errors in console if no error handler is added\n        // See: https://github.com/reflux/reflux-promise/issues/4\n        createdPromise.catch(function() {});\n\n        return createdPromise;\n    }\n\n    /**\n     * Attach handlers to promise that trigger the completed and failed\n     * child publishers, if available.\n     *\n     * @param {Object} p The promise to attach to\n     */\n    function promise(p) {\n        var me = this;\n\n        var canHandlePromise =\n            this.children.indexOf('completed') >= 0 &&\n            this.children.indexOf('failed') >= 0;\n\n        if (!canHandlePromise){\n            throw new Error('Publisher must have \"completed\" and \"failed\" child publishers');\n        }\n\n        p.then(function(response) {\n            return me.completed(response);\n        }, function(error) {\n            return me.failed(error);\n        });\n    }\n\n    /**\n     * Subscribes the given callback for action triggered, which should\n     * return a promise that in turn is passed to `this.promise`\n     *\n     * @param {Function} callback The callback to register as event handler\n     */\n    function listenAndPromise(callback, bindContext) {\n        var me = this;\n        bindContext = bindContext || this;\n        this.willCallPromise = (this.willCallPromise || 0) + 1;\n\n        var removeListen = this.listen(function() {\n\n            if (!callback) {\n                throw new Error('Expected a function returning a promise but got ' + callback);\n            }\n\n            var args = arguments,\n                returnedPromise = callback.apply(bindContext, args);\n            return me.promise.call(me, returnedPromise);\n        }, bindContext);\n\n        return function () {\n          me.willCallPromise--;\n          removeListen.call(me);\n        };\n\n    }\n\n    return {\n        triggerPromise: triggerPromise,\n        promise: promise,\n        listenAndPromise: listenAndPromise\n    };\n}\n\n/**\n * Sets up reflux with Promise functionality\n */\nexport default function(promiseFactory) {\n    return function(Reflux) {\n        const { triggerPromise, promise, listenAndPromise } = createFunctions(Reflux, promiseFactory);\n        Reflux.PublisherMethods.triggerAsync = triggerPromise;\n        Reflux.PublisherMethods.promise = promise;\n        Reflux.PublisherMethods.listenAndPromise = listenAndPromise;\n    };\n}\n","/**\n * permissions related actions\n */\n\nimport Reflux from 'reflux';\nimport RefluxPromise from 'js/libs/reflux-promise';\nReflux.use(RefluxPromise(window.Promise));\nimport {dataInterface} from 'js/dataInterface';\nimport {\n  t,\n  notify\n} from 'js/utils';\n\nexport const permissionsActions = Reflux.createActions({\n  getConfig: {children: ['completed', 'failed']},\n  getAssetPermissions: {children: ['completed', 'failed']},\n  getCollectionPermissions: {children: ['completed', 'failed']},\n  bulkSetAssetPermissions: {children: ['completed', 'failed']},\n  assignCollectionPermission: {children: ['completed', 'failed']},\n  assignAssetPermission: {children: ['completed', 'failed']},\n  removeAssetPermission: {children: ['completed', 'failed']},\n  removeCollectionPermission: {children: ['completed', 'failed']},\n  copyPermissionsFrom: {children: ['completed', 'failed']},\n  assignPublicPerm: {children: ['completed', 'failed']},\n  setCollectionDiscoverability: {children: ['completed', 'failed']}\n});\n\n/**\n * New actions\n */\n\npermissionsActions.getConfig.listen(() => {\n  dataInterface.getPermissionsConfig()\n    .done(permissionsActions.getConfig.completed)\n    .fail(permissionsActions.getConfig.failed);\n});\n\npermissionsActions.getAssetPermissions.listen((assetUid) => {\n  dataInterface.getAssetPermissions(assetUid)\n    .done(permissionsActions.getAssetPermissions.completed)\n    .fail(permissionsActions.getAssetPermissions.failed);\n});\n\npermissionsActions.getCollectionPermissions.listen((uid) => {\n  dataInterface.getCollectionPermissions(uid)\n    .done(permissionsActions.getCollectionPermissions.completed)\n    .fail(permissionsActions.getCollectionPermissions.failed);\n});\n\n/**\n * For bulk setting permissions - wipes all current permissions, sets given ones\n *\n * @param {string} assetUid\n * @param {Object[]} perms - permissions to set\n */\npermissionsActions.bulkSetAssetPermissions.listen((assetUid, perm) => {\n  dataInterface.bulkSetAssetPermissions(assetUid, perm)\n    .done((permissionAssignments) => {\n      permissionsActions.bulkSetAssetPermissions.completed(permissionAssignments);\n    })\n    .fail(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.bulkSetAssetPermissions.failed();\n    });\n});\n\n/**\n * For adding single collection permission\n *\n * @param {string} uid - collection uid\n * @param {Object} perm - permission to add\n */\npermissionsActions.assignCollectionPermission.listen((uid, perm) => {\n  dataInterface.assignCollectionPermission(uid, perm)\n    .done(() => {\n      permissionsActions.getCollectionPermissions(uid);\n      permissionsActions.assignCollectionPermission.completed(uid);\n    })\n    .fail(() => {\n      permissionsActions.getCollectionPermissions(uid);\n      permissionsActions.assignCollectionPermission.failed(uid);\n    });\n});\n\n/**\n * For adding single asset permission\n *\n * @param {string} assetUid\n * @param {Object} perm - permission to add\n */\npermissionsActions.assignAssetPermission.listen((assetUid, perm) => {\n  dataInterface.assignAssetPermission(assetUid, perm)\n    .done(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.assignAssetPermission.completed(assetUid);\n    })\n    .fail(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.assignAssetPermission.failed(assetUid);\n    });\n});\n\n/**\n * For removing single permission\n *\n * @param {string} assetUid\n * @param {string} perm - permission url\n */\npermissionsActions.removeAssetPermission.listen((assetUid, perm) => {\n  dataInterface.removePermission(perm)\n    .done(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.removeAssetPermission.completed();\n    })\n    .fail(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.removeAssetPermission.failed();\n    });\n});\n\n/**\n * For removing single permission\n *\n * @param {string} uid\n * @param {string} perm - permission url\n */\npermissionsActions.removeCollectionPermission.listen((uid, perm) => {\n  dataInterface.removePermission(perm)\n    .done(() => {\n      permissionsActions.getCollectionPermissions(uid);\n      permissionsActions.removeCollectionPermission.completed();\n    })\n    .fail(() => {\n      permissionsActions.getCollectionPermissions(uid);\n      permissionsActions.removeCollectionPermission.failed();\n    });\n});\n\n/**\nOld actions\n */\n\n// copies permissions from one asset to other\npermissionsActions.copyPermissionsFrom.listen(function(sourceUid, targetUid) {\n  dataInterface.copyPermissionsFrom(sourceUid, targetUid)\n    .done(() => {\n      permissionsActions.getAssetPermissions(targetUid);\n      permissionsActions.copyPermissionsFrom.completed(sourceUid, targetUid);\n    })\n    .fail(permissionsActions.copyPermissionsFrom.failed);\n});\n\npermissionsActions.setCollectionDiscoverability.listen(function(uid, discoverable){\n  dataInterface.patchCollection(uid, {discoverable_when_public: discoverable})\n    .done(permissionsActions.setCollectionDiscoverability.completed)\n    .fail(permissionsActions.setCollectionDiscoverability.failed);\n});\n","/**\n * help related actions\n */\n\nimport Reflux from 'reflux';\nimport {dataInterface} from '../dataInterface';\nimport {\n  t,\n  notify\n} from '../utils';\n\nexport const helpActions = Reflux.createActions({\n  getInAppMessages: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  setMessageAcknowledged: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  setMessageReadTime: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  }\n});\n\nhelpActions.getInAppMessages.listen(() => {\n  dataInterface.getHelpInAppMessages()\n    .done(helpActions.getInAppMessages.completed)\n    .fail(helpActions.getInAppMessages.failed);\n});\nhelpActions.getInAppMessages.failed.listen(() => {\n  notify(t('Failed to get in app messages.'), 'error');\n});\n\nhelpActions.setMessageReadTime.listen((uid, readTime) => {\n  dataInterface.patchHelpInAppMessage(uid, {interactions: {\n    readTime: readTime,\n    // we assume that reading messages is a conscious action\n    acknowledged: true\n  }})\n    .done(helpActions.setMessageReadTime.completed)\n    .fail(helpActions.setMessageReadTime.failed);\n});\nhelpActions.setMessageReadTime.failed.listen(() => {\n  notify(t('Failed to set message readTime.'), 'error');\n});\n\nhelpActions.setMessageAcknowledged.listen((uid, isAcknowledged) => {\n  dataInterface.patchHelpInAppMessage(uid, {interactions: {acknowledged: isAcknowledged}})\n    .done(helpActions.setMessageAcknowledged.completed)\n    .fail(helpActions.setMessageAcknowledged.failed);\n});\nhelpActions.setMessageAcknowledged.failed.listen(() => {\n  notify(t('Failed to set message acknowledged.'), 'error');\n});\n","/**\n * A bundle file for all Reflux actions. This is the only place that React\n * components should be talking to Backend.\n *\n * You can observe action result through Reflux callbacks in your component, or\n * more preferably (where applicable) use the update eveont of one of the stores\n * from `jsapp/js/stores.es6`\n *\n * TODO: Group and split actions to separate files. For a working example see `./actions/help`.\n */\n\nimport alertify from 'alertifyjs';\nimport Reflux from 'reflux';\nimport RefluxPromise from './libs/reflux-promise';\nimport {dataInterface} from './dataInterface';\nimport {permissionsActions} from './actions/permissions';\nimport {helpActions} from './actions/help';\nimport {\n  log,\n  t,\n  notify,\n  replaceSupportEmail,\n} from './utils';\n\n// Configure Reflux\nReflux.use(RefluxPromise(window.Promise));\n\nexport const actions = {\n  permissions: permissionsActions,\n  help: helpActions\n};\n\nactions.navigation = Reflux.createActions([\n  'transitionStart',\n  'transitionEnd',\n  'routeUpdate',\n  'documentTitleUpdate'\n]);\n\nactions.auth = Reflux.createActions({\n  verifyLogin: {\n    children: [\n      'loggedin',\n      'anonymous',\n      'failed'\n    ]\n  },\n  logout: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  changePassword: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  getEnvironment: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  getApiToken: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n});\n\nactions.survey = Reflux.createActions({\n  addExternalItemAtPosition: {\n    children: [\n      'completed',\n      'failed'\n    ],\n  }\n});\n\nactions.search = Reflux.createActions({\n  assets: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  collections: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  }\n});\n\nactions.resources = Reflux.createActions({\n  listCollections: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  createAsset: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  createImport: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  loadAsset: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  deployAsset: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  setDeploymentActive: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  createSnapshot: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  cloneAsset: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  deleteAsset: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  listTags: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  createCollection: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  updateCollection: {\n    asyncResult: true\n  },\n  deleteCollection: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  loadAssetSubResource: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  loadAssetContent: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  loadResource: {\n    children: [\n      'completed',\n      'failed'\n    ],\n  },\n  createResource: {\n    asyncResult: true\n  },\n  updateAsset: {\n    asyncResult: true\n  },\n  updateSubmissionValidationStatus: {\n    children: [\n      'completed',\n      'failed'\n    ],\n  },\n  removeSubmissionValidationStatus: {\n    children: [\n      'completed',\n      'failed'\n    ],\n  },\n  getAssetFiles: {\n    children: [\n      'completed',\n      'failed'\n    ],\n  },\n  notFound: {}\n});\n\nactions.hooks = Reflux.createActions({\n  getAll: {children: ['completed', 'failed']},\n  add: {children: ['completed', 'failed']},\n  update: {children: ['completed', 'failed']},\n  delete: {children: ['completed', 'failed']},\n  getLogs: {children: ['completed', 'failed']},\n  retryLog: {children: ['completed', 'failed']},\n  retryLogs: {children: ['completed', 'failed']},\n});\n\nactions.misc = Reflux.createActions({\n  checkUsername: {\n    asyncResult: true,\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  updateProfile: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  getServerEnvironment: {\n    children: [\n      'completed',\n      'failed',\n    ]\n  },\n});\n\n// TODO move these callbacks to `actions/permissions.es6` after moving\n// `actions.resources` to separate file (circular dependency issue)\npermissionsActions.assignAssetPermission.failed.listen(() => {\n  notify(t('Failed to update permissions'), 'error');\n});\npermissionsActions.removeAssetPermission.failed.listen(() => {\n  notify(t('Failed to remove permissions'), 'error');\n});\npermissionsActions.assignCollectionPermission.failed.listen(() => {\n  notify(t('Failed to update permissions'), 'error');\n});\npermissionsActions.removeCollectionPermission.failed.listen(() => {\n  notify(t('Failed to update permissions'), 'error');\n});\npermissionsActions.assignAssetPermission.completed.listen((uid) => {\n  // needed to update publicShareSettings after enabling link sharing\n  actions.resources.loadAsset({id: uid});\n});\npermissionsActions.copyPermissionsFrom.completed.listen((sourceUid, targetUid) => {\n  actions.resources.loadAsset({id: targetUid});\n});\npermissionsActions.removeAssetPermission.completed.listen((uid) => {\n  // needed to update publicShareSettings after disabling link sharing\n  actions.resources.loadAsset({id: uid});\n});\npermissionsActions.setCollectionDiscoverability.completed.listen((val) => {\n  actions.resources.loadAsset({url: val.url});\n});\n\nactions.misc.checkUsername.listen(function(username){\n  dataInterface.queryUserExistence(username)\n    .done(actions.misc.checkUsername.completed)\n    .fail(actions.misc.checkUsername.failed);\n});\n\nactions.misc.updateProfile.listen(function(data, callbacks={}){\n  dataInterface.patchProfile(data)\n    .done((...args) => {\n      actions.misc.updateProfile.completed(...args)\n      if (callbacks.onComplete) {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.misc.updateProfile.failed(...args)\n      if (callbacks.onFail) {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.misc.updateProfile.completed.listen(function(){\n  notify(t('updated profile successfully'));\n});\nactions.misc.updateProfile.failed.listen(function(data) {\n  let hadFieldsErrors = false;\n  for (const [errorProp, errorValue] of Object.entries(data.responseJSON)){\n    if (errorProp !== 'non_fields_error') {\n      hadFieldsErrors = true;\n    }\n  }\n\n  if (hadFieldsErrors) {\n    notify(t('Some fields contain errors'), 'error');\n  } else {\n    notify(t('failed to update profile'), 'error');\n  }\n});\n\nactions.misc.getServerEnvironment.listen(function(){\n  dataInterface.serverEnvironment()\n    .done(actions.misc.getServerEnvironment.completed)\n    .fail(actions.misc.getServerEnvironment.failed);\n});\n\nactions.resources.createImport.listen(function(contents){\n  if (contents.base64Encoded) {\n    dataInterface.postCreateImport(contents)\n      .done(actions.resources.createImport.completed)\n      .fail(actions.resources.createImport.failed);\n  } else if (contents.content) {\n    dataInterface.createResource(contents);\n  }\n});\n\nactions.resources.createImport.completed.listen(function(contents){\n  if (contents.status) {\n    if(contents.status === 'processing') {\n      notify(t('successfully uploaded file; processing may take a few minutes'));\n      log('processing import ' + contents.uid, contents);\n    } else {\n      notify(t('unexpected import status ##STATUS##').replace('##STATUS##', contents.status), 'error');\n    }\n  } else {\n    notify(t('Error: import.status not available'));\n  }\n});\n\nactions.resources.createSnapshot.listen(function(details){\n  dataInterface.createAssetSnapshot(details)\n    .done(actions.resources.createSnapshot.completed)\n    .fail(actions.resources.createSnapshot.failed);\n});\n\nactions.resources.listTags.listen(function(data){\n  dataInterface.listTags(data)\n    .done(actions.resources.listTags.completed)\n    .fail(actions.resources.listTags.failed);\n});\n\nactions.resources.listTags.completed.listen(function(results){\n  if (results.next && window.Raven) {\n    Raven.captureMessage('MAX_TAGS_EXCEEDED: Too many tags');\n  }\n});\n\nactions.resources.updateAsset.listen(function(uid, values, params={}) {\n  dataInterface.patchAsset(uid, values)\n    .done((asset) => {\n      actions.resources.updateAsset.completed(asset);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(asset, uid, values);\n      }\n      notify(t('successfully updated'));\n    })\n    .fail(function(resp){\n      actions.resources.updateAsset.failed(resp);\n      if (params.onFailed) {\n        params.onFailed(resp);\n      }\n    });\n});\n\nactions.resources.deployAsset.listen(function(asset, redeployment, params={}){\n  dataInterface.deployAsset(asset, redeployment)\n    .done((data) => {\n      actions.resources.deployAsset.completed(data.asset);\n      if (typeof params.onDone === 'function') {\n        params.onDone(data, redeployment);\n      }\n    })\n    .fail((data) => {\n      actions.resources.deployAsset.failed(data, redeployment);\n      if (typeof params.onFail === 'function') {\n        params.onFail(data,  redeployment);\n      }\n    });\n});\n\nactions.resources.deployAsset.failed.listen(function(data, redeployment){\n  // report the problem to the user\n  let failure_message = null;\n\n  if(!data.responseJSON || (!data.responseJSON.xform_id_string &&\n                            !data.responseJSON.detail)) {\n    // failed to retrieve a valid response from the server\n    // setContent() removes the input box, but the value is retained\n    var msg;\n    if (data.status == 500 && data.responseJSON && data.responseJSON.error) {\n      msg = `<pre>${data.responseJSON.error}</pre>`;\n    } else if (data.status == 500 && data.responseText) {\n      msg = `<pre>${data.responseText}</pre>`;\n    } else {\n      msg = t('please check your connection and try again.');\n    }\n    failure_message = `\n      <p>${replaceSupportEmail(t('if this problem persists, contact help@kobotoolbox.org'))}</p>\n      <p>${msg}</p>\n    `;\n  } else if(!!data.responseJSON.xform_id_string){\n    // TODO: now that the id_string is automatically generated, this failure\n    // mode probably doesn't need special handling\n    failure_message = `\n      <p>${t('your form id was not valid:')}</p>\n      <p><pre>${data.responseJSON.xform_id_string}</pre></p>\n      <p>${replaceSupportEmail(t('if this problem persists, contact help@kobotoolbox.org'))}</p>\n    `;\n  } else if(!!data.responseJSON.detail) {\n    failure_message = `\n      <p>${t('your form cannot be deployed because it contains errors:')}</p>\n      <p><pre>${data.responseJSON.detail}</pre></p>\n    `;\n  }\n  alertify.alert(t('unable to deploy'), failure_message);\n});\n\nactions.resources.setDeploymentActive.listen(function(details) {\n  dataInterface.setDeploymentActive(details)\n    .done((data) => {\n      actions.resources.setDeploymentActive.completed(data.asset);\n    })\n    .fail(actions.resources.setDeploymentActive.failed);\n});\nactions.resources.setDeploymentActive.completed.listen((result) => {\n  if (result.deployment__active) {\n    notify(t('Project unarchived successfully'));\n  } else {\n    notify(t('Project archived successfully'));\n  }\n});\n\nactions.resources.getAssetFiles.listen(function(assetId) {\n  dataInterface\n    .getAssetFiles(assetId)\n    .done(actions.resources.getAssetFiles.completed)\n    .fail(actions.resources.getAssetFiles.failed);\n});\n\n\nactions.reports = Reflux.createActions({\n  setStyle: {\n    children: [\n      'completed',\n      'failed',\n    ]\n  },\n  setCustom: {\n    children: [\n      'completed',\n      'failed',\n    ]\n  }\n});\n\nactions.reports.setStyle.listen(function(assetId, details){\n  dataInterface.patchAsset(assetId, {report_styles: JSON.stringify(details)})\n    .done((asset) => {\n      actions.reports.setStyle.completed(asset);\n      actions.resources.updateAsset.completed(asset);\n    })\n    .fail(actions.reports.setStyle.failed);\n});\n\nactions.reports.setCustom.listen(function(assetId, details){\n  dataInterface.patchAsset(assetId, {report_custom: JSON.stringify(details)})\n    .done((asset) => {\n      actions.reports.setCustom.completed(asset);\n      actions.resources.updateAsset.completed(asset);\n    })\n    .fail(actions.reports.setCustom.failed);\n});\n\nactions.table = Reflux.createActions({\n  updateSettings: {\n    children: [\n      'completed',\n      'failed',\n    ]\n  }\n});\n\nactions.table.updateSettings.listen(function(assetId, settings){\n  dataInterface.patchAsset(assetId, {settings: JSON.stringify(settings)})\n    .done((asset) => {\n      actions.table.updateSettings.completed(asset);\n      actions.resources.updateAsset.completed(asset);\n    })\n    .fail(actions.table.updateSettings.failed);\n});\n\n\nactions.map = Reflux.createActions({\n  setMapStyles: {\n    children: ['started', 'completed', 'failed']\n  }\n});\n\n/**\n * Note: `started` callback returns parameters with wich the action was called\n * @param {string} assetUid\n * @param {object} mapStyles\n */\nactions.map.setMapStyles.listen(function(assetUid, mapStyles) {\n  dataInterface.patchAsset(assetUid, {map_styles: JSON.stringify(mapStyles)})\n    .done((asset) => {\n      actions.map.setMapStyles.completed(asset);\n      actions.resources.updateAsset.completed(asset);\n    })\n    .fail(actions.map.setMapStyles.failed);\n  actions.map.setMapStyles.started(assetUid, mapStyles);\n});\n\n\nactions.resources.createResource.listen(function(details){\n  dataInterface.createResource(details)\n    .done(function(asset){\n      actions.resources.createResource.completed(asset);\n    })\n    .fail(function(...args){\n      actions.resources.createResource.failed(...args);\n    });\n});\n\nactions.resources.deleteAsset.listen(function(details, params={}){\n  dataInterface.deleteAsset(details)\n    .done(() => {\n      actions.resources.deleteAsset.completed(details);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(details);\n      }\n    })\n    .fail((err) => {\n      actions.resources.deleteAsset.failed(details);\n      alertify.alert(\n        t('Unable to delete asset!'),\n        `<p>${t('Error details:')}</p><pre style='max-height: 200px;'>${err.responseText}</pre>`\n      );\n    });\n});\n\nactions.resources.deleteCollection.listen(function(details, params = {}){\n  dataInterface.deleteCollection(details)\n    .done(function(result) {\n      actions.resources.deleteCollection.completed(details, result);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(details, result);\n      }\n    })\n    .fail(actions.resources.deleteCollection.failed);\n});\nactions.resources.deleteCollection.failed.listen(() => {\n  notify(t('Failed to delete collection.'), 'error');\n});\n\nactions.resources.updateCollection.listen(function(uid, values){\n  dataInterface.patchCollection(uid, values)\n    .done(function(asset){\n      actions.resources.updateCollection.completed(asset);\n      notify(t('successfully updated'));\n    })\n    .fail(function(...args){\n      actions.resources.updateCollection.failed(...args);\n    });\n});\n\nactions.resources.cloneAsset.listen(function(details, params={}){\n  dataInterface.cloneAsset(details)\n    .done((asset) => {\n      actions.resources.cloneAsset.completed(asset);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(asset);\n      }\n    })\n    .fail(actions.resources.cloneAsset.failed);\n});\nactions.resources.cloneAsset.failed.listen(() => {\n  notify(t('Could not create project!'), 'error');\n});\n\nactions.search.assets.listen(function(searchData, params={}){\n  dataInterface.searchAssets(searchData)\n    .done(function(response){\n      actions.search.assets.completed(searchData, response);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(searchData, response);\n      }\n    })\n    .fail(function(response){\n      actions.search.assets.failed(searchData, response);\n      if (typeof params.onFailed === 'function') {\n        params.onFailed(searchData, response);\n      }\n    });\n});\n\n\n\n// reload so a new csrf token is issued\nactions.auth.logout.completed.listen(function(){\n  window.setTimeout(function(){\n    window.location.replace('', '');\n  }, 1);\n});\n\nactions.auth.logout.listen(function(){\n  dataInterface.logout().done(actions.auth.logout.completed).fail(function(){\n    console.error('logout failed for some reason. what should happen now?');\n  });\n});\nactions.auth.verifyLogin.listen(function(){\n    dataInterface.selfProfile()\n        .done((data/*, msg, req*/)=>{\n          if (data.username) {\n            actions.auth.verifyLogin.loggedin(data);\n          } else {\n            actions.auth.verifyLogin.anonymous(data);\n          }\n        })\n        .fail(actions.auth.verifyLogin.failed);\n});\n\nactions.auth.changePassword.listen((currentPassword, newPassword) => {\n  dataInterface.patchProfile({\n    current_password: currentPassword,\n    new_password: newPassword\n  })\n  .done(actions.auth.changePassword.completed)\n  .fail(actions.auth.changePassword.failed);\n});\nactions.auth.changePassword.completed.listen(() => {\n  notify(t('changed password successfully'));\n});\nactions.auth.changePassword.failed.listen(() => {\n  notify(t('failed to change password'), 'error');\n});\n\nactions.auth.getEnvironment.listen(function(){\n  dataInterface.environment()\n    .done((data)=>{\n      actions.auth.getEnvironment.completed(data);\n    })\n    .fail(actions.auth.getEnvironment.failed);\n});\nactions.auth.getEnvironment.failed.listen(() => {\n  notify(t('failed to load environment data'), 'error');\n});\n\nactions.auth.getApiToken.listen(() => {\n  dataInterface.apiToken()\n    .done((response) => {\n      actions.auth.getApiToken.completed(response.token);\n    })\n    .fail(actions.auth.getApiToken.failed);\n});\nactions.auth.getApiToken.failed.listen(() => {\n  notify(t('failed to load API token'), 'error');\n});\n\nactions.resources.loadAsset.listen(function(params){\n  var dispatchMethodName;\n  if (params.url) {\n    dispatchMethodName = params.url.indexOf('collections') === -1 ?\n        'getAsset' : 'getCollection';\n  } else if (params.id) {\n    dispatchMethodName = {\n      c: 'getCollection',\n      a: 'getAsset'\n    }[params.id[0]];\n  }\n\n  if (dispatchMethodName) {\n    dataInterface[dispatchMethodName](params)\n      .done(actions.resources.loadAsset.completed)\n      .fail(actions.resources.loadAsset.failed);\n  }\n});\n\nactions.resources.loadAssetContent.listen(function(params){\n  dataInterface.getAssetContent(params)\n    .done(actions.resources.loadAssetContent.completed)\n    .fail(actions.resources.loadAssetContent.failed);\n});\n\nactions.resources.listCollections.listen(function(){\n  dataInterface.listCollections()\n    .done(actions.resources.listCollections.completed)\n    .fail(actions.resources.listCollections.failed);\n});\n\nactions.resources.updateSubmissionValidationStatus.listen(function(uid, sid, data){\n  dataInterface.updateSubmissionValidationStatus(uid, sid, data).done((result) => {\n    actions.resources.updateSubmissionValidationStatus.completed(result, sid);\n  }).fail((error)=>{\n    console.error(error);\n    actions.resources.updateSubmissionValidationStatus.failed(error);\n  });\n});\n\nactions.resources.removeSubmissionValidationStatus.listen((uid, sid) => {\n  dataInterface.removeSubmissionValidationStatus(uid, sid).done((result) => {\n    actions.resources.removeSubmissionValidationStatus.completed(result, sid);\n  }).fail((error)=>{\n    console.error(error);\n    actions.resources.removeSubmissionValidationStatus.failed(error);\n  });\n});\n\nactions.hooks.getAll.listen((assetUid, callbacks = {}) => {\n  dataInterface.getHooks(assetUid)\n    .done((...args) => {\n      actions.hooks.getAll.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.getAll.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\n\nactions.hooks.add.listen((assetUid, data, callbacks = {}) => {\n  dataInterface.addExternalService(assetUid, data)\n    .done((...args) => {\n      actions.hooks.getAll(assetUid);\n      actions.hooks.add.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.add.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.add.completed.listen((response) => {\n  notify(t('REST Service added successfully'));\n});\nactions.hooks.add.failed.listen((response) => {\n  notify(t('Failed adding REST Service'), 'error');\n});\n\nactions.hooks.update.listen((assetUid, hookUid, data, callbacks = {}) => {\n  dataInterface.updateExternalService(assetUid, hookUid, data)\n    .done((...args) => {\n      actions.hooks.getAll(assetUid);\n      actions.hooks.update.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.update.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.update.completed.listen(() => {\n  notify(t('REST Service updated successfully'));\n});\nactions.hooks.update.failed.listen(() => {\n  alertify.error(t('Failed saving REST Service'));\n});\n\nactions.hooks.delete.listen((assetUid, hookUid, callbacks = {}) => {\n  dataInterface.deleteExternalService(assetUid, hookUid)\n    .done((...args) => {\n      actions.hooks.getAll(assetUid);\n      actions.hooks.delete.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.delete.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.delete.completed.listen((response) => {\n  notify(t('REST Service deleted permanently'));\n});\nactions.hooks.delete.failed.listen((response) => {\n  notify(t('Could not delete REST Service'), 'error');\n});\n\nactions.hooks.getLogs.listen((assetUid, hookUid, callbacks = {}) => {\n  dataInterface.getHookLogs(assetUid, hookUid)\n    .done((...args) => {\n      actions.hooks.getLogs.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.getLogs.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\n\nactions.hooks.retryLog.listen((assetUid, hookUid, lid, callbacks = {}) => {\n  dataInterface.retryExternalServiceLog(assetUid, hookUid, lid)\n    .done((...args) => {\n      actions.hooks.getLogs(assetUid, hookUid);\n      actions.hooks.retryLog.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.retryLog.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.retryLog.completed.listen((response) => {\n  notify(t('Submission retry requested successfully'));\n});\nactions.hooks.retryLog.failed.listen((response) => {\n  notify(t('Submission retry request failed'), 'error');\n});\n\nactions.hooks.retryLogs.listen((assetUid, hookUid, callbacks = {}) => {\n  dataInterface.retryExternalServiceLogs(assetUid, hookUid)\n    .done((...args) => {\n      actions.hooks.retryLogs.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.getLogs(assetUid, hookUid);\n      actions.hooks.retryLogs.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.retryLogs.completed.listen((response) => {\n  notify(t(response.detail), 'warning');\n});\nactions.hooks.retryLogs.failed.listen((response) => {\n  notify(t('Retrying all submissions failed'), 'error');\n});\n","_ = require 'underscore'\n\nmodule.exports = do ->\n  aliases_dict =\n    group: [\n        \"begin group\"\n        \"end group\"\n        \"begin_group\"\n        \"end_group\"\n      ],\n    repeat: [\n        \"begin repeat\"\n        \"end repeat\"\n        \"begin_repeat\"\n        \"end_repeat\"\n      ]\n    kobomatrix: [\n        \"begin_kobomatrix\"\n        \"end_kobomatrix\"\n      ]\n    score: [\n        \"begin score\",\n        \"end score\",\n        \"begin_score\",\n        \"end_score\",\n      ]\n    rank: [\n        \"begin_rank\",\n        \"end_rank\",\n        \"begin rank\",\n        \"end rank\",\n      ]\n    kobomatrix: [\n        \"begin_kobomatrix\",\n        \"end_kobomatrix\",\n      ]\n\n  aliases = (name)-> aliases_dict[name] or [name]\n\n  q = {}\n  q.groupable = ()->\n    _.flatten [\n                aliases('group')\n                aliases('repeat')\n                aliases('score')\n                aliases('rank')\n                aliases('kobomatrix')\n              ]\n\n  q.groupsOrRepeats = ()->\n    _.flatten [aliases('group'), aliases('repeat')]\n\n  q.requiredSheetNameList = ()->\n    ['survey']\n\n  q.testGroupable = (type)->\n    # Returns an object if type is group or repeat (begin or end)\n    #  otherwise, returns false\n    out = false\n    if type in aliases_dict.group\n      out = {type: 'group'}\n    else if type in aliases_dict.repeat\n      out = {type: 'repeat'}\n    else if type in aliases_dict.score\n      out = {type: 'score'}\n    else if type in aliases_dict.rank\n      out = {type: 'rank'}\n    else if type in aliases_dict.kobomatrix\n      out = {type: 'kobomatrix'}\n    if out and out.type\n      out.begin = !type.match(/end/)\n    out\n\n  q.testGroupOrRepeat = (type)->\n    console.error(\"q.testGroupOrRepeat is renamed to q.testGroupable\")\n    q.testGroupable(type)\n\n  q.hiddenTypes = ()->\n    _.flatten [\n      ['imei', 'deviceid'],\n      ['start'],\n      ['end'],\n      ['today'],\n      ['simserial'],\n      ['subscriberid'],\n      ['phonenumber', 'phone_number'],\n      ['audit'],\n    ]\n\n  aliases.custom = q\n\n  aliases.q = aliases.custom\n  aliases\n","/**\n * The only file that is making calls to Backend. You shouldn't use it directly,\n * but through proper actions in `jsapp/js/actions.es6`.\n *\n * TODO: Instead of splitting this huge file it could be a good idead to move\n * all the calls from here to appropriate actions and drop this file entirely.\n * And make actions for calls that doesn't have them.\n */\n\nimport $ from 'jquery';\nimport alertify from 'alertifyjs';\nimport {\n  t,\n  assign\n} from './utils';\nimport {ROOT_URL} from './constants';\n\nexport var dataInterface;\n(function(){\n  var $ajax = (o)=> {\n    return $.ajax(assign({}, {dataType: 'json', method: 'GET'}, o));\n  };\n  const assetMapping = {\n    'a': 'assets',\n    'c': 'collections',\n    'p': 'permissions',\n  };\n\n  // hook up to all AJAX requests to check auth problems\n  $(document).ajaxError((event, request, settings) => {\n    if (request.status === 403 || request.status === 401 || request.status === 404) {\n      dataInterface.selfProfile().done((data) => {\n        if (data.message === 'user is not logged in') {\n          let errorMessage = t('Please try reloading the page. If you need to contact support, note the following message: <pre>##server_message##</pre>');\n          let serverMessage = request.status.toString();\n          if (request.responseJSON && request.responseJSON.detail) {\n            serverMessage += ': ' + request.responseJSON.detail;\n          }\n          errorMessage = errorMessage.replace('##server_message##', serverMessage);\n          alertify.alert(t('You are not logged in'), errorMessage);\n        }\n      });\n    }\n  });\n\n  assign(this, {\n    selfProfile: ()=> $ajax({ url: `${ROOT_URL}/me/` }),\n    serverEnvironment: ()=> $ajax({ url: `${ROOT_URL}/environment/` }),\n    apiToken: () => {\n      return $ajax({\n        url: `${ROOT_URL}/token/?format=json`\n      });\n    },\n    queryUserExistence: (username)=> {\n      var d = new $.Deferred();\n      $ajax({ url: `${ROOT_URL}/api/v2/users/${username}/` })\n        .done(()=>{ d.resolve(username, true); })\n        .fail(()=>{ d.reject(username, false); });\n      return d.promise();\n    },\n    logout: ()=> {\n      var d = new $.Deferred();\n      $ajax({ url: `${ROOT_URL}/api-auth/logout/` }).done(d.resolve).fail(function (/*resp, etype, emessage*/) {\n        // logout request wasn't successful, but may have logged the user out\n        // querying '/me/' can confirm if we have logged out.\n        dataInterface.selfProfile().done(function(data){\n          if (data.message === 'user is not logged in') {\n            d.resolve(data);\n          } else {\n            d.fail(data);\n          }\n        }).fail(d.fail);\n      });\n      return d.promise();\n    },\n    patchProfile (data) {\n      return $ajax({\n        url: `${ROOT_URL}/me/`,\n        method: 'PATCH',\n        data: data\n      });\n    },\n    listTemplates () {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/?q=asset_type:template`\n      });\n    },\n    listCollections () {\n      return $.getJSON(`${ROOT_URL}/api/v2/collections/?all_public=true`);\n    },\n    createAssetSnapshot (data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/asset_snapshots/`,\n        method: 'POST',\n        data: data\n      });\n    },\n    createTemporaryAssetSnapshot ({source}) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/asset_snapshots/`,\n        method: 'POST',\n        data: {\n          source: source\n        }\n      });\n    },\n\n    /*\n     * external services\n     */\n\n    getHooks(uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/`,\n        method: 'GET'\n      });\n    },\n    getHook(uid, hookUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/`,\n        method: 'GET'\n      });\n    },\n    addExternalService(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/`,\n        method: 'POST',\n        data: JSON.stringify(data),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n    updateExternalService(uid, hookUid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/`,\n        method: 'PATCH',\n        data: JSON.stringify(data),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n    deleteExternalService(uid, hookUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/`,\n        method: 'DELETE'\n      });\n    },\n    getHookLogs(uid, hookUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/logs/`,\n        method: 'GET'\n      });\n    },\n    getHookLog(uid, hookUid, lid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/logs/${lid}/`,\n        method: 'GET'\n      });\n    },\n    retryExternalServiceLogs(uid, hookUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/retry/`,\n        method: 'PATCH'\n      });\n    },\n    retryExternalServiceLog(uid, hookUid, lid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/logs/${lid}/retry/`,\n        method: 'PATCH'\n      });\n    },\n\n    getReportData (data) {\n      let identifierString;\n      if (data.identifiers) {\n        identifierString = `?names=${data.identifiers.join(',')}`\n      }\n      if (data.group_by != '')\n        identifierString += `&split_by=${data.group_by}`;\n\n      return $ajax({\n        url: `${ROOT_URL}/reports/${data.uid}/${identifierString}`,\n      });\n    },\n    cloneAsset ({uid, name, version_id, new_asset_type}) {\n      let data = {\n        clone_from: uid,\n      };\n      if (name) { data.name = name; }\n      if (version_id) { data.clone_from_version_id = version_id; }\n      if (new_asset_type) { data.asset_type = new_asset_type; }\n      return $ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/api/v2/assets/`,\n        data: data,\n      });\n    },\n    cloneCollection ({uid}) {\n      return $ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/api/v2/collections/`,\n        data: {\n          clone_from: uid\n        }\n      });\n    },\n\n    /*\n     * permissions\n     */\n\n    getPermissionsConfig() {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/permissions/`,\n        method: 'GET'\n      });\n    },\n\n    getAssetPermissions(assetUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/permission-assignments/`,\n        method: 'GET'\n      });\n    },\n\n    getCollectionPermissions(uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/collections/${uid}/permission-assignments/`,\n        method: 'GET'\n      });\n    },\n\n    bulkSetAssetPermissions(assetUid, perms) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/permission-assignments/bulk/`,\n        method: 'POST',\n        data: JSON.stringify(perms),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n\n    assignAssetPermission(assetUid, perm) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/permission-assignments/`,\n        method: 'POST',\n        data: JSON.stringify(perm),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n\n    assignCollectionPermission(uid, perm) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/collections/${uid}/permission-assignments/`,\n        method: 'POST',\n        data: JSON.stringify(perm),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n\n    removePermission (permUrl) {\n      return $ajax({\n        method: 'DELETE',\n        url: permUrl\n      });\n    },\n\n    copyPermissionsFrom(sourceUid, targetUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${targetUid}/permission-assignments/clone/`,\n        method: 'PATCH',\n        data: {\n          clone_from: sourceUid\n        }\n      });\n    },\n    setCollectionDiscoverability (uid, discoverable) {\n      dataInterface.patchCollection(uid, {\n        discoverable_when_public: discoverable\n      });\n    },\n    libraryDefaultSearch () {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/`,\n        data: {\n          q: 'asset_type:question OR asset_type:block OR asset_type:template'\n        },\n        method: 'GET'\n      });\n    },\n    deleteCollection ({uid}) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/collections/${uid}/`,\n        method: 'DELETE'\n      });\n    },\n    deleteAsset ({uid}) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/`,\n        method: 'DELETE'\n      });\n    },\n    subscribeCollection ({uid}) {\n      return $ajax({\n        url: `${ROOT_URL}/collection_subscriptions/`,\n        data: {\n          collection: `${ROOT_URL}/api/v2/collections/${uid}/`,\n        },\n        method: 'POST'\n      });\n    },\n    unsubscribeCollection ({uid}) {\n      return $ajax({\n        url: `${ROOT_URL}/collection_subscriptions/`,\n        data: {\n          collection__uid: uid\n        },\n        method: 'GET'\n      }).then((data) => {\n        return $ajax({\n          url: data.results[0].url,\n          method: 'DELETE'\n        });\n      });\n    },\n    getAssetContent ({id}) {\n      return $.getJSON(`${ROOT_URL}/api/v2/assets/${id}/content/`);\n    },\n    getImportDetails ({uid}) {\n      return $.getJSON(`${ROOT_URL}/imports/${uid}/`);\n    },\n    getAsset (params={}) {\n      if (params.url) {\n        return $.getJSON(params.url);\n      } else {\n        return $.getJSON(`${ROOT_URL}/api/v2/assets/${params.id}/`);\n      }\n    },\n    /**\n     * @param {object} data\n     * @param {string} [data.source]\n     * @param {string} [data.type]\n     * @param {boolean} [data.fields_from_all_versions]\n     * @param {string} [data.lang]\n     * @param {boolean} [data.hierarchy_in_labels]\n     * @param {string} [data.group_sep]\n     */\n    createExport (data) {\n      return $ajax({\n        url: `${ROOT_URL}/exports/`,\n        method: 'POST',\n        data: data\n      });\n    },\n    getAssetExports (uid) {\n      return $ajax({\n        url: `${ROOT_URL}/exports/`,\n        data: {\n          q: `source:${uid}`\n        }\n      });\n    },\n    deleteAssetExport (euid) {\n      return $ajax({\n        url: `${ROOT_URL}/exports/${euid}/`,\n        method: 'DELETE'\n      });\n    },\n    getAssetXformView (uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/xform/`,\n        dataType: 'html'\n      });\n    },\n    searchAssets (searchData) {\n      // override limit\n      searchData.limit = 200;\n      return $.ajax({\n        url: `${ROOT_URL}/api/v2/assets/`,\n        dataType: 'json',\n        data: searchData,\n        method: 'GET'\n      });\n    },\n    assetsHash () {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/hash/`,\n        method: 'GET'\n      });\n    },\n    createCollection (data) {\n      return $ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/api/v2/collections/`,\n        data: data,\n      });\n    },\n    patchCollection (uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/collections/${uid}/`,\n        method: 'PATCH',\n        data: data\n      });\n    },\n    createResource (details) {\n      return $ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/api/v2/assets/`,\n        data: details\n      });\n    },\n    patchAsset (uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/`,\n        method: 'PATCH',\n        data: data\n      });\n    },\n    listTags (data) {\n      return $ajax({\n        url: `${ROOT_URL}/tags/`,\n        method: 'GET',\n        data: assign({\n          limit: 9999,\n        }, data),\n      });\n    },\n    getCollection (params={}) {\n      if (params.url) {\n        return $.getJSON(params.url);\n      } else {\n        return $.getJSON(`${ROOT_URL}/api/v2/collections/${params.id}/`);\n      }\n    },\n    loadNextPageUrl(nextPageUrl){\n      return $ajax({\n        url: nextPageUrl,\n        method: 'GET'\n      });\n    },\n    deployAsset (asset, redeployment) {\n      var data = {\n        'active': true,\n      };\n      var method = 'POST';\n      if (redeployment) {\n        method = 'PATCH';\n        data.version_id = asset.version_id;\n      }\n      return $ajax({\n        method: method,\n        url: `${asset.url}deployment/`,\n        data: data\n      });\n    },\n    setDeploymentActive ({asset, active}) {\n      return $ajax({\n        method: 'PATCH',\n        url: `${asset.url}deployment/`,\n        data: {\n          active: active\n        }\n      });\n    },\n    postCreateImport (contents) {\n      var formData = new FormData();\n      Object.keys(contents).forEach(function(key){\n        formData.append(key, contents[key]);\n      });\n      return $.ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/imports/`,\n        data: formData,\n        processData: false,\n        contentType: false\n      });\n    },\n    getResource ({id}) {\n      // how can we avoid pulling asset type from the 1st character of the uid?\n      var assetType = assetMapping[id[0]];\n      return $.getJSON(`${ROOT_URL}/${assetType}/${id}/`);\n    },\n    getSubmissions(uid, pageSize=100, page=0, sort=[], fields=[], filter='') {\n      const query = `limit=${pageSize}&start=${page}`;\n      var s = '&sort={\"_id\":-1}'; // default sort\n      var f = '';\n      if (sort.length)\n        s = sort[0].desc === true ? `&sort={\"${sort[0].id}\":-1}` : `&sort={\"${sort[0].id}\":1}`;\n      if (fields.length)\n        f = `&fields=${JSON.stringify(fields)}`;\n\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/?${query}${s}${f}${filter}`,\n        method: 'GET'\n      });\n    },\n    getSubmission(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/`,\n        method: 'GET'\n      });\n    },\n    patchSubmissions(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/validation_statuses/`,\n        method: 'PATCH',\n        data: {'payload': JSON.stringify(data)}\n      });\n    },\n    bulkRemoveSubmissionsValidationStatus(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/validation_statuses/`,\n        method: 'DELETE',\n        data: {'payload': JSON.stringify(data)}\n      });\n    },\n    updateSubmissionValidationStatus(uid, sid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/validation_status/`,\n        method: 'PATCH',\n        data: data\n      });\n    },\n    removeSubmissionValidationStatus(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/validation_status/`,\n        method: 'DELETE'\n      });\n    },\n    getSubmissionsQuery(uid, query='') {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/?${query}`,\n        method: 'GET'\n      });\n    },\n    deleteSubmission(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}`,\n        method: 'DELETE'\n      });\n    },\n    bulkDeleteSubmissions(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/bulk/`,\n        method: 'DELETE',\n        data: {'payload': JSON.stringify(data)}\n      });\n    },\n    getEnketoEditLink(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/edit/?return_url=false`,\n        method: 'GET'\n      });\n    },\n    uploadAssetFile(uid, data) {\n      var formData = new FormData();\n      Object.keys(data).forEach(function(key) {\n        formData.append(key, data[key]);\n      });\n\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/files/`,\n        method: 'POST',\n        data: formData,\n        processData: false,\n        contentType: false\n      });\n    },\n    getAssetFiles(uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/files/`,\n        method: 'GET'\n      });\n    },\n    deleteAssetFile(assetUid, uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/files/${uid}/`,\n        method: 'DELETE'\n      });\n    },\n\n    getHelpInAppMessages() {\n      return $ajax({\n        url: `${ROOT_URL}/help/in_app_messages/`,\n        method: 'GET'\n      });\n    },\n    patchHelpInAppMessage(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/help/in_app_messages/${uid}/`,\n        method: 'PATCH',\n        data: JSON.stringify(data),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n\n    setLanguage(data) {\n      return $ajax({\n        url: `${ROOT_URL}/i18n/setlang/`,\n        method: 'POST',\n        data: data\n      });\n    },\n    environment() {\n      return $ajax({url: `${ROOT_URL}/environment/`,method: 'GET'});\n    },\n    login: (creds)=> {\n      return $ajax({ url: `${ROOT_URL}/api-auth/login/?next=/me/`, data: creds, method: 'POST'});\n    }\n  });\n}).call(dataInterface = {});\n","chai = require('chai')\nchaiExpect = chai.expect\n\nmodule.exports =\n  chai: chaiExpect\n  expect: (x)->\n    toBe: (y)->\n      chaiExpect(x).to.equal(y)\n    toThrow: (e)->\n      chaiExpect(x).to.throw(e)\n    toBeDefined: ()->\n      chaiExpect(x).not.to.be.a('undefined')\n    toContain: (y)->\n      chaiExpect(x).to.contain(y)\n    toEqual: (y)->\n      chaiExpect(x).eql(y)\n    toBeTruthy: ->\n      chaiExpect(x).to.be.ok\n    toBeUndefined: ->\n      chaiExpect(x).to.be.a('undefined')\n    'not':\n      toEqual: (y)->\n        chaiExpect(x).to.not.eql(y)\n      toBe: (y)->\n        chaiExpect(x).to.not.equal(y)\n      toThrow: (e)->\n        chaiExpect(x).to.not.throw(e)\n      toBeTruthy: ->\n        chaiExpect(x).to.not.be.ok\n      toBeDefined: ->\n        chaiExpect(x).to.be.a('undefined')\n","###\npainstakingly reverse-compiled from this file in dkobo:\nhttps://github.com/kobotoolbox/dkobo/blob/225ca1/dkobo/koboform/static/js/xlform/rowDetailsSkipLogic.model.rowDetails.skipLogic.coffee\n###\n\n_ = require 'underscore'\nBackbone = require 'backbone'\n$utils = require './model.utils'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n\nrowDetailsSkipLogic = {}\n\nclass rowDetailsSkipLogic.SkipLogicFactory\n  create_operator: (type, symbol, id) ->\n    switch type\n      when 'text' then operator = new rowDetailsSkipLogic.TextOperator symbol\n      when 'date' then operator = new rowDetailsSkipLogic.DateOperator symbol\n      when 'basic' then operator = new rowDetailsSkipLogic.SkipLogicOperator symbol\n      when 'existence' then operator = new rowDetailsSkipLogic.ExistenceSkipLogicOperator symbol\n      when 'select_multiple' then operator = new rowDetailsSkipLogic.SelectMultipleSkipLogicOperator symbol\n      when 'empty' then return new rowDetailsSkipLogic.EmptyOperator()\n    operator.set 'id', id\n    operator\n  create_criterion_model: () ->\n    new rowDetailsSkipLogic.SkipLogicCriterion(@, @survey)\n  create_response_model: (type) ->\n    model = null\n    switch type\n      when 'integer' then model = new rowDetailsSkipLogic.IntegerResponseModel\n      when 'decimal' then model = new rowDetailsSkipLogic.DecimalResponseModel\n      else model = new rowDetailsSkipLogic.ResponseModel(type)\n    model.set 'type', type\n  constructor: (@survey) ->\n\nclass rowDetailsSkipLogic.SkipLogicCriterion extends Backbone.Model\n  serialize: () ->\n    response_model = @get('response_value')\n\n    if `response_model != null && this.get('operator') != null && this.get('question_cid') != null && response_model.isValid() !== false && response_model.get('value') != null && this._get_question()`\n      @_get_question().finalize()\n      `var questionName = this._get_question().getValue('name')`\n      return @get('operator').serialize(questionName, response_model.get('value'))\n    else\n      return ''\n  _get_question: () ->\n    @survey.findRowByCid(this.get('question_cid'), { includeGroups: true })\n\n\n  change_question: (cid) ->\n    # old_question_type = this._get_question()?.get_type() or { name: null }\n    # # compiles incorrectly (extra != null)\n    # - old_question_type = ((_ref = this._get_question()) != null ? _ref.get_type() : void 0) || { name: null };\n    # + old_question_type = ((_ref = this._get_question()) ? _ref.get_type() : void 0) || { name: null };\n    # old_question_type = @neverDefined?.increment_coffee_ref()\n    # old_question_type = (if `this._get_question()` then this._get_question().get_type()) or { name: null }\n    old_question_type = @_get_question()?.get_type?() or { name: null }\n    @set('question_cid', cid)\n    question_type = @_get_question().get_type()\n\n    if @get('operator').get_id() not in question_type.operators\n      @change_operator question_type.operators[0]\n    else if old_question_type.name != question_type.name\n      @change_operator @get('operator').get_value()\n\n    if !@get('operator').get_type().response_type? && @_get_question().response_type != @get('response_value')?.get_type()\n      return `this.change_response((response_model = this.get('response_value')) != null ? this._get_question()._isSelectQuestion() ? response_model.get('cid') : response_model.get('value') : '')`\n  change_operator: (operator) ->\n    operator = +operator\n    is_negated = false\n    if operator < 0\n      is_negated = true\n      operator *=-1\n\n    question_type = @_get_question().get_type()\n\n    if !(operator in question_type.operators)\n      return\n\n    type = $skipLogicHelpers.operator_types[operator - 1]\n    symbol = type.symbol[type.parser_name[+is_negated]]\n    operator_model = @factory.create_operator (if type.type == 'equality' then question_type.equality_operator_type else type.type), symbol, operator\n    @set('operator', operator_model)\n\n    if (type.response_type || question_type.response_type) != @get('response_value')?.get('type')\n      # -        return this.change_response(((_ref1 = this.get('response_value')) != null ?\n      # +        return this.change_response(((_ref1 = this.get('response_value')) != null ?\n      # -           _ref1.get(this._get_question()._isSelectQuestion() ? 'cid' : 'value')\n      # -             : void 0) || '');\n      # +           this._get_question()._isSelectQuestion() ? _ref1.get('cid') : _ref1.get('value')\n      # +             : void 0) || '');\n      @change_response @get('response_value')?.get(if @_get_question()._isSelectQuestion() then 'cid' else 'value') or ''\n  get_correct_type: () ->\n    @get('operator').get_type().response_type || @_get_question().get_type().response_type\n\n  set_option_names: (options) ->\n    _.each(options, (model)->\n      if (`model.get('name') == null`)\n        model.set('name', $utils.sluggify(model.get('label')))\n    )\n    ``\n\n  change_response: (value) ->\n    response_model = @get('response_value')\n    if !response_model || response_model.get('type') != @get_correct_type()\n      response_model = @factory.create_response_model @get_correct_type()\n      @set('response_value', response_model)\n\n    if @get_correct_type() == 'dropdown'\n      current_value = `response_model ? response_model.get('cid') : null`\n      `var choicelist = this._get_question().getList()`\n      response_model.set('choicelist', choicelist)\n      choices = choicelist.options.models\n      this.set_option_names(choices)\n\n      # current_value = response_model?.get('value')\n      # choices = @_get_question().getList().options.models\n\n      # _.each choices, (model) ->\n      #   if !model.get('name')?\n      #     model.set('name', rowDetailsSkipLogic.sluggify model.get 'label')\n\n      choice_cids = _.map(choices, (model) -> model.cid)\n\n      if value in choice_cids\n        response_model.set_value value\n      else if current_value in choice_cids\n        response_model.set_value current_value\n      else\n        response_model.set_value choices[0].cid\n    else\n      response_model.set_value(value)\n  constructor: (@factory, @survey) ->\n    super()\n\n\nclass rowDetailsSkipLogic.Operator extends Backbone.Model\n  serialize: (question_name, response_value) ->\n    throw new Error(\"Not Implemented\")\n  get_value: () ->\n    val = ''\n    if @get 'is_negated'\n      val = '-'\n    val + @get 'id'\n  get_type: () ->\n    $skipLogicHelpers.operator_types[@get('id') - 1]\n  get_id: () ->\n    @get 'id'\n\nclass rowDetailsSkipLogic.EmptyOperator extends rowDetailsSkipLogic.Operator\n  serialize: () -> ''\n  constructor: () ->\n    super()\n    @set 'id', 0\n    @set 'is_negated', false\n\nclass rowDetailsSkipLogic.SkipLogicOperator extends rowDetailsSkipLogic.Operator\n  serialize: (question_name, response_value) ->\n    return '${' + question_name + '} ' + @get('symbol') + ' ' + response_value\n  constructor: (symbol) ->\n    super()\n    @set('symbol', symbol)\n    this.set('is_negated', [\n      '!=',\n      '<',\n      '<=',\n    ].indexOf(symbol) > -1)\n    # @set('is_negated', symbol == '!=')\n\nclass rowDetailsSkipLogic.TextOperator extends rowDetailsSkipLogic.SkipLogicOperator\n  serialize: (question_name, response_value) ->\n    return super(question_name, \"'\" + response_value.replace(/'/g, '\\\\\\'') + \"'\")\n\nclass rowDetailsSkipLogic.DateOperator extends rowDetailsSkipLogic.SkipLogicOperator\n  serialize: (question_name, response_value) ->\n    if `response_value.indexOf('date') == -1`\n      response_value = 'date(\\'' + response_value + '\\')';\n    return super(question_name, response_value)\n\nclass rowDetailsSkipLogic.ExistenceSkipLogicOperator extends rowDetailsSkipLogic.SkipLogicOperator\n  serialize: (question_name) ->\n    return super(question_name, \"''\")\n  constructor: (operator) ->\n    super(operator)\n    @set('is_negated', operator == '=')\n\nclass rowDetailsSkipLogic.SelectMultipleSkipLogicOperator extends rowDetailsSkipLogic.SkipLogicOperator\n  serialize: (question_name, response_value) ->\n    selected = \"selected(${\" + question_name + \"}, '\" + response_value + \"')\"\n\n    if @get('is_negated')\n      return 'not(' + selected + ')'\n    return selected\n\nclass rowDetailsSkipLogic.ResponseModel extends Backbone.Model\n  constructor: (type)->\n    super()\n    if type is 'dropdown'\n      @_set_value = @set_value\n      @set_value = (cid)->\n        choice = @get('choicelist').options.get(cid)\n        if choice\n          @_set_value(choice.get('name'))\n          @set('cid', cid)\n        ``\n  get_type: () ->\n    return @get('type')\n  set_value: (value) ->\n    @set('value', value, validate: true)\n\nclass rowDetailsSkipLogic.IntegerResponseModel extends rowDetailsSkipLogic.ResponseModel\n  validation:\n    value:\n      pattern: /^-?\\d+$/\n      msg: 'Number must be integer'\n  set_value: (value)->\n    if value is ''\n      value = `undefined`\n    this.set 'value', value, validate: !!value\n\nclass rowDetailsSkipLogic.DecimalResponseModel extends rowDetailsSkipLogic.ResponseModel\n  validation:\n    value:\n      pattern: 'number'\n      msg: 'Number must be decimal'\n  set_value: (value) ->\n    `function value_is_not_number() {\n      return typeof value !== 'number';\n    }`\n\n    if typeof value is 'undefined' or value is ''\n      value = null\n    else\n      if value_is_not_number()\n        value = value.replace(/\\s/g, '')\n        value = +value || value\n\n      if value_is_not_number()\n        value = +value.replace(',', '.') || value\n\n      if value_is_not_number()\n        if value.lastIndexOf(',') > value.lastIndexOf('.')\n          value = +value.replace(/\\./g, '').replace(',', '.')\n        else\n          value = +value.replace(',', '')\n\n      # if value.lastIndexOf(',') > value.lastIndexOf('.')\n      #   final_value = +(value.replace(/\\./g, '').replace(',', '.'))\n      # else\n      #   final_value = +(value.replace(',', ''))\n    @set('value', value, validate: true)\n\nclass rowDetailsSkipLogic.DateResponseModel extends rowDetailsSkipLogic.ResponseModel\n  validation:\n    value:\n      pattern: /date\\(\\'\\d{4}-\\d{2}-\\d{2}\\'\\)/\n  set_value: (value) ->\n    if /^\\d{4}-\\d{2}-\\d{2}$/.test(value)\n      value = \"date('\" + value + \"')\"\n    @set('value', value, validate: true)\n\nmodule.exports = rowDetailsSkipLogic\n","_ = require 'underscore'\njQuery = require 'jquery'\nValidator = require './view.utils.validator'\n\nmodule.exports = do ->\n  viewUtils = {}\n  viewUtils.Validator = Validator\n\n  # replaces characters that jQuery can't handle in event name\n  viewUtils.normalizeEventName = (eventName) ->\n    regex = new RegExp('[: ()]', 'g')\n    eventName = eventName.replace(regex, '-');\n    return eventName\n\n  viewUtils.reorderElemsByData = (selector, parent, dataAttribute)->\n    arr = []\n    parentEl = false\n    $(parent).find(selector).each (i)->\n      if i is 0\n        parentEl = @parentElement\n      else if @parentElement isnt parentEl\n        throw new Error(\"All reordered items must be siblings\")\n\n      $el = $(@).detach()\n      val = $el.data(dataAttribute)\n      arr[val] = $el  if _.isNumber(val)\n    $el.appendTo(parentEl)  for $el in arr when $el\n    return\n\n  viewUtils.cleanStringify = (atts)->\n    attArr = []\n    for key, val of atts when val isnt \"\"\n      attArr.push \"\"\"<span class=\"atts\"><i>#{key}</i>=\"<em>#{val}</em>\"</span>\"\"\"\n    attArr.join(\"&nbsp;\")\n\n  viewUtils.debugFrame = do ->\n    $div = false\n    debugFrameStyle =\n      position: \"fixed\"\n      width: \"95%\"\n      height: \"80%\"\n      bottom: 10\n      left: \"2.5%\"\n      overflow: \"auto\"\n      zIndex: 100\n      backgroundColor: \"rgba(255,255,255,0.7)\"\n\n    showFn = (txt)->\n      html = txt.split(\"\\n\").join(\"<br>\")\n      $div = $(\"<div>\", class: \"well debug-frame\").html(\"<code>#{html}</code>\")\n        .css(debugFrameStyle)\n        .appendTo(\"body\")\n    showFn.close = ->\n      if $div\n        $div.remove()\n        $div = false\n    showFn\n\n  viewUtils.launchQuestionLibrary = do ->\n    launch = (opts={})->\n      wrap = $(\"<div>\", class: \"js-click-remove-iframe iframe-bg-shade\")\n      $(\"<div>\").text(\"\"\"\n        Launch question library in this element\n        <section koboform-question-library=\"\"></section>\n      \"\"\").appendTo(wrap)\n      wrap.click ()-> wrap.remove()\n      wrap\n\n    launch\n\n  viewUtils.enketoIframe = do ->\n    enketoServer = \"https://enketo.org\"\n    enketoPreviewUri = \"/webform/preview\"\n    buildUrl = (previewUrl)->\n      \"\"\"#{enketoServer}#{enketoPreviewUri}?form=#{previewUrl}\"\"\"\n\n    _loadConfigs = (options)->\n      if options.enketoPreviewUri\n        enketoPreviewUri = options.enketoPreviewUri\n      if options.enketoServer\n        enketoServer = options.enketoServer\n\n    clickCloserBackground = ->\n      $(\"<div>\", class: \"js-click-remove-iframe\")\n\n    launch = (previewUrl, options={})->\n      _loadConfigs(options)\n      console.log options\n      $(\".enketo-holder\").append $(\"<iframe>\", src: buildUrl(previewUrl))\n      $(\".enketo-holder iframe\").load ()->\n        # alert \"iframe loaded yo!\"\n        $(\".enketo-loading-message\").remove()\n\n    launch.close = ()->\n      $(\".iframe-bg-shade\").remove()\n      $(\".enketo-holder\").remove()\n\n    launch.fromCsv = (surveyCsv, options={})->\n      holder = $(\"<div>\", class: \"enketo-holder\").html(\"\"\"\n        <div class='enketo-iframe-icon'></div>\n        <div class=\"enketo-loading-message\">\n          <p>\n          <i class=\"fa fa-spin fa-spinner\"></i>\n          <br/>\n          Loading Preview\n        </p>\n        <p>\n          This will take a few seconds depending on the size of your form.\n        </p>\n        </div>\n      \"\"\")\n      wrap = $(\"<div>\", class: \"js-click-remove-iframe iframe-bg-shade\")\n      holder.appendTo('body')\n      wrap.appendTo('body')\n\n      wrap.click ()->\n        wrap.remove()\n        holder.remove()\n\n      $('.enketo-holder .enketo-iframe-icon').click ()->\n        wrap.remove()\n        holder.remove()\n\n      previewServer = options.previewServer or \"\"\n      data = JSON.stringify(body: surveyCsv)\n      _loadConfigs(options)\n      onError = options.onError or (args...)-> console?.error.apply(console, args)\n\n      $.ajax\n        url: \"#{previewServer}/koboform/survey_preview/\"\n        method: \"POST\"\n        data: data\n        complete: (jqhr, status)=>\n          response = jqhr.responseJSON\n          if status is \"success\" and response and response.unique_string\n            unique_string = response.unique_string\n            launch(\"#{previewServer}/koboform/survey_preview/#{unique_string}\")\n            options.onSuccess()  if options.onSuccess?\n          else if status isnt \"success\"\n            wrap.remove()\n            holder.remove()\n            informative_message = jqhr.responseText or jqhr.statusText\n            if informative_message.split(\"\\n\").length > 0\n              informative_message = informative_message.split(\"\\n\")[0..2].join(\"<br>\")\n            onError informative_message, title: 'Error launching preview'\n          else if response and response.error\n            wrap.remove()\n            holder.remove()\n            onError response.error\n          else\n            wrap.remove()\n            holder.remove()\n            onError \"SurveyPreview response JSON is not recognized\"\n\n    launch\n\n  class viewUtils.ViewComposer\n    add: (view, id) ->\n      @views.push view\n    remove: (id) -> throw 'not implemented'\n    get: (id) -> throw 'not implemented'\n    render: () ->\n      for view in @views\n        view.render()\n    attach_to: (destination) ->\n      for view in @views\n        view.attach_to destination\n    bind_event: (event_name, callback) -> throw 'not implemented'\n    constructor: () ->\n      @views = []\n\n  viewUtils\n","_ = require 'underscore'\nbase = require './model.base'\n$modelUtils = require './model.utils'\n\nmodule.exports = do ->\n\n  choices = {}\n\n  class choices.Option extends base.BaseModel\n    initialize: ->\n      @unset(\"list name\")\n      @unset(\"list_name\")\n    destroy: ->\n      choicelist = @list()._parent\n      choicelist_cid = choicelist.cid\n      survey = choicelist.collection._parent\n      @collection.remove(@)\n      survey.trigger('remove-option', choicelist_cid, @cid)\n    list: -> @collection\n    getKeys: (with_val)->\n      # returns a list of columns in the xlsform.\n      # if `with_val` is true, only returns columns that\n      # have an associated value.\n      keys = []\n      for key, attribute of @attributes\n        if !with_val\n          keys.push(key)\n        else if @get key\n          keys.push(key)\n      keys\n    toJSON: ()->\n      attributes = {}\n      for key, attribute of @attributes\n        attributes[key] = @get key\n      attributes\n\n  class choices.Options extends base.BaseCollection\n    model: choices.Option\n\n  class choices.ChoiceList extends base.BaseModel\n    idAttribute: \"name\"\n    constructor: (opts={}, context)->\n      options = opts.options || []\n      super name: opts.name, context\n      @options = new choices.Options(options || [], _parent: @)\n    summaryObj: ->\n      @toJSON()\n    getSurvey: ->\n      @collection.getSurvey()\n\n    getList: ->\n      # used for cascading selects: if choiceList is connected to\n      # another choiceList, pass it on.\n      if @__cascadedList\n        @__cascadedList\n      else\n        null\n\n    _get_previous_linked_choice_list: ->\n      @collection.find((cl)=> cl.getList() is @ )\n\n    _get_last_linked_choice_list: ->\n      prev = next = @\n      while next = prev._get_previous_linked_choice_list()\n        prev = next\n      prev\n\n    _get_first_linked_choice_list: ->\n      prev = next = @\n      while next = prev.getList()\n        prev = next\n      prev\n\n    _has_corresponding_row: ->\n      _name = @get('name')\n      !!@getSurvey().rows.find((r)->\n          r.get('type').get('listName') is _name\n        )\n\n    _create_corresponding_row_data: (opts={})->\n      full_path = !!opts._full_path_choice_filter\n      cl = @_get_first_linked_choice_list()\n      prevs = []\n      rows_data = []\n      build_row_data = (curlist)->\n        name = curlist.get 'name'\n        if full_path\n          _choice_filtered = prevs\n        else\n          _choice_filtered = _.compact([_.last(prevs)])\n        {\n          label: name\n          type: \"select_one #{name}\"\n          choice_filter: _choice_filtered.map((cl)->\n              cl_name = cl.get('name')\n              \"#{cl_name}=${#{cl_name}}\"\n            ).join(\" and \")\n        }\n      rows_data.push(build_row_data(cl))\n      next_list = cl\n      prevs.push(cl)\n      while (next_list = next_list._get_previous_linked_choice_list())\n        rows_data.push(build_row_data(next_list))\n        prevs.push(next_list)\n      rows_data\n\n    create_corresponding_rows: (opts={})->\n      rows_data = @_create_corresponding_row_data()\n      survey = @getSurvey()\n      _index = opts.at or 0\n      for row_data in rows_data.reverse()\n        survey.addRowAtIndex(row_data, _index)\n\n    getOptionKeys: (with_val=true)->\n      option_keys = []\n      for option in @options.models\n        for option_key in option.getKeys(with_val)\n          option_keys.push(option_key)\n      _.uniq(option_keys)\n\n    finalize: ->\n      # ensure that all options have names\n      names = []\n      for option in @options.models\n        label = option.get(\"label\")\n        name = option.get(\"name\")\n        if not name\n          name = $modelUtils.sluggify(label, {\n            preventDuplicates: names\n            lowerCase: true\n            lrstrip: true\n            characterLimit: 40\n            incrementorPadding: false\n            validXmlTag: false\n          })\n          option.set(\"name\", name)\n        names.push name\n      return\n\n    clone: () ->\n      json = @toJSON()\n      delete json.name\n      return _.assign(\n          new choices.ChoiceList(json),\n          collection: @collection\n        )\n\n    toJSON: ()->\n      @finalize()\n\n      # Returns {name: '', options: []}\n      name: @get(\"name\")\n      options: @options.invoke(\"toJSON\")\n\n    getNames: ()->\n      names = @options.map (opt)-> opt.get(\"name\")\n      _.compact names\n\n  class choices.ChoiceLists extends base.BaseCollection\n    model: choices.ChoiceList\n    create: ->\n      @add(cl = new choices.ChoiceList(name: $modelUtils.txtid()))\n      cl\n    getListNames: ->\n      @invoke('get', 'name')\n    summaryObj: (shorter=false)->\n      out = {}\n      for model in @models\n        if shorter\n          out[model.get(\"name\")] = model.summaryObj().options\n        else\n          out[model.get(\"name\")] = model.summaryObj()\n      out\n\n  choices\n","module.exports = do ->\n  # The Csv class is only internally accessible, though easy\n  # to instantiate through the `csv` function.\n  #\n  # It receives a parameter (and optional options) which\n  # are stored for later use.\n  class Csv\n    constructor: (param, opts={})->\n      if _isString param\n        @string = param\n        rows = csv.toArray @string\n        @rows = arrayToObjects rows\n        [@columns, @rowArray...] = rows\n      else if _isArray param\n        @rows = param\n        @columns = do =>\n          columns = []\n          for row in @rows\n            columns.push key  for own key of row when key not in columns\n          columns\n        @buildRowArray()\n        @obj = param\n      else if param\n        @columns  = if _isArray param.columns then param.columns else []\n        if param.rowObjects\n          if @columns.length is 0\n            # this may be slow, but it should get all the possible columns\n            for row in param.rowObjects\n              for key, val of row when key not of columns\n                @columns.push key\n          @rowArray = do =>\n            for row in param.rowObjects\n              row[c] for c in @columns\n        else\n          @rowArray = if _isArray param.rows then param.rows else []\n        @kind     = param.kind if param.kind?\n        @rows = do =>\n          for row in @rowArray\n            rowObj = {}\n            for cell, i in row  when @columns[i]?\n              rowObj[@columns[i]] = cell\n            rowObj\n      else\n        @rows     = []\n        @columns  = []\n        @rowArray = []\n\n    buildRowArray: ()->\n      @rowArray = do =>\n        for row in @rows\n          for column in @columns\n            row[column] || \"\"\n\n    addRow: (r)->\n      colsChanged = false\n      for own key, val of r\n        unless key in @columns\n          colsChanged = true\n          @columns.push key\n      @rows.push r\n      if colsChanged\n        @buildRowArray()\n      else\n        @rowArray.push (r[column] for column in @columns)\n      r\n\n    toObjects: (opts={})->\n      if @string\n        return csv.toObjects @string, opts\n      else if @rows\n        @rows\n\n    toObject: ()->\n      out =\n        columns: @columns\n        rows: @rowArray\n      out.kind = @kind  if @kind\n      out\n\n    toArrays: ()->\n      out = [@columns]\n      out.push row  for row in @rowArray when row.length > 0\n      out\n\n    toString: ()->\n      headRow = (asCsvCellValue cell for cell in @columns).join(csv.settings.delimiter)\n      headRow + \"\\n\" + (for row in @rowArray\n        (asCsvCellValue cell for cell in row).join csv.settings.delimiter).join(\"\\n\")\n\n  csv = (param, opts)->\n    if param instanceof Csv then param else new Csv param, opts\n\n  _remove_extra_escape_chars = (ss)->\n    ss.replace(/\\\\\\\\/g, '\\\\')\n\n  asCsvCellValue = (cell)->\n    if cell is undefined\n      \"\"\n    else if ///\\W|\\w|#{csv.settings.delimiter}///.test cell\n      outstr = JSON.stringify(\"\" + cell)\n      _remove_extra_escape_chars outstr\n    else\n      cell\n\n  csv.fromStringArray = (outpArr, opts={})->\n    outArr = for row in outpArr\n      (asCsvCellValue cell for cell in row).join csv.settings.delimiter\n    outArr.join \"\\n\"\n\n  csv.fromArray = (arr, opts={})->\n    sort        = !!opts.sort\n    headRow     = []\n    for row in arr\n      headRow.push key  for own key of row when -1 is headRow.indexOf key\n    headRow.sort()  if sort\n    outpArr = for row in arr\n      asCsvCellValue row[col]  for col in headRow\n    outpArr.unshift (asCsvCellValue col  for col in headRow)\n    csv.fromStringArray outpArr, opts\n\n  csv.toObjects = (csvString)->\n    arrayToObjects csv.toArray csvString\n\n  arrayToObjects = (arr)->\n    [headRow, rows...] = arr\n    for row in rows when !(row.length is 1 and row[0] is \"\")\n      obj = {}\n      for key, i in headRow\n        obj[key] = row[i]\n      obj\n\n  csv.toObject = (csvString, opts)->\n    arrayToObject csv.toArray(csvString), opts\n\n  arrayToObject = (arr, opts={})->\n    [headRow, rows...] = arr\n\n    sortByKey         = opts.sortByKey\n    includeSortByKey  = opts.includeSortByKey\n\n    unless sortByKey\n      sortByKey = headRow[0]\n\n    sortByKeyI = headRow.indexOf sortByKey\n\n    out = {}\n    for row in rows when !(row.length is 1 and row[0] is \"\")\n      obj = {}\n      sbKeyVal = row[sortByKeyI]\n      obj[key] = row[i]  for key, i in headRow when i isnt sortByKeyI\n      obj[sortByKey] = sbKeyVal  if includeSortByKey\n      out[sbKeyVal] = obj\n    out\n\n  removeTrailingNewlines = (str)-> str.replace(/(\\n+)$/g, \"\")\n\n  csv._parse_string = (c)->\n    JSON.parse('\"' + c.replace(/\\\\/g, '\\\\\\\\').replace(/\\\\\\\\\"/g, '\\\\\"') + '\"')\n\n  # The `csv.toArray` function, pulled from this [stackoverflow comment](http://stackoverflow.com/questions/1293147/javascript-code-to-parse-csv-data)\n  # will parse a delimited string into an array of\n  # arrays. The default delimiter is the comma, but this\n  # can be overriden in the second argument.\n\n  csv.toArray = (strData) ->\n    if csv.settings.removeTrailingNewlines\n      strData = removeTrailingNewlines(strData)\n    strDelimiter = csv.settings.delimiter\n\n    rows = []\n    row = []\n\n    # The `objPattern` regular expression pulls out\n    #\n    # * Delimiters\n    # * quoted fields\n    # * and standard fields\n\n    ###\n    this regexp needs to be compiled with coffee-script 1.6.3\n    or, escape characters need to be escaped (see csv._objPattern\n    below this comment)\n\n    csv._objPattern = ///\n      (\n        \\ #{strDelimiter}\n        |\n        \\r?\\n\n        |\n        \\r\n        |\n        ^\n      )\n      (?:\n        \"(\n          (?:\n            (?:\n              [^\\\\]\n              |\n              \\\\\\\\\n              |\n              [\\\\(?=\")]\"\n              |\n              [\\\\(?!\")]\n            )*?\n          )\n        )\"\n        # > a simpler version that fails\n        # > when cell ends with a backslash:\n        # \"(\n        #   (?:\n        #     \\\\\"\n        #     |\n        #     [^\"]\n        #   )*\n        # )\"\n        |\n        (\n          [^\"\\ #{strDelimiter}\\r\\n]*\n        )\n      )\n    ///gi\n    ###\n\n    csv._objPattern = `new RegExp('(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"((?:(?:[^\\\\\\\\]|\\\\\\\\\\\\\\\\|[\\\\\\\\(?=\")]\"|[\\\\\\\\(?!\")])*?))\"|([^\"\\\\,\\\\r\\\\n]*))', 'gi')`\n\n    while arrMatches = csv._objPattern.exec(strData)\n      strMatchedDelimiter = arrMatches[1]\n\n      if strMatchedDelimiter.length and (strMatchedDelimiter isnt strDelimiter)\n        rows.push row\n        row = []\n\n      if arrMatches[2]\n        # cell is wrapped in quotes\n        strMatchedValue = csv._parse_string(arrMatches[2])\n      else\n        # cell is not wrapped in quotes\n        strMatchedValue = arrMatches[3]\n\n      if csv.settings.parseFloat and !isNaN (parsedMatch = parseFloat strMatchedValue)\n        strMatchedValue = parsedMatch\n\n      row.push strMatchedValue\n    rows.push row\n    rows\n\n\n  #### Sheeted CSVs\n  #\n  # A \"sheeted csv\" is a [made-up] term for a csv where value in the\n  # first column corresponds to the \"sheet name\" and any remaining columns\n  # are treated as contents of that sheet.\n  #\n  # *coffeescript example:*\n  #\n  #      sheetedCsv = \"\"\"\n  #        survey\n  #        ,label,type\n  #        ,Name:,text\n  #        ,Favorite color:,select_one colors\n  #        choices,,\n  #        ,list,label\n  #        ,colors,Black\n  #        ,colors,White\n  #        settings,col1,col2\n  #        ,setting1,true\n  #        ,setting2,false\n  #      \"\"\"\n\n  class SheetedCsv\n    constructor: (param, opts)->\n      @_sheetIds = []\n      @_sheets = {}\n      if _isString param\n        parseSheetedCsv param, (osids, sheets)=>\n          for id in osids\n            [columns, rows...] = sheets[id]\n            @sheet id, csv columns: columns, rows: rows\n\n    sheet: (sheetId, contents=false)->\n      if contents\n        unless sheetId in @_sheetIds\n          @_sheetIds.push sheetId\n        @_sheets[sheetId] = contents\n      else\n        @_sheets[sheetId]\n    toString: ()->\n      outp = []\n      delimiter = csv.settings.delimiter\n      for sheetId in @_sheetIds\n        sheet = @_sheets[sheetId]\n        cols = sheet.columns\n        rowA = sheet.rowArray\n        headRowStr = asCsvCellValue sheetId\n        headRowStr += delimiter  for i in [0...cols.length]\n        outp.push headRowStr\n        outp.push delimiter + (asCsvCellValue col for col in cols).join delimiter\n        for row in rowA\n          outp.push delimiter + (asCsvCellValue cell for cell in row).join delimiter\n      outp.join(\"\\n\")\n\n  csv.sheeted = (param, opts)->\n    if param instanceof SheetedCsv then param else new SheetedCsv param, opts\n\n  # typically, most rows of a sheeted csv begin with an empty cell.\n  #\n  # *Note: When a sheet id is repeated, the contents are appended to the original sheet*\n\n  parseSheetedCsv = (shcsv, cb=false)->\n    sheets = {}\n    orderedSheetIds = []\n\n    for [cell1, remaining...] in csv.toArray shcsv\n      if cell1\n        curSheet = cell1\n\n      unless curSheet\n        throw new Error \"\"\"\n          Sheet id must be defined in the first column and cannot be falsey\n          \"\"\"\n\n      unless curSheet in orderedSheetIds\n        orderedSheetIds.push curSheet\n\n      unless sheets[curSheet]\n        sheets[curSheet] = []\n\n      lineHasContent = do ->\n        return true  for item in remaining when item\n\n      sheets[curSheet].push remaining  if lineHasContent\n\n    unless cb\n      return [orderedSheetIds, sheets]\n\n    cb.apply @, [orderedSheetIds, sheets]\n\n  # The function `csv.sheeted.toObjects(sheetedCsv)`\n  # takes a sheeted csv and builds sheets individually\n  # as it would in `csv.toObjects`\n  csv.sheeted.toObjects = (shCsv)-> parseSheetedCsv shCsv, (osids, sheets)->\n    output = {}\n    for sheet in osids\n      output[sheet] = arrayToObjects sheets[sheet]\n    output\n\n  # The function `csv.sheeted.toArray(sheetedCsv)`\n  # preserves the order of the sheets.\n  csv.sheeted.toArray = (shCsv)-> parseSheetedCsv shCsv, (osids, sheets)->\n    for sheet in osids\n      id: sheet\n      sheet: arrayToObjects sheets[sheet]\n\n\n  # Misc. helper methods carried over from underscore.coffee\n  _isString       = (obj) -> !!(obj is '' or (obj and obj.charCodeAt and obj.substr))\n  _nativeIsArray  = Array.isArray\n  _isArray        = _nativeIsArray or (obj) -> !!(obj and obj.concat and obj.unshift and not obj.callee)\n  _nativeKeys     = Object.keys\n  _keys           = _nativeKeys or (obj)->\n    return new Array obj.length  if _isArray(obj)\n    key for key, val of obj\n\n  csv.settings =\n    delimiter: \",\"\n    parseFloat: false\n    removeTrailingNewlines: true\n\n  csv\n","var chai = require('chai');\nvar expect = chai.expect;\n\nwindow.jQuery = window.$ = require('jquery');\nrequire('jquery-ui/ui/widgets/sortable');\n\nrequire('./xlform/aliases.tests');\nrequire('./xlform/choices.tests');\nrequire('./xlform/csv.tests');\nrequire('./xlform/deserializer.tests');\nrequire('./xlform/group.tests');\nrequire('./xlform/inputParser.tests');\nrequire('./xlform/translations.tests');\n// require('./xlform/integration.tests');\nrequire('./xlform/model.tests');\nrequire('./xlform/survey.tests');\nrequire('./xlform/utils.tests');\n\nrequire('../jsapp/js/utils.tests');\nrequire('../jsapp/js/components/permissions/permParser.tests');\nrequire('../jsapp/js/assetUtils.tests');\n","_ = require 'underscore'\n$base = require './model.base'\n$choices = require './model.choices'\n$modelUtils = require './model.utils'\n$configs = require './model.configs'\n$surveyFragment = require './model.surveyFragment'\n$surveyDetail = require './model.surveyDetail'\n$inputDeserializer = require './model.inputDeserializer'\n$inputParser = require './model.inputParser'\n$markdownTable = require './model.utils.markdownTable'\ncsv = require './csv'\n\nmodule.exports = do ->\n  class Survey extends $surveyFragment.SurveyFragment\n    constructor: (options={}, addlOpts)->\n      super()\n      if options.error\n        throw new Error(\"instantiating survey with error parameter\")\n      @_initialParams = options\n\n      @settings = new Settings(options.settings, _parent: @)\n      if !options.settings\n        @settings.enable_auto_name()\n\n      if (sname = @settings.get(\"name\") or options.name)\n        @set(\"name\", sname)\n\n      @newRowDetails = options.newRowDetails || $configs.newRowDetails\n      @defaultsForType = options.defaultsForType || $configs.defaultsForType\n\n      @surveyDetails = new $surveyDetail.SurveyDetails([], _parent: @).loadSchema(options.surveyDetailsSchema || $configs.surveyDetailSchema)\n      @choices = new $choices.ChoiceLists([], _parent: @)\n      $inputParser.loadChoiceLists(options.choices || [], @choices)\n\n      if options.survey\n        if !$inputParser.hasBeenParsed(options)\n          options.survey = $inputParser.parseArr(options.survey)\n        for r in options.survey\n          if typeof r.id isnt 'undefined'\n            throw new Error(\"Forbidden column `id` for row: #{JSON.stringify(r, null, 2)}\")\n\n          if r.type in $configs.surveyDetailSchema.typeList()\n            @surveyDetails.importDetail(r)\n          else\n            @rows.add r, collection: @rows, silent: true, _parent: @rows\n      else\n        @surveyDetails.importDefaults()\n      @context =\n        warnings: []\n        errors: []\n      @forEachRow (r)=>\n        if typeof r.linkUp is 'function'\n          r.linkUp(@context)\n      @linkUpChoiceLists()\n\n    @create: (options={}, addlOpts) ->\n      return new Survey(options, addlOpts)\n\n    linkUpChoiceLists: ->\n      # In case of cascading selects, this will ensure choiceLists are connected to\n      # sub choice lists through a private \"__cascadeList\" property\n      choiceKeys = @choices.getListNames()\n      for choiceList in @choices.models\n        overlapping_choice_keys = _.intersection(choiceKeys, choiceList.getOptionKeys(true))\n        if overlapping_choice_keys.length > 1\n          throw new Error(\"cascading choices can only reference one choice list\")\n        else if overlapping_choice_keys.length is 1\n          choiceList.__cascadedList = @choices.get(overlapping_choice_keys[0])\n      return\n\n    insert_row: (row, index) ->\n      if row._isCloned\n        @rows.add(row, at: index)\n      else\n        @rows.add(row.toJSON(), at: index)\n      new_row = @rows.at(index)\n      survey = @getSurvey()\n      if rowlist = row.getList()\n        survey.choices.add(options: rowlist.options.toJSON())\n        new_row.get('type').set('list', rowlist)\n      name_detail = new_row.get('name')\n      name_detail.set 'value', name_detail.deduplicate(survey)\n\n    _ensure_row_list_is_copied: (row)->\n      if !row.rows && rowlist = row.getList()\n        @choices.add(name: rowlist.get(\"name\"), options: rowlist.options.toJSON())\n\n    insertSurvey: (survey, index=-1, targetGroupId)->\n      index = @rows.length if index is -1\n      for row, row_i in survey.rows.models\n        # if target is a group, not root list of rows, we need to switch\n        target = @\n        if targetGroupId\n          foundGroup = @findRowByCid(targetGroupId, {includeGroups: true})\n          if foundGroup\n            target = foundGroup\n          else\n            throw new Error(\"Couldn't find group #{targetGroupId}!\")\n\n        index_incr = index + row_i\n\n        # inserting a group\n        if row.rows\n          if row.forEachRow\n            row.forEachRow(\n              (r) => @_ensure_row_list_is_copied(r),\n              {includeGroups: true}\n            )\n\n          @_insertRowInPlace(\n            row,\n            {\n              index: index_incr,\n              parent: target,\n              noDetach: true\n            }\n          )\n\n          # inserting a group (block from Library) doesn't trigger change event\n          # anywhere else, so we do it here manually\n          @trigger('change')\n        # inserting a question\n        else\n          @_ensure_row_list_is_copied(row)\n          name_detail = row.get('name')\n          name_detail.set 'value', name_detail.deduplicate(@)\n          target.rows.add(\n            row.toJSON(),\n            at: index_incr\n          )\n      return\n\n    toFlatJSON: (stringify=false, spaces=4)->\n      obj = @toJSON()\n\n      obj.survey = for row in obj.survey\n        if _.isObject(row.type)\n          row.type = [\n            _.keys(row.type)[0], _.values(row.type)[0]\n          ].join(' ')\n        row\n      if _.isObject(obj.choices)\n        flattened_choices = []\n        for own key, val of obj.choices\n          for list_item in val\n            _c = $.extend({list_name: key}, list_item)\n            delete _c.setManually\n            flattened_choices.push(_c)\n        obj.choices = flattened_choices\n\n      obj.settings = [@settings.attributes]\n\n      if stringify\n        JSON.stringify(obj, null, spaces)\n      else\n        obj\n\n    toJSON: (stringify=false, spaces=4)->\n      obj = {}\n\n      addlSheets =\n        choices: new $choices.ChoiceLists()\n\n      obj.survey = do =>\n        out = []\n        fn = (r)->\n          if 'getList' of r and (l = r.getList())\n            addlSheets.choices.add(l)\n\n          if typeof r.export_relevant_values is 'function'\n            r.export_relevant_values(out, addlSheets)\n          else\n            console.error 'No r.export_relevant_values. Does this survey have non-standard columns?', r\n\n        @forEachRow fn, includeGroupEnds: true\n\n        for sd in @surveyDetails.models when sd.get(\"value\")\n          out.push sd.toJSON()\n\n        out\n\n      for shtName, sheet of addlSheets when sheet.length > 0\n        obj[shtName] = sheet.summaryObj(true)\n\n      if stringify\n        JSON.stringify(obj, null, spaces)\n      else\n        obj\n    getSurvey: -> @\n    log: (opts={})->\n      logFn = opts.log or (a...)-> console.log.apply(console, a)\n      tabs = ['-']\n      logr = (r)->\n        if 'forEachRow' of r\n          logFn tabs.join('').replace(/-/g, '='), r.get('label').get('value')\n          tabs.push('-')\n          r.forEachRow(logr, flat: true, includeGroups: true)\n          tabs.pop()\n        else\n          logFn tabs.join(''), r.get('label').get('value')\n      @forEachRow(logr, flat: true, includeGroups: true)\n      return\n\n    summarize: ->\n      rowCount = 0\n      hasGps = false\n      fn = (r)->\n        if r.get('type').get('value') is 'geopoint'\n          hasGps = true\n        rowCount++\n      @forEachRow(fn, includeGroups: false)\n\n      # summaryObj\n      rowCount: rowCount\n      hasGps: hasGps\n    _insertRowInPlace: (row, opts={})->\n      if row._parent && !opts.noDetach\n        row.detach(silent: true)\n      index = 0\n      if opts.index\n        index = opts.index\n      previous = opts.previous\n      parent = opts.parent\n      if previous\n        parent = previous.parentRow()\n        index = parent.rows.indexOf(previous) + 1\n      if !parent\n        parent = @\n      parent.rows.add(row, {at: index})\n\n      # line below looks like BAD CODE™ but in fact it enables row reordering\n      row._parent = parent.rows\n\n      if opts.event\n        parent.rows.trigger(opts.event)\n      return\n\n    prepCols: (cols, opts={}) ->\n      exclude = opts.exclude or []\n      add = opts.add or []\n      if _.isString(exclude) or _.isString(add)\n        throw new Error(\"prepCols parameters should be arrays\")\n      out = _.filter _.uniq( _.flatten cols), (col) -> col not in exclude\n      out.concat.apply(out, add)\n\n    toSsStructure: ()->\n      out = {}\n      for sheet, content of @toCsvJson()\n        out[sheet] = content.rowObjects\n      out\n    toCsvJson: ()->\n      # build an object that can be easily passed to the \"csv\" library\n      # to generate the XL(S)Form spreadsheet\n\n      @finalize()\n\n      out = {}\n      out.survey = do =>\n        oCols = [\"name\", \"type\", \"label\"]\n        oRows = []\n\n        addRowToORows = (r)->\n          colJson = r.toJSON()\n          for own key, val of colJson when key not in oCols\n            oCols.push key\n          oRows.push colJson\n\n        @forEachRow addRowToORows, includeErrors: true, includeGroupEnds: true\n        for sd in @surveyDetails.models when sd.get(\"value\")\n          addRowToORows(sd)\n\n        columns: oCols\n        rowObjects: oRows\n\n\n      choicesCsvJson = do =>\n        lists = new $choices.ChoiceLists()\n        @forEachRow (r)->\n          _getSubLists = (item)->\n            if 'getList' of item\n              list = item.getList()\n              if list and !lists.get(list.get('name'))\n                lists.add(list)\n                _getSubLists(list)\n          _getSubLists(r)\n\n        rows = []\n        cols = []\n        for choiceList in lists.models\n          choiceList.set(\"name\", $modelUtils.txtid(), silent: true)  unless choiceList.get(\"name\")\n          choiceList.finalize()\n          clAtts = choiceList.toJSON()\n          clName = clAtts.name\n          for option in clAtts.options\n            cols.push _.keys option\n            rows.push _.extend {}, option, \"list_name\": clName\n\n\n        if rows.length > 0\n          columns: @prepCols cols, exclude: ['setManually'], add: ['list_name']\n          rowObjects: rows\n        else\n          false\n\n      out.choices = choicesCsvJson  if choicesCsvJson\n      out.settings = @settings.toCsvJson()\n\n      out\n\n    toMarkdown: ()->\n      $markdownTable.csvJsonToMarkdown(@toCsvJson())\n\n    toCSV: ->\n      sheeted = csv.sheeted()\n      for shtName, content of @toCsvJson()\n        sheeted.sheet shtName, csv(content)\n      sheeted.toString()\n\n  Survey.load = (csv_repr, _usingSurveyLoadCsv=false)->\n    # log('switch to Survey.load.csv')  if !_usingSurveyLoadCsv\n    if _.isString(csv_repr) and not _is_csv(csv_repr)\n      throw Error(\"Invalid CSV passed to form builder\")\n    _deserialized = $inputDeserializer.deserialize csv_repr\n    _parsed = $inputParser.parse _deserialized\n    new Survey(_parsed)\n\n  Survey.load.csv = (csv_repr)->\n    Survey.load(csv_repr, true)\n\n  Survey.load.md = (md)->\n    sObj = $markdownTable.mdSurveyStructureToObject(md)\n    new Survey(sObj)\n  Survey.loadDict = (obj, baseSurvey)->\n    _parsed = $inputParser.parse(obj, baseSurvey)\n    new Survey(_parsed)\n\n  _is_csv = (csv_repr)->\n    # checks that a string has a newline and a comma,\n    # a very simplistic test of a csv\n    '\\n' in csv_repr and ',' in csv_repr\n\n  # Settings (assigned to each $survey.Survey instance)\n  class Settings extends $base.BaseModel\n    validation: {}\n    toCsvJson: ->\n      columns = _.keys(@attributes)\n      rowObjects = [@toJSON()]\n\n      columns: columns\n      rowObjects: rowObjects\n    enable_auto_name: () ->\n      @auto_name = true\n\n      @on 'change:form_id', () =>\n        if @changing_form_title\n          @changing_form_title = false\n        else\n          @auto_name = false\n\n      @on 'change:form_title', (model, value) =>\n        if @auto_name\n          @changing_form_title = true\n          @set 'form_id', $modelUtils.sluggifyLabel(value)\n\n\n\n  Survey: Survey\n  Settings: Settings\n","_ = require 'underscore'\nBackbone = require 'backbone'\n$modelRowDetailsSkipLogic = require './model.rowDetails.skipLogic'\n$viewWidgets = require './view.widgets'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n_t = require('utils').t\n\nPLACEHOLDER_VALUE = 'placeholderVal'\n\nmodule.exports = do ->\n  viewRowDetailSkipLogic = {}\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- View.RowDetail.SkipLogic.CriterionBuilderView.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.SkipLogicCriterionBuilderView extends $viewWidgets.Base\n    events:\n      \"click .skiplogic__deletecriterion\": \"deleteCriterion\"\n      \"click .skiplogic__addcriterion\": \"addCriterion\"\n      \"change .skiplogic__delimselect\": \"markChangedDelimSelector\"\n    render: () ->\n      tempId = _.uniqueId(\"skiplogic_expr\")\n      @$el.html(\"\"\"\n        <p>\n          #{_t(\"This question will only be displayed if the following conditions apply\")}\n        </p>\n        <div class=\"skiplogic__criterialist\"></div>\n        <p class=\"skiplogic__addnew\">\n          <button class=\"skiplogic__addcriterion\">+ #{_t(\"Add another condition\")}</button>\n        </p>\n        <select class=\"skiplogic__delimselect\">\n          <option value=\"and\">#{_t(\"Question should match all of these criteria\")}</option>\n          <option value=\"or\">#{_t(\"Question should match any of these criteria\")}</option>\n        </select>\n      \"\"\")\n\n      delimSelect = @$(\".skiplogic__delimselect\").val(@criterion_delimiter)\n      delimSelect.children('[value=' + @criterion_delimiter + ']').attr('selected', 'selected')\n\n      @\n\n    addCriterion: (evt) =>\n      @facade.view_factory.survey.trigger('change')\n      @facade.add_empty()\n\n    deleteCriterion: (evt)->\n      @facade.view_factory.survey.trigger('change')\n      $target = $(evt.target)\n      modelId = $target.data(\"criterionId\")\n      @facade.remove modelId\n      $target.parent().remove()\n\n    markChangedDelimSelector: (evt) ->\n      @criterion_delimiter = evt.target.value\n\n  class viewRowDetailSkipLogic.SkipLogicCriterion extends $viewWidgets.Base\n    tagName: 'div'\n    className: 'skiplogic__criterion'\n    render: () ->\n\n      @question_picker_view.render()\n      if !@alreadyRendered\n        @$el.append $(\"\"\"<i class=\"skiplogic__deletecriterion fa fa-trash-o\" data-criterion-id=\"#{@model.cid}\"></i>\"\"\")\n\n      @change_operator @operator_picker_view\n      @change_response @response_value_view\n\n      @alreadyRendered = true\n\n      @\n\n    mark_question_specified: (is_specified=false) ->\n      @$el.toggleClass(\"skiplogic__criterion--unspecified-question\", not is_specified)\n\n    bind_question_picker: () ->\n      questionVal = @$question_picker.val()\n\n      @mark_question_specified(questionVal isnt PLACEHOLDER_VALUE)\n\n      if questionVal isnt PLACEHOLDER_VALUE and questionVal isnt ''\n        @question_picker_view.disable_placeholder_option()\n\n      @$question_picker.on('change', (e) =>\n        if e.val is PLACEHOLDER_VALUE\n          console.error(\"Changing question to #{PLACEHOLDER_VALUE} should not happen!\")\n\n        @model.survey.trigger('change')\n\n        @mark_question_specified(e.val isnt PLACEHOLDER_VALUE)\n        @presenter.change_question(e.val)\n        return\n      )\n      return\n\n    bind_operator_picker: () ->\n      @$operator_picker.on('change', () =>\n        @operator_picker_view.value = @$operator_picker.select2 'val'\n        @presenter.change_operator(@operator_picker_view.value)\n        @model.survey.trigger('change')\n      )\n\n    bind_response_value: () ->\n      @response_value_view.bind_event(() =>\n        @presenter.change_response(@response_value_view.val())\n        @model.survey.trigger('change')\n      )\n\n    response_value_handler: () ->\n      @presenter.change_response @response_value_view.val()\n\n    change_operator: (@operator_picker_view) ->\n      @operator_picker_view.render()\n\n      @$operator_picker = @operator_picker_view.$el\n\n    change_response: (response_value_view) ->\n      @response_value_view.detach()\n      @response_value_view = response_value_view\n      @response_value_view.render()\n\n      @$response_value = @response_value_view.$el\n\n    attach_operator: () ->\n      @operator_picker_view.attach_to @$el\n      @bind_operator_picker()\n\n    attach_response: () ->\n      if @$('.skiplogic__responseval-wrapper').length > 0\n        @$('.skiplogic__responseval-wrapper').remove()\n\n      @response_value_view.attach_to(@$el)\n      @bind_response_value()\n\n    attach_to: (element) ->\n      @question_picker_view.attach_to @$el\n      @$question_picker = @question_picker_view.$el\n      @bind_question_picker()\n      @attach_operator()\n      @attach_response()\n      super\n\n    constructor: (@question_picker_view, @operator_picker_view, @response_value_view, @presenter) ->\n      super()\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- View.RowDetail.SkipLogic.QuestionPickerView.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.QuestionPicker extends $viewWidgets.DropDown\n    tagName: 'select'\n    className: 'skiplogic__rowselect'\n\n    render: () ->\n      super()\n\n      # disable placeholder option onLoad and onChange\n      if @$el.val() isnt PLACEHOLDER_VALUE\n        @disable_placeholder_option()\n      @$el.on('change', @disable_placeholder_option.bind(@))\n\n      return @\n\n    disable_placeholder_option: ->\n      $firstChild = @$el.children(':first')\n      if $firstChild.val() is PLACEHOLDER_VALUE\n        $firstChild.prop('disabled', true)\n      return\n\n    attach_to: (target) ->\n      target.find('.skiplogic__rowselect').remove()\n      super(target)\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- View.RowDetail.SkipLogic.OperatorPickerView.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.OperatorPicker extends $viewWidgets.Base\n    tagName: 'div'\n    className: 'skiplogic__expressionselect'\n    render: () ->\n      @\n\n    attach_to: (target) ->\n      target.find('.skiplogic__expressionselect').remove()\n      super(target)\n\n      @$el.select2({\n        minimumResultsForSearch: -1\n        data: do () =>\n          operators = []\n          _.each @operators, (operator) ->\n            operators.push id: operator.id, text: operator.label + (if operator.id != 1 then ' (' + operator.symbol[operator.parser_name[0]] + ')' else '')\n            operators.push id: '-' + operator.id, text: operator.negated_label + (if operator.id != 1 then ' (' + operator.symbol[operator.parser_name[1]] + ')' else '')\n\n          operators\n      })\n\n      # workaround for missing elements when toggling skiplogic back and forth\n      target.find('.skiplogic__expressionselect.select2-container').show()\n\n      if @value\n        @val @value\n      else\n        @value = @$el.select2('val')\n\n      @$el.on 'select2-close', () => @_set_style()\n\n    val: (value) ->\n      if value?\n        @$el.select2 'val', value\n        @_set_style()\n        @value = value\n      else\n        return @$el.val()\n\n    _set_style: () -> #violates LSP\n      numValue = Number(@$el.val())\n\n      @$el.toggleClass('skiplogic__expressionselect--no-response-value', numValue in [-1, 1])\n\n      absolute_value = Math.abs(numValue)\n\n      if absolute_value is 0\n        return\n\n      operator = _.find(@operators, (operator) ->\n        return operator.id == absolute_value\n      )\n\n      if numValue < 0\n        abbreviated_label = operator['abbreviated_negated_label']\n      else\n        abbreviated_label = operator['abbreviated_label']\n\n      chosen_element = @$el.parents('.skiplogic__criterion').find('.select2-container.skiplogic__expressionselect .select2-chosen')\n      chosen_element.text(abbreviated_label)\n      return\n\n    constructor: (@operators) ->\n      super()\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- View.RowDetail.SkipLogic.ResponseViews.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.SkipLogicEmptyResponse extends $viewWidgets.EmptyView\n    className: 'skiplogic__responseval'\n    attach_to: (target) ->\n      target.find('.skiplogic__responseval').remove()\n      super(target)\n\n  class viewRowDetailSkipLogic.SkipLogicTextResponse extends $viewWidgets.TextBox\n    attach_to: (target) ->\n      target.find('.skiplogic__responseval').remove()\n      super\n\n    bind_event: (handler) ->\n      @$el.on 'blur', handler\n\n    constructor: (text) ->\n      super(text, \"skiplogic__responseval\", _t(\"response value\"))\n\n  class viewRowDetailSkipLogic.SkipLogicValidatingTextResponseView extends viewRowDetailSkipLogic.SkipLogicTextResponse\n    render: () ->\n      super\n      @setElement('<div class=\"skiplogic__responseval-wrapper\">' + @$el + '<div></div></div>')\n      @$error_message = @$('div')\n      @model.bind 'validated:invalid', @show_invalid_view\n      @model.bind 'validated:valid', @clear_invalid_view\n      @$input = @$el.find('input')\n      @\n    show_invalid_view: (model, errors) =>\n      if @$input.val()\n        @$el.addClass('textbox--invalid')\n        @$error_message.html(errors.value)\n        @$input.focus()\n    clear_invalid_view: (model, errors) =>\n      @$el.removeClass('textbox--invalid')\n      @$error_message.html('')\n\n    bind_event: (handler) ->\n      @$input.on 'change', handler\n\n    val: (value) =>\n      if value?\n        @$input.val(value)\n      else\n        @$input.val()\n\n  class viewRowDetailSkipLogic.SkipLogicDropDownResponse extends $viewWidgets.DropDown\n    tagName: 'select'\n    className: 'skiplogic__responseval'\n\n    attach_to: (target) ->\n      target.find('.skiplogic__responseval').remove()\n      super(target)\n      # workaround for missing elements when toggling skiplogic back and forth\n      target.find('.skiplogic__responseval.select2-container').show()\n\n    bind_event: (handler) ->\n      super 'change', handler\n\n    render: () ->\n      super\n      handle_model_cid_change = () =>\n        @val(@model.get 'cid')\n\n      @model.off 'change:cid', handle_model_cid_change\n      @model.on 'change:cid', handle_model_cid_change\n\n    constructor: (@responses, @model) ->\n      super(_.map @responses.models, (response) ->\n        text: response.get('label')\n        value: response.cid\n      )\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Factories.RowDetail.SkipLogic.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.SkipLogicViewFactory\n    constructor: (@survey) ->\n    create_question_picker: (target_question) ->\n      model = new $viewWidgets.DropDownModel()\n\n      set_options = () =>\n        options = _.map(target_question.selectableRows(), (row) ->\n          return {\n            value: row.cid\n            text: row.getValue(\"label\")\n          }\n        )\n\n        # add placeholder message/option\n        options.unshift({\n          value: PLACEHOLDER_VALUE\n          text: _t(\"Select question from list\")\n        })\n\n        model.set('options', options)\n        return\n\n      set_options()\n      @survey.on('sortablestop', set_options)\n\n      return new viewRowDetailSkipLogic.QuestionPicker(model)\n\n    create_operator_picker: (question_type) ->\n      operators = if question_type? then _.filter($skipLogicHelpers.operator_types, (op_type) -> op_type.id in question_type.operators) else []\n      new viewRowDetailSkipLogic.OperatorPicker operators\n    create_response_value_view: (question, question_type, operator_type) ->\n      if !question?\n        type = 'empty'\n      else if operator_type.response_type?\n        type = operator_type.response_type\n      else\n        type = question_type.response_type\n\n      switch type\n        when 'empty' then new viewRowDetailSkipLogic.SkipLogicEmptyResponse()\n        when 'text' then new viewRowDetailSkipLogic.SkipLogicTextResponse\n        when 'dropdown' then new viewRowDetailSkipLogic.SkipLogicDropDownResponse question.getList().options\n        when 'integer', 'decimal' then new viewRowDetailSkipLogic.SkipLogicTextResponse\n        else null\n    create_criterion_view: (question_picker_view, operator_picker_view, response_value_view, presenter) ->\n      return new viewRowDetailSkipLogic.SkipLogicCriterion question_picker_view, operator_picker_view, response_value_view, presenter\n    create_criterion_builder_view: () ->\n      return new viewRowDetailSkipLogic.SkipLogicCriterionBuilderView()\n    create_textarea: (text, className) ->\n      return new $viewWidgets.TextArea text, className\n    create_button: (text, className) ->\n      return new $viewWidgets.Button text, className\n    create_textbox: (text, className='', placeholder='') ->\n      return new $viewWidgets.TextBox text, className, placeholder\n    create_label: (text, className) ->\n      return new $viewWidgets.Label text, className\n    create_empty: () ->\n      return new $viewWidgets.EmptyView()\n\n\n  viewRowDetailSkipLogic\n","{expect} = require('../helper/fauxChai')\n\n$aliases = require('../../jsapp/xlform/src/model.aliases')\n\nmodule.exports = do ->\n  expectSorted = (q)->\n    unless q instanceof Array\n      throw new Error(\"aliases.tests:expectSorted needs an array\")\n    q.sort()\n    expect(q)\n\n  describe '$aliases', ->\n    describe 'returns correct results from', ->\n      describe 'basic queries', ->\n        it '[groups]', ->\n          expectSorted($aliases('group')).toEqual([\n            'begin group',\n            'begin_group',\n            'end group',\n            'end_group',\n            ])\n        it '[repeats]', ->\n          expectSorted($aliases('repeat')).toEqual([\n            'begin repeat',\n            'begin_repeat',\n            'end repeat',\n            'end_repeat',\n            ])\n    describe 'custom queries', ->\n      it '[groupsOrRepeats]', ->\n        expectSorted($aliases.q.groupsOrRepeats()).toEqual([\n          'begin group',\n          'begin repeat',\n          'begin_group',\n          'begin_repeat',\n          'end group',\n          'end repeat',\n          'end_group',\n          'end_repeat',\n          ])\n\n      it '[groupable]', ->\n        expectSorted($aliases.q.groupable()).toEqual([\n          'begin group',\n          'begin rank',\n          'begin repeat',\n          'begin score',\n          'begin_group',\n          'begin_kobomatrix',\n          'begin_rank',\n          'begin_repeat',\n          'begin_score',\n          'end group',\n          'end rank',\n          'end repeat',\n          'end score',\n          'end_group',\n          'end_kobomatrix',\n          'end_rank',\n          'end_repeat',\n          'end_score',\n          ])\n      it '[availableSheetNames]', ->\n        expectSorted($aliases.q.requiredSheetNameList()).toEqual([\n          'survey',\n          ])\n      it '[hidden_types]', ->\n        expect($aliases.q.hiddenTypes()).toContain('imei')\n      describe 'q.testGroupOrRepeat', ->\n        expectGroupableParse = (s)->\n          expect($aliases.q.testGroupable(s))\n        it 'parses group properly', ->\n          expectGroupableParse('begin group').toEqual({type: 'group', begin: true})\n          expectGroupableParse('begin_group').toEqual({type: 'group', begin: true})\n          expectGroupableParse('end group').toEqual({type: 'group', begin: false})\n          expectGroupableParse('end_group').toEqual({type: 'group', begin: false})\n        it 'parses repeat properly', ->\n          expectGroupableParse('begin repeat').toEqual({type: 'repeat', begin: true})\n          expectGroupableParse('begin_repeat').toEqual({type: 'repeat', begin: true})\n          expectGroupableParse('end repeat').toEqual({type: 'repeat', begin: false})\n          expectGroupableParse('end_repeat').toEqual({type: 'repeat', begin: false})\n","{expect} = require('../helper/fauxChai')\n\n$ = require \"jquery\"\n$survey = require(\"../../jsapp/xlform/src/model.survey\")\n$choices = require(\"../../jsapp/xlform/src/model.choices\")\n_ = require \"underscore\"\n$surveyFixtures = require(\"../fixtures/xlformSurveys\")\nwindow._ = _\n\nmodule.exports = do ->\n  describe 'model.choices', ->\n    beforeEach ->\n      @survey = $survey.Survey.load({\n          survey: [\n            {\n              type: 'select_one yes_no',\n              name: 'yes_or_no',\n              label: 'Yes or no?'\n            }\n          ],\n          choices: [\n            {\n              'list name': 'yes_no',\n              name: 'yes',\n              label: 'Yes'\n            },\n            {\n              'list name': 'yes_no',\n              name: 'no',\n              label: 'No'\n            }\n          ]\n        })\n      @choices = @survey.choices\n      @yesno = @choices.get('yes_no')\n\n    it 'has options in list', ->\n      expect(@yesno.options.length).toBe(2)\n    it 'can add option to a choice list', ->\n      @yesno.options.add(name: 'maybe', label: 'Maybe')\n      expect(@yesno.options.length).toBe(3)\n    it 'can remove option from a choice list', ->\n      opt = @yesno.options.find (o)-> o.get('name') is 'yes'\n      expect(opt).toBeDefined()\n      expect(@yesno.options.length).toBe(2)\n      @yesno.options.remove(opt)\n      expect(@yesno.options.length).toBe(1)\n\n    it 'exports choice list properly', ->\n      expect(@choices.toJSON()).toEqual([\n          {\n              name: \"yes_no\",\n              options: [\n                  {\n                      name: \"yes\",\n                      label: \"Yes\"\n                  },\n                  {\n                      name: \"no\",\n                      label: \"No\"\n                  }\n              ]\n          }\n      ])\n\n    describe 'model.choices--CASCADES', ->\n      it 'cascade choice list utility methods work', ->\n        survey = $survey.Survey.load($surveyFixtures.cascading)\n        expect(survey.choices.models.map((cl)->\n            cl.get('name')\n          )).toEqual(['state', 'county', 'city'])\n        expect(survey.choices.models.map((cl)->\n            cl._get_last_linked_choice_list().get('name')\n          )).toEqual(['city', 'city', 'city'])\n        expect(survey.choices.models.map((cl)->\n            cl._get_first_linked_choice_list().get('name')\n          )).toEqual(['state', 'state', 'state'])\n\n        _city_choicelist = survey.choices.get('city')\n        expect(_city_choicelist.get('name')).toBe('city')\n        expect(_city_choicelist._has_corresponding_row()).toEqual(false)\n        row_data = _city_choicelist._create_corresponding_row_data({\n            _full_path_choice_filter: true\n          })\n        expect(row_data).toEqual([\n            {\n                \"label\": \"state\",\n                \"type\": \"select_one state\",\n                \"choice_filter\": \"\"\n            },\n            {\n                \"label\": \"county\",\n                \"type\": \"select_one county\",\n                \"choice_filter\": \"state=${state}\"\n            },\n            {\n                \"label\": \"city\",\n                \"type\": \"select_one city\",\n                \"choice_filter\": \"state=${state} and county=${county}\"\n            },\n          ])\n        row_data = _city_choicelist._create_corresponding_row_data({\n            _full_path_choice_filter: false\n          })\n        expect(row_data).toEqual([\n            {\n                \"label\": \"state\",\n                \"type\": \"select_one state\",\n                \"choice_filter\": \"\"\n            },\n            {\n                \"label\": \"county\",\n                \"type\": \"select_one county\",\n                \"choice_filter\": \"state=${state}\"\n            },\n            {\n                \"label\": \"city\",\n                \"type\": \"select_one city\",\n                \"choice_filter\": \"county=${county}\"\n            },\n          ])\n\n      it 'imports a survey with a cascading choice list', ->\n        survey = $survey.Survey.load($surveyFixtures.cascading)\n        _city_choicelist = survey.choices.get('city')\n        for choiceList in survey.choices.models\n          expect(choiceList._has_corresponding_row()).toEqual(false)\n\n        _city_choicelist.create_corresponding_rows()\n\n        for choiceList in survey.choices.models\n          expect(choiceList._has_corresponding_row()).toEqual(true)\n\n        row0 = survey.rows.at(0)\n        row2 = survey.rows.at(2)\n        expect(survey.toCsvJson().choices.rowObjects.map(((r)->\n            return \"#{r.list_name}-#{r.name}\"\n          )).sort()).toEqual([\"city-brownsville\", \"city-dumont\", \"city-finney\",\n              \"city-harlingen\", \"city-puyallup\", \"city-redmond\", \"city-seattle\",\n              \"city-tacoma\", \"county-cameron\", \"county-king\", \"county-king\", #2 kings\n              \"county-pierce\", \"state-texas\", \"state-washington\"])\n        expect(survey.toCsvJson().survey.rowObjects.map(((r)->\n            return \"#{r.type}-#{r.name}\"\n          ))).toEqual([\"select_one state-state\",\n                        \"select_one county-county\",\n                        \"select_one city-city\",\n                        \"start-start\",\n                        \"end-end\"])\n        expect(row2.getList().get(\"name\")).toBe(\"city\")\n        expect(row2.getList().getList).toBeDefined()\n        expect(row2.getList().getList()).not.toBe(null)\n        expect(row2.getList().getList().get(\"name\")).toBe(\"county\")\n        expect(row2.getList().getList().getList().get(\"name\")).toBe(\"state\")\n        # console.log($survey.Survey.load(survey.toSsStructure())\n        #                                         .toSsStructure())\n\n        # Do we want to get survey.toJSON() working?\n        # it has largely been replaced by survey.toSsStructure()\n        # expect(_.keys(survey.toJSON().choices).sort()).toEqual([\n        #     \"city\", \"county\", \"state\",\n        #   ])\n\n\n    describe 'Choicelist', ->\n      describe 'Clone method', ->\n        it 'Clones itself and all of its options', ->\n          yesnoClone = @yesno.clone()\n          # cloned choiceList must be available\n          # to get current translation. so this test\n          # will fail in the same way the clone button\n          # fails on questions with choice lists\n          surv = yesnoClone.getSurvey()\n\n          expect(yesnoClone.options.length).toBe 2\n          expect(yesnoClone.options.at(0).get('name')).toBe 'yes'\n          expect(yesnoClone.options.at(1).get('name')).toBe 'no'\n          expect(yesnoClone.cid).not.toEqual @yesno.cid\n          expect(yesnoClone.get('name')).not.toBe @yesno.get('name')\n","{expect} = require('../helper/fauxChai')\n\ncsv = require(\"../../jsapp/xlform/src/csv\")\n\ndo ->\n  example2 = \"\\\"regex_sheet\\\"\\r\\n\\\"\\\",\\\"col1\\\",\\\"regexcol\\\"\\r\\n\\\"\\\",\\\"row1\\\",\\\"regex( \\\\s+ )\\\"\\r\\n\\\"regex_sheet2\\\"\\r\\n\\\"\\\",\\\"s2col1\\\",\\\"example2\\\"\\r\\n\\\"\\\",\\\"s2row1\\\",\\\"\\\\s\\\\d\\\\w\\\\S\\\\D\\\\W\\\"\\r\\n\"\n\n  silly_cell = \"\"\"\n    regex(., '^\\\\S+( \\\\S+){4}$' )\n  \"\"\"\n  example = \"\"\"\n    \"type\",\"constraint\"\n    \"text\",\"#{silly_cell}\"\n    \"\"\"\n\n  describe \"csv parsing\", ->\n    beforeEach ->\n      window._csv = csv\n      @compile = (content)->\n        csv(content).toObjects()[0]\n    it \"equals\", ->\n      parse_content_body = ->\n        csv(example2)\n      expect(parse_content_body).not.toThrow()\n    it \"handles simple csvs\", ->\n      ex1 = @compile(\"\"\"\n        a,b,c,d\n        e,f,g,h\n        \"\"\")\n      expect(ex1.a).toBe('e')\n      expect(ex1.b).toBe('f')\n      expect(ex1.c).toBe('g')\n      expect(ex1.d).toBe('h')\n\n    it \"handles csvs with quotes\", ->\n      ex1 = @compile(\"\"\"\n        \"a\",\"b\",\"c\",\"d\"\n        \"e\",\"f\",\"g\",\"h\"\n        \"\"\")\n      expect(ex1.a).toBe('e')\n      expect(ex1.b).toBe('f')\n      expect(ex1.c).toBe('g')\n      expect(ex1.d).toBe('h')\n\n    it \"imports cells with escape characters\", ->\n      ex1 = @compile(example)\n      expect(ex1.type).toBe('text')\n      expect(ex1.constraint).toBe(silly_cell)\n\n    it \"reexports cells with escape characters\", ->\n      converted_to_objects = csv(example).toObjects()\n      converted_to_string = csv(converted_to_objects).toString()\n      expect(converted_to_string).toEqual(example)\n\n$inputDeserializer = require(\"../../jsapp/xlform/src/model.inputDeserializer\")\n\ndo ->\n  deserialize = $inputDeserializer.deserialize\n  describe '$inputDeserializer', ->\n    beforeEach ->\n      @sampleSurveyObj =\n        survey: [\n          key1: \"val1\"\n          key2: \"val2\"\n          key3: \"val3\"\n        ]\n        choices: [\n          k4: \"v4\"\n          k5: \"v5\"\n        ]\n\n    describe '. deserialize parses csv, json, and object', ->\n      it 'has deserialize method defined', ->\n        expect(deserialize).toBeDefined()\n      ###\n      # csv appears be broken right now\n      it 'parses a csv', ->\n        oneliner = \"survey,,,\\n,key1,key2,key3\\n,val1,val2,val3\\nchoices,,,\\n,k4,k5\\n,v4,v5\"\n        $inputDeserializer(oneliner)\n        expect(deserialize(oneliner)).toEqual(@sampleSurveyObj)\n      ###\n      # it 'parses a json string', ->\n      #   oneline_json = \"\"\"{\"survey\":[{\"key1\":\"val1\",\"key2\":\"val2\",\"key3\":\"val3\"}],\"choices\":[{\"k4\":\"v4\",\"k5\":\"v5\"}]}\"\"\"\n      #   expect(deserialize(oneline_json)).toEqual(@sampleSurveyObj)\n      it 'parses a js object', ->\n        expect(deserialize(@sampleSurveyObj)).toEqual(@sampleSurveyObj)\n\n    describe '.validateParse notifies validity', ->\n      beforeEach ->\n        @validate = (obj, tf=true, expectedError=false)->\n          ctx = {}\n          isValid = $inputDeserializer.validateParse(obj, ctx)\n          expect(ctx).toBeDefined()\n          expect(isValid).toBe(tf)\n          expect(ctx.error).toEqual(expectedError)  if expectedError\n\n      it 'with just survey sheet', ->\n        @validate survey: []\n      describe 'but does not accept non-object parameters', ->\n        it '[string]', ->\n          @validate 'cant be a string', false\n        it '[array]', ->\n          @validate ['cant be an array'], false\n    describe 'deserializes and records errors', ->\n      it 'when input is missing survey sheet', ->\n        ss2 =\n          notSurvey: @sampleSurveyObj.survey\n          choices: @sampleSurveyObj.choices\n        context = {validate: true}\n        $inputDeserializer(ss2, context)\n        expect(context.error).toBeDefined()\n        expect(context.error).toContain('survey sheet')\n","base = require './model.base'\n\nmodule.exports = do ->\n\n  # SurveyDetails (attached to a XLF.Survey instance) containing details such as\n  #     start time, deviceid, (etc.)\n  class SurveyDetail extends base.BaseModel\n    idAttribute: \"name\"\n\n    toJSON: ()->\n      if @get(\"value\")\n        out = {}\n\n        out.name = @get(\"name\")\n        # type is same as name\n        out.type = out.name\n\n        parameters = @get(\"parameters\")\n        if parameters\n          out.parameters = parameters\n\n        return out\n      else\n        return false\n\n  class SurveyDetails extends base.BaseCollection\n    model: SurveyDetail\n\n    loadSchema: (schema)->\n      # throw new Error(\"Schema must be a Backbone.Collection\")  unless schema instanceof Backbone.Collection\n      for item in schema.models\n        @add(new SurveyDetail(item._forSurvey()))\n      @_schema = schema\n\n      # we could prevent future changes to the schema...\n      @add = @loadSchema = ()-> throw new Error(\"New survey details must be added to the schema\")\n      return @\n\n    importDefaults: ()->\n      for item in @_schema.models\n        relevantDetail = @get(item.get(\"name\"))\n        relevantDetail.set(\"value\", item.get(\"default\"))\n      return\n\n    importDetail: (detail)->\n      # For now, every detail which is presented is given a boolean value set to true\n      if (dtobj = @get(detail.type))\n        if detail.parameters\n          dtobj.set(\"parameters\", detail.parameters)\n        dtobj.set(\"value\", true)\n      else\n        throw new Error(\"SurveyDetail `#{key}` not loaded from schema. [Aliases have not been implemented]\")\n      return\n\n  SurveyDetails: SurveyDetails\n  SurveyDetail: SurveyDetail\n","{expect} = require('../helper/fauxChai')\n\n$inputDeserializer = require(\"../../jsapp/xlform/src/model.inputDeserializer\")\n$surveys = require(\"../fixtures/xlformSurveys\")\n\ndo ->\n  deserialize = $inputDeserializer.deserialize\n  describe '$inputDeserializer', ->\n    beforeEach ->\n      @sampleSurveyObj =\n        survey: [\n          key1: \"val1\"\n          key2: \"val2\"\n          key3: \"val3\"\n        ]\n        choices: [\n          k4: \"v4\"\n          k5: \"v5\"\n        ]\n\n    describe '. deserialize parses csv, json, and object', ->\n      it 'has deserialize method defined', ->\n        expect(deserialize).toBeDefined()\n      ###\n      # csv appears be broken right now\n      it 'parses a csv', ->\n        oneliner = \"survey,,,\\n,key1,key2,key3\\n,val1,val2,val3\\nchoices,,,\\n,k4,k5\\n,v4,v5\"\n        $inputDeserializer(oneliner)\n        expect(deserialize(oneliner)).toEqual(@sampleSurveyObj)\n      ###\n      # it 'parses a json string', ->\n      #   oneline_json = \"\"\"{\"survey\":[{\"key1\":\"val1\",\"key2\":\"val2\",\"key3\":\"val3\"}],\"choices\":[{\"k4\":\"v4\",\"k5\":\"v5\"}]}\"\"\"\n      #   expect(deserialize(oneline_json)).toEqual(@sampleSurveyObj)\n      it 'parses a js object', ->\n        expect(deserialize(@sampleSurveyObj)).toEqual(@sampleSurveyObj)\n\n    describe '.validateParse notifies validity', ->\n      beforeEach ->\n        @validate = (obj, tf=true, expectedError=false)->\n          ctx = {}\n          isValid = $inputDeserializer.validateParse(obj, ctx)\n          expect(ctx).toBeDefined()\n          expect(isValid).toBe(tf)\n          expect(ctx.error).toEqual(expectedError)  if expectedError\n\n      it 'with just survey sheet', ->\n        @validate survey: []\n      describe 'but does not accept non-object parameters', ->\n        it '[string]', ->\n          @validate 'cant be a string', false\n        it '[array]', ->\n          @validate ['cant be an array'], false\n    describe 'deserializes and records errors', ->\n      it 'when input is missing survey sheet', ->\n        ss2 =\n          notSurvey: @sampleSurveyObj.survey\n          choices: @sampleSurveyObj.choices\n        context = {validate: true}\n        $inputDeserializer(ss2, context)\n        expect(context.error).toBeDefined()\n        expect(context.error).toContain('survey sheet')\n\n\n###\nrequire [$survey = require 'cs!xlform/model.survey'\nrequire(\"../../jsapp/xlform/src/model.survey', 'cs!fixtures/surveys'], ($survey, $surveyFixtures)->\n  Survey = $survey.Survey\n  pizza_survey = $surveyFixtures.pizza_survey\n\n  ensure_equivalent = (sFixId)->\n    fixt = $surveyFixtures[sFixId]\n    describe \"fixtures/surveys.#{sFixId}:\", ->\n      it \"the fixture exists\", ->\n        expect(fixt.csv).toBeDefined()\n        expect(fixt.xlf).toBeDefined()\n        expect(fixt.xlf2).toBeDefined()\n\n      describe \"the fixture imports from object\", ->\n        beforeEach ->\n          @s1 = Survey.load(fixt.csv)\n          @s2 = Survey.load(fixt.xlf)\n          @s3 = Survey.load(fixt.xlf2)\n\n        it \"creates surveys\", ->\n          expect(@s1).toBeDefined()\n          expect(@s2).toBeDefined()\n          expect(@s3).toBeDefined()\n\n        it \"creates surveys with matching fingerprints\", ->\n          fingerprint = (s)->\n            # something that ensures the output is equivalent\n            \"#{s.toCSV().length}\"\n          expect(fingerprint(@s1)).not.toBe('')\n          expect(fingerprint(@s1)).toEqual(fingerprint(@s2))\n          expect(fingerprint(@s1)).toEqual(fingerprint(@s3))\n          expect(fingerprint(@s2)).toEqual(fingerprint(@s3))\n\n  ensure_equivalent('pizza_survey')\n###\n","{expect} = require('../helper/fauxChai')\n_ = require(\"underscore\")\n\n$aliases = require(\"../../jsapp/xlform/src/model.aliases\")\n$survey = require(\"../../jsapp/xlform/src/model.survey\")\n$configs = require(\"../../jsapp/xlform/src/model.configs\")\n$surveys = require(\"../fixtures/xlformSurveys\")\n\ndo ->\n  describe 'rank.tests', ->\n    describe 'survey imports ranks >', ->\n      beforeEach ->\n        @survey = $survey.Survey.load {\n            survey: [\n              [\"type\", \"name\", \"label\", \"kobo--rank-items\"],\n              {type: \"begin_rank\", name: \"koborank\", label: \"Label\", \"kobo--rank-items\": \"needs\"},\n              [\"rank__level\", \"rnk1\", \"Rank Level 1\"],\n              [\"rank__level\", \"rnk2\", \"Rank Level 2\"],\n              {type: \"end_rank\"},\n            ],\n            'choices': [\n              ['list name', 'name', 'label'],\n              ['needs', 'food', 'Food'],\n              ['needs', 'water', 'Water'],\n              ['needs', 'shelter', 'Shelter'],\n            ],\n          }\n\n      it 'can import a simple rank group', ->\n        rankRow = @survey.rows.at(0)\n        expect(rankRow.get('kobo--rank-items').get('value')).toBeDefined()\n        expect(rankRow.get('$kuid').get('value')).toBeDefined()\n        expect(rankRow).toBeDefined()\n        expect(rankRow._rankRows.length).toBe(2)\n        rankRow._rankRows.forEach (row)->\n          expect(row.get('$kuid')).toBeDefined()\n        expect(rankRow._rankLevels.options.length).toBe(3)\n\n      describe 'clone a rank group', ->\n        beforeEach ->\n          @rankRow = @survey.rows.at(0)\n          expect(@rankRow.get('$kuid').get('value')).toBeDefined()\n          expect(@rankRow.get('kobo--rank-items').get('value')).toBeDefined()\n          @clonedRow = @rankRow.clone()\n          @survey._insertRowInPlace(@clonedRow, previous: @rankRow)\n\n        it 'has the correct structure', ->\n          expect(@survey.rows.length).toBe(2)\n          expect(@survey.choices.length).toBe(2)\n          _n = 0\n          @survey.forEachRow (r) -> _n++\n          expect(_n).toBe(6)\n\n        it 'exports to csv', ->\n          pkg = @survey.toCsvJson()\n          [r1, r2, r3, r_end,\n            cr1, cr2, cr3, cr_end] = pkg.survey.rowObjects\n          expect(r1.label).toEqual(cr1.label)\n          expect(r1['$kuid']).toBeDefined()\n          expect(r1.type).toEqual('begin_rank')\n          expect(r1['kobo--rank-items']).not.toEqual(cr1['kobo--rank-items'])\n          expect(r_end.type).toEqual('end_rank')\n          expect(cr_end.type).toEqual('end_rank')\n          expect(r_end.$kuid).toEqual(\"/\" + r1.$kuid)\n          expect(cr_end.$kuid).toEqual(\"/\" + cr1.$kuid)\n          expect(_.pluck(pkg.choices.rowObjects, 'name')).toEqual([\n              \"food\", \"water\", \"shelter\",\n              \"food\", \"water\", \"shelter\",\n            ])\n\n        it 'exports to json', ->\n          pkg = @survey.toJSON()\n          [r1, r2, r3, r_end,\n            cr1, cr2, cr3, cr_end] = pkg.survey\n          expect(r1.label).toEqual(cr1.label)\n          expect(r1['$kuid']).toBeDefined()\n          expect(r1['kobo--rank-items']).not.toEqual(cr1['kobo--rank-items'])\n          expect(r_end.type).toEqual('end_rank')\n          expect(cr_end.type).toEqual('end_rank')\n          expect(r_end['$kuid']).toBeDefined()\n          expect(cr_end['$kuid']).toBeDefined()\n\n          # each choice in pkg.choices comes in this format:\n          #   list_name: [\n          #     {name: 'name', label: 'label'}\n          #   ]\n\n          # test the flattened names look right\n          expect(_.chain(pkg.choices)\n                    .values()\n                    .flatten()\n                    .pluck('name')\n                    .value()).toEqual([\n                      \"food\", \"water\", \"shelter\",\n                      \"food\", \"water\", \"shelter\",\n                    ])\n\n  describe 'score.tests', ->\n    describe 'survey imports scores >', ->\n      beforeEach ->\n        @survey = $survey.Survey.load {\n            survey: [\n              [\"type\", \"name\", \"label\", \"kobo--score-choices\"],\n              {type: \"begin score\", name: \"koboskore\", label: \"Label\", \"kobo--score-choices\": \"koboskorechoices\"},\n              [\"score__row\", \"skore_1\", \"Score 1\"],\n              [\"score__row\", \"skore_2\", \"Score 2\"],\n              {type: \"end score\"},\n            ],\n            'choices': [\n              ['list_name', 'name', 'label'],\n              ['koboskorechoices', 'ok', 'Okay'],\n              ['koboskorechoices', 'not_ok', 'Not okay'],\n            ],\n          }\n\n      it 'can import a simple score group', ->\n        scoreRow = @survey.rows.at(0)\n        expect(scoreRow.get('kobo--score-choices').get('value')).toBeDefined()\n        expect(scoreRow).toBeDefined()\n\n      it 'scores can be exported', ->\n        output = @survey.toJSON()\n        expect(output.survey.length).toBe(4)\n        expect(output.survey[0].type).toBe('begin_score')\n        expect(output['choices']).toBeDefined()\n        expect(output['choices']['koboskorechoices']).toEqual(\n            [ {name: 'ok', label: 'Okay'}, {name: 'not_ok', label: 'Not okay'} ]\n          )\n\n  describe 'group.tests', ->\n    _firstGroup = (s)->\n      _.first s.rows.filter (r,i)-> r.constructor.name is \"Group\"\n    _lastGroup = (s)->\n      _.last s.rows.filter (r,i)-> r.constructor.name is \"Group\"\n\n    describe 'survey imports groups >', ->\n      beforeEach ->\n        @survey = $survey.Survey.load({\n            survey: [\n                ['type',        'name', 'label'],\n                ['begin group', 'grp1', 'Group1'],\n                ['text',        'g1q1', 'Group1Question1'],\n                ['end group'],\n              ]\n          })\n\n      it 'can import a simple group', ->\n        first_group = _firstGroup(@survey)\n        expect(first_group).toBeDefined()\n        expect(first_group.rows.length).toBe(1)\n      it 'can add a group to the survey', ->\n        @survey.addRow type: 'group', name: 'grp2'\n        expect(@survey.rows.length).toBe(2)\n        expect(_lastGroup(@survey).rows.length).toBe(0)\n      it 'leaves empty group labels intact', ->\n        survey = $survey.Survey.load({\n            survey: [\n                ['type',        'name', 'label'],\n                ['begin group', 'grp1', null],\n                ['text',        'g1q1', 'Group1Question1'],\n                ['end group'],\n              ]\n          })\n\n        first_group = _firstGroup survey\n\n        expect(first_group.getValue 'label').toBe ''\n      describe 'groups can be exported >', ->\n        it 'works with a simple group', ->\n          expect(@survey.toCSV().split('\\n').length).toBe(8)\n        it 'works with a nested group', ->\n          survey = $survey.Survey.load({\n              survey: [\n                ['type',        'name', 'label'],\n                ['begin group', 'grp1', 'Group1'],\n                ['text',        'g1q1', 'Grp2Question1'],\n                ['begin group', 'g1g2', 'Group1Question1'],\n                ['text',        'g1g2q1', 'Grp2Question1'],\n                ['end group'],\n                ['end group'],\n              ]\n            })\n          expect(survey.toCSV().split('\\n').length).toBe(11)\n\n    it 'can import repeats', ->\n      survey = $survey.Survey.load({\n          survey: [\n            ['type',        'name', 'label'],\n            ['begin repeat', 'grp1', 'Group1'],\n            ['text',        'g1q1', 'Group1Question1'],\n            ['end repeat'],\n          ]\n        })\n      first_row = survey.rows.first()\n      expect(first_row).toBeDefined()\n      expect(first_row.constructor.name).toBe(\"Group\")\n      expect(first_row._isRepeat()).toBeTruthy()\n    describe 'fails on unmatched group types', ->\n      expectFailure = (msg, surv)->\n        execFn = ->\n          survey = $survey.Survey.load(surv)\n        expect(execFn).toThrow()\n      ### TODO: Find out why these are failing\n      it 'fails with unclosed group', ->\n        expectFailure 'unclosed', \"\"\"\n        survey,,,\n        ,type,name,label\n        ,begin group,grp1,Group1\n        \"\"\"\n        expectFailure 'unclosed', {\n            survey: [\n              ['type',        'name', 'label'          ],\n              #-----------------------------------------\n              ['begin group', 'grp1', 'Group1'         ],\n              ['text',        'g1q1', 'Group1Question1'],\n            ]\n          }\n        expectFailure 'unclosed', {\n            survey: [\n              ['type',        'name', 'label'],\n              ['begin group', 'grp1', 'Group1'],\n            ]\n          }\n      it 'fails with mismatched group and repeat', ->\n        expectFailure 'mismatch', \"\"\"\n        survey,,,\n        ,type,name,label\n        ,begin group,grp1,Group1\n        ,end repeat,,\n        \"\"\"\n        expectFailure 'mismatch', {\n            survey: [\n              ['type'       , 'name', 'label' ],\n              #--------------------------------\n              ['begin group', 'grp1', 'Group1'],\n              ['end repeat'                   ],\n            ]\n          }\n      it 'fails with mismatched group and repeat2', ->\n        expectFailure 'mismatch', \"\"\"\n        survey,,,\n        ,type,name,label\n        ,begin repeat,grp1,Group1\n        ,end group,,\n        \"\"\"\n      ###\n\n    describe 'group creation', ->\n      beforeEach ->\n        @survey = $survey.Survey.load({\n            survey: [\n              ['type', 'name', 'label'],\n              #------------------------\n              ['text', 'q1',   'Q1'   ],\n              ['text', 'q2',   'Q2'   ],\n              ['text', 'q3',   'Q3'   ],\n              ['text', 'q4',   'Q4'   ],\n              ['text', 'q5',   'Q5'   ],\n            ]\n          })\n\n      describe 'group naming', ->\n        beforeEach ->\n          @getNames = (s)->\n            _n = 'noname'\n            names = []\n            s.forEachRow (\n                    (r)->\n                      name = r.get('name')?.get('value') or _n\n                      names.push name\n                  ), includeGroups: true\n            names\n\n          expect(@survey._allRows().length).toBe(5)\n          @rows = for n in [0,2,4]\n            @survey.rows.at(n)\n\n        it 'uses opts.label when not undefined', ->\n          @survey._addGroup(label: 'My Group', __rows: @rows)\n          expect(_firstGroup(@survey).getValue('label')).toBe 'My Group'\n        it 'uses default label when no label is passed', ->\n          @survey._addGroup(__rows: @rows)\n          expect(_firstGroup(@survey).getValue('label')).toBe $configs.newGroupDetails.label.value\n\n      describe 'can create group with existing rows', ->\n        beforeEach ->\n          @getNames = (s)->\n            _n = 'noname'\n            names = []\n            s.forEachRow (\n                    (r)->\n                      name = r.get('name')?.get('value') or _n\n                      names.push name\n                  ), includeGroups: true\n            names\n\n          expect(@survey._allRows().length).toBe(5)\n          rows = for n in [0,2,4]\n            @survey.rows.at(n)\n\n          @survey._addGroup(label: 'My Group', __rows: rows)\n        it 'and has the right number of rows', ->\n          expect(@survey._allRows().length).toBe(5)\n        it 'has the right order of names', ->\n          @survey.finalize()\n          names = @getNames(@survey)\n          names[0] = 'group_xxxxxxx'\n          expect(names).toEqual([\"group_xxxxxxx\", \"q1\", \"q3\", \"q5\", \"q2\", \"q4\"])\n\n        describe 'can generate missing names on finalize', ->\n          beforeEach ->\n            @grp = _firstGroup(@survey)\n\n          it 'and has a finalize method', ->\n            expect(@grp.finalize).toBeDefined()\n          # it 'and has finalize called on survey finalize', ->\n          #   spyOn @grp, 'finalize'\n          #   @survey.finalize()\n          #   expect(@grp.finalize).toHaveBeenCalled()\n          it 'has the correct name', ->\n            @survey.finalize()\n            names = @getNames(@survey)\n            names[0] = 'group_xxxxxxx'\n            expect(names).toEqual(['group_xxxxxxx', 'q1', 'q3', 'q5', 'q2', 'q4'])\n\n    describe 'group manipulation', ->\n      beforeEach ->\n        @survey = $survey.Survey.load({\n            survey: [\n              ['type'       , 'name', 'label'           ],\n              #------------------------------------------\n              ['text'       , 'q1'  , 'Q1'              ],\n              ['begin group', 'grp1', 'Group1'          ],\n              ['text'       , 'g1q1', 'Group1Question1' ],\n              ['end group'                              ],\n              ['text'       , 'q2'  , 'Q2'              ],\n            ]\n          })\n        @g1 = _firstGroup @survey\n\n        @getNames = (s)->\n          _n = 'noname'\n          names = []\n          s.forEachRow (\n                  (r)->\n                    name = r.get('name')?.get('value') or _n\n                    names.push name\n                ), includeGroups: true\n          names\n      it 'group can be deleted', ->\n        g1 = _firstGroup @survey\n        expect(@survey._allRows().length).toBe(3)\n        @survey.remove g1\n        expect(@survey._allRows().length).toBe(2)\n      it 'group can be detached from parent', ->\n        expect(@getNames(@survey)).toEqual(['q1', 'grp1', 'g1q1', 'q2'])\n        @g1.detach()\n        expect(@getNames(@survey)).toEqual(['q1', 'q2'])\n      it 'group can be split apart', ->\n        expect(@getNames(@survey)).toEqual(['q1', 'grp1', 'g1q1', 'q2'])\n        @g1.splitApart()\n        expect(@getNames(@survey)).toEqual(['q1', 'g1q1', 'q2'])\n      describe 'nested group can be split apart', ->\n        beforeEach ->\n          @survey = $survey.Survey.load({\n              survey: [\n                ['type',        'name', 'label' ],\n                #--------------------------------\n                ['begin group', 'grp1', 'Group1'],\n                ['begin group', 'grp2', 'Group1'],\n                ['text'       , 'q1'  , 'Q1'    ],\n                ['end group'                    ],\n                ['end group'                    ],\n                ['text'       , 'q2'  , 'Q2'    ],\n              ]\n            })\n          @g1 = _firstGroup @survey\n          @g2 = @g1.rows.at(0)\n        it 'is set up', ->\n          expect(@g2.constructor.key).toEqual(\"group\")\n          expect(@getNames(@survey)).toEqual(['grp1', 'grp2', 'q1', 'q2'])\n\n        it 'can break apart outer group', ->\n          @g1.splitApart()\n          expect(@getNames(@survey)).toEqual(['grp2', 'q1', 'q2'])\n\n        it 'can break apart outer group', ->\n          @g2.splitApart()\n          expect(@getNames(@survey)).toEqual(['grp1', 'q1', 'q2'])\n\n\ndescribe 'kuids', ->\n  survey_content ={\n    group: ->\n      {\n        survey: [\n          ['type', 'name', 'label', '$kuid'],\n          {type: 'begin_group', name: 'grp', label: 'Group', '$kuid': 'abc'},\n          ['note', 'n1', 'Note 1', 'def'],\n          {type: 'end_group',  '$kuid': '/abc (never parsed)'},\n        ],\n      }\n    rank: ->\n      {\n        survey: [\n          ['type', 'name', 'label', '$kuid'],\n          {type: 'begin_rank', name: 'koborank', label: 'Label', 'kobo--rank-items': 'needs', '$kuid': 'abc'},\n          ['rank__level', 'rnk1', 'Rank Level 1', 'def'],\n          ['rank__level', 'rnk2', 'Rank Level 2', 'ghi'],\n          {type: 'end_rank',  '$kuid': '/abc (never parsed)'},\n        ],\n        'choices': [\n          ['list_name', 'name', 'label', '$kuid'],\n          ['needs', 'food', 'Food', 'mno'],\n          ['needs', 'water', 'Water', 'pqr'],\n          ['needs', 'shelter', 'Shelter', 'stu'],\n        ],\n      }\n    score: ->\n      {\n        survey: [\n          ['type', 'name', 'label', '$kuid'],\n          {type: 'begin_score', name: 'koboscore', label: 'Label', \"kobo--score-choices\": 'scores', '$kuid': 'abcd'},\n          ['score__row', 'sc1', 'Rank Level 1', 'efgh'],\n          {type: 'end_score',  '$kuid': '/abcd (never parsed)'},\n        ],\n        'choices': [\n          ['list_name', 'name', 'label', '$kuid'],\n          ['scores', 'bad', 'Bad', 'mnop'],\n          ['scores', 'ok', 'Ok', 'qrst'],\n          ['scores', 'good', 'Good', 'uvwx'],\n        ],\n      }\n  }\n\n  describe 'passed to export', ->\n    it 'for group', ->\n      survey = $survey.Survey.load survey_content.group()\n      content = survey.toFlatJSON()\n      [r0, r1, r2] = content.survey\n      expect(r0.$kuid).toEqual('abc')\n      expect(r1.$kuid).toEqual('def')\n      expect(r2.$kuid).toEqual('/abc')\n\n    it 'for rank survey', ->\n      survey = $survey.Survey.load survey_content.rank()\n      content = survey.toFlatJSON()\n      [r0, r1, r2, r3] = content.survey\n      expect(r0.$kuid).toEqual('abc')\n      expect(r1.$kuid).toEqual('def')\n      expect(r2.$kuid).toEqual('ghi')\n      expect(r3.$kuid).toEqual('/abc')\n\n      [c0, c1, c2, c3] = content.choices\n      expect(\n          (c.$kuid for c in content.choices)\n          ).toEqual(['mno', 'pqr', 'stu'])\n\n    it 'for score survey', ->\n      survey = $survey.Survey.load survey_content.score()\n      content = survey.toFlatJSON()\n      [r0, r1, r2, r3] = content.survey\n      expect(r0.$kuid).toEqual('abcd')\n      expect(r1.$kuid).toEqual('efgh')\n      expect(r2.$kuid).toEqual('/abcd')\n\n      [c0, c1, c2] = content.choices\n      expect(\n          (c.$kuid for c in content.choices)\n          ).toEqual(['mnop', 'qrst', 'uvwx'])\n\n  describe 'preserved from import', ->\n    it 'for group', ->\n      survey = $survey.Survey.load survey_content.group()\n      grp1 = survey.rows.at(0)\n      expect(grp1.isGroup()).toBeTruthy()\n      expect(grp1.getValue('$kuid')).toEqual('abc')\n      expect(grp1.rows.at(0).getValue('$kuid')).toEqual('def')\n\n    it 'for rank survey', ->\n      survey = $survey.Survey.load survey_content.rank()\n\n      r0 = survey.rows.at(0)\n      r1 = r0._rankRows.at(0)\n      r2 = r0._rankRows.at(1)\n      expect(r0.getValue('$kuid')).toBe('abc')\n      expect(r1.attributes.$kuid).toBe('def')\n      expect(r2.attributes.$kuid).toBe('ghi')\n\n    it 'for score survey', ->\n      survey = $survey.Survey.load survey_content.score()\n      r0 = survey.rows.at(0)\n      expect(r0.getValue('$kuid')).toBe('abcd')\n      r1 = r0._scoreRows.at(0)\n      expect(r1.attributes.$kuid).toBe('efgh')\n\n      [c1, c2, c3] = survey.choices.at(0).options.models\n      expect(c1.getValue('$kuid')).toEqual('mnop')\n      expect(c2.getValue('$kuid')).toEqual('qrst')\n      expect(c3.getValue('$kuid')).toEqual('uvwx')\n","{expect} = require('../helper/fauxChai')\n\n$inputParser = require(\"../../jsapp/xlform/src/model.inputParser\")\n$choices = require(\"../../jsapp/xlform/src/model.choices\")\n$surveys = require(\"../fixtures/xlformSurveys\")\n\ndo ->\n  describe '\" $inputParser', ->\n    beforeEach ->\n      @sampleSurveyObj =\n        survey: [\n          key1: \"val1\"\n          key2: \"val2\"\n          key3: \"val3\"\n        ]\n        choices: [\n          k4: \"v4\"\n          k5: \"v5\"\n        ]\n    describe '. loadChoiceLists()\"', ->\n      list = new $choices.ChoiceList()\n      $inputParser.loadChoiceLists($surveys.pizza_survey.main().choices, list)\n\n    describe '. parse()\"', ->\n      describe ' translated surveys', ->\n        it 'flattens translated lists 1', ->\n          results = $inputParser.parseArr('survey', [\n              {type: 'text', name: 'q1', label: ['q1x', 'q1null']},\n              {type: 'text', name: 'q2', label: ['q2x', 'q2null']},\n            ], ['lx', null])\n          expect(results).toEqual([\n              {\n                type: 'text', name: 'q1',\n                'label::lx': 'q1x',\n                'label': 'q1null',\n              },\n              {\n                type: 'text', name: 'q2',\n                'label::lx': 'q2x',\n                'label': 'q2null',\n              },\n            ])\n\n        it 'flattens translated lists 2', ->\n          translations = ['lx', 'ly']\n          results = $inputParser.parseArr('survey', [\n              {type: 'text', name: 'q1', label: ['q1x', 'q1y']},\n              {type: 'text', name: 'q2', label: ['q2x', 'q2y']},\n            ], translations)\n\n          expected = [\n              {\n                type: 'text', name: 'q1',\n                'label::lx': 'q1x',\n                'label::ly': 'q1y',\n              },\n              {\n                type: 'text', name: 'q2',\n                'label::lx': 'q2x',\n                'label::ly': 'q2y',\n              },\n            ]\n          for i in [0, 1]\n            expect(results[i]).toEqual(expected[i])\n\n      it 'parses group hierarchy', ->\n        results = $inputParser.parseArr('survey', [\n            {type: 'begin group', name: 'grp1'},\n            {type: 'text', name: 'q1'},\n            {type: 'end group'},\n          ])\n        expect(results).toEqual([\n            {\n              type: 'group',\n              name: 'grp1',\n              __rows: [{type: 'text', name: 'q1'}]\n            }\n          ])\n      it 'parses scoring questions', ->\n        results = $inputParser.parseArr('survey', [\n            {\"type\": \"begin score\", \"name\": \"koboskore\", \"label\": \"Label\"},\n            {\"type\": \"end score\"},\n          ])\n        expect(results).toEqual([\n            {\n              type: 'score',\n              name: 'koboskore',\n              label: 'Label',\n              __rows: []\n            }\n          ])\n\n      it 'parses nested groups hierarchy', ->\n        results = $inputParser.parseArr('survey', [\n            {type: 'begin group', name: 'grp1', '$kuid': 'aaa'},\n            {type: 'begin group', name: 'grp2', '$kuid': 'bbb'},\n            {type: 'text', name: 'q1', '$kuid': 'ccc'},\n            {type: 'text', name: 'q2', '$kuid': 'ddd'},\n            {type: 'end group', '$kuid': 'eee'},\n            {type: 'end group', '$kuid': 'fff'},\n          ])\n        expect(results).toEqual([{\n          type : 'group',\n          name : 'grp1',\n          '$kuid': 'aaa',\n          __rows : [\n            {type: 'group',\n            name : 'grp2',\n            '$kuid': 'bbb',\n            __rows : [\n              { type : 'text', name : 'q1', '$kuid': 'ccc' },\n              { type : 'text', name : 'q2', '$kuid': 'ddd' }\n            ]}]}])\n      it 'parses non-grouped list of questions', ->\n        results = $inputParser.parseArr('survey', [\n            {type: 'text', name: 'q1'},\n            {type: 'text', name: 'q2'},\n          ])\n        expect(results).toEqual([ { type : 'text', name : 'q1' }, { type : 'text', name : 'q2' } ])\n","{expect} = require('../helper/fauxChai')\n\n$inputParser = require(\"../../jsapp/xlform/src/model.inputParser\")\n$survey = require(\"../../jsapp/xlform/src/model.survey\")\n\ndescribe(\"translations\", ->\n  process = (src) ->\n    parsed = $inputParser.parse(src)\n    new $survey.Survey(parsed)\n\n  it('should not allow editing form with unnamed translation', ->\n    run = ->\n      survey = process(\n        survey: [\n          type: \"text\"\n          label: [\"Ciasto?\", \"Pizza?\"],\n          name: \"Pizza survey\",\n        ]\n        translations: [\"polski (pl)\", null]\n      )\n    expect(run).toThrow(\"\"\"\n      There is an unnamed translation in your form definition.\n      Please give a name to all translations in your form.\n      Use \"Manage Translations\" option from form landing page.\n    \"\"\")\n  )\n)\n","{expect} = require('../helper/fauxChai')\n_ = require('underscore')\n\n$model = require(\"../../jsapp/xlform/src/_model\")\n\nxlform_survey_model = ($model)->\n  beforeEach ->\n    @pizzaSurvey = $model.Survey.load(PIZZA_SURVEY)\n    @createSurveyCsv = (survey=[],choices=[])->\n      choiceSheet = if choices.length is 0 then \"\" else \"\"\"\n      choices,,,\n      ,list name,name,label\n      ,#{choices.join(\"\\n,\")}\n      \"\"\"\n      \"\"\"\n      survey,,,\n      ,type,name,label,hint\n      ,#{survey.join(\"\\n,\")}\n      #{choiceSheet}\n      \"\"\"\n    @createSurvey = (survey=[],choices=[])=>\n      $model.Survey.load @createSurveyCsv survey, choices\n    @firstRow = (s)-> s.rows.at(0)\n    @compareCsvs = (x1, x2)->\n      x1r = x1.split(\"\\n\")\n      x2r = x2.split(\"\\n\")\n      for r in _.min([x1r.length, x2r.length])\n        expect(x1r[r]).toBe(x2r[r])\n      expect(x1).toBe(x2)\n    @dumpAndLoad = (scsv)=>\n      s1 = $model.Survey.load scsv\n      x1 = s1.toCSV()\n      s2 = $model.Survey.load x1\n      x2 = s2.toCSV()\n      @compareCsvs(x1, x2)\n\n  it \"creates xlform\", ->\n    xlf = new $model.Survey name: \"Sample\"\n    expect(xlf).toBeDefined()\n    expect(xlf instanceof $model.Survey).toBe(true)\n    expect(xlf.get(\"name\")).toBe(\"Sample\")\n\n  it \"ensures every node has access to the parent survey\", ->\n    @pizzaSurvey.getSurvey\n\n  it \"can append a survey to another\", ->\n    dead_simple = @createSurvey(['text,q1,Question1,q1hint', 'text,q2,Question2,q2hint'])\n    expect(dead_simple.rows.length).toBe(2)\n    expect(@pizzaSurvey.rows.length).toBe(1)\n    dead_simple.insertSurvey(@pizzaSurvey)\n\n    expect(dead_simple.rows.length).toBe(3)\n    expect(dead_simple.rows.at(2).getValue(\"name\")).toBe(\"likes_pizza\")\n\n  it \"can import from csv_repr\", ->\n    expect(@pizzaSurvey.rows.length).toBe(1)\n    firstRow = @pizzaSurvey.rows.at(0)\n    expect(firstRow.getValue(\"name\")).toEqual(\"likes_pizza\")\n\n  describe \"with simple survey\", ->\n    beforeEach ->\n      @firstRow = @pizzaSurvey.rows.at(0)\n    describe \"lists\", ->\n      it \"iterates over every row\", ->\n        expect(@pizzaSurvey.rows).toBeDefined()\n        expect(@firstRow).toBeDefined()\n      it \"can add a list as an object\", ->\n        expect(@pizzaSurvey.choices.length).toBe(1)\n        @pizzaSurvey.choices.add LISTS.gender\n        expect(@pizzaSurvey.choices.length).toBe(2)\n        x1 = @pizzaSurvey.toCsvJson()\n\n        # it should prevent duplicate lists with the same id\n        @pizzaSurvey.choices.add LISTS.yes_no\n        expect(@pizzaSurvey.choices.length).toBe(2)\n        x2 = @pizzaSurvey.toCsvJson()\n        expect(x1).toEqual(x2)\n      it \"can add row to a specific index\", ->\n        expect(@pizzaSurvey.addRowAtIndex).toBeDefined()\n        # last question\n        rowc = @pizzaSurvey.rows.length\n        expect(@pizzaSurvey.rows.length).toBe 1\n        @pizzaSurvey.addRowAtIndex({\n          name: \"lastrow\",\n          label: \"last row\",\n          type: \"text\"\n          }, rowc)\n        expect(@pizzaSurvey.rows.length).toBe 2\n        expect(@pizzaSurvey.rows.last().get(\"label\").get(\"value\")).toBe(\"last row\")\n\n        @pizzaSurvey.addRowAtIndex({\n          name: \"firstrow\",\n          label: \"first row\",\n          type: \"note\"\n          }, 0)\n\n        expect(@pizzaSurvey.rows.length).toBe 3\n        expect(@pizzaSurvey.rows.first().get(\"label\").get(\"value\")).toBe(\"first row\")\n\n        @pizzaSurvey.addRowAtIndex({\n          name: \"secondrow\",\n          label: \"second row\",\n          type: \"note\"\n          }, 1)\n\n        expect(@pizzaSurvey.rows.length).toBe 4\n        expect(@pizzaSurvey.rows.at(1).get(\"label\").get(\"value\")).toBe(\"second row\")\n\n        labels = _.map @pizzaSurvey.rows.pluck(\"label\"), (i)-> i.get(\"value\")\n        expect(labels).toEqual([ 'first row', 'second row', 'Do you like pizza?', 'last row' ])\n\n    it \"row types changing is trackable\", ->\n      expect(@firstRow.getValue(\"type\")).toBe(\"select_one yes_no\")\n      typeDetail = @firstRow.get(\"type\")\n      expect(typeDetail.get(\"typeId\")).toBe(\"select_one\")\n      expect(typeDetail.get(\"list\").get(\"name\")).toBe \"yes_no\"\n\n      list = @firstRow.getList()\n      expect(list).toBeDefined()\n      expect(list.get(\"name\")).toBe(\"yes_no\")\n\n  describe \"with custom surveys\", ->\n    beforeEach ->\n      @createSurveyCsv = (survey=[],choices=[])->\n        choiceSheet = if choices.length is 0 then \"\" else \"\"\"\n        choices,,,\n        ,list name,name,label\n        ,#{choices.join(\"\\n,\")}\n        \"\"\"\n        \"\"\"\n        survey,,,\n        ,type,name,label,hint\n        ,#{survey.join(\"\\n,\")}\n        #{choiceSheet}\n        \"\"\"\n      @createSurvey = (survey=[],choices=[])=>\n        $model.Survey.load @createSurveyCsv survey, choices\n      @firstRow = (s)-> s.rows.at(0)\n      @compareCsvs = (x1, x2)->\n        x1r = x1.split(\"\\n\")\n        x2r = x2.split(\"\\n\")\n        for r in _.min([x1r.length, x2r.length])\n          expect(x1r[r]).toBe(x2r[r])\n        expect(x1).toBe(x2)\n\n      @dumpAndLoad = (scsv)=>\n        s1 = $model.Survey.load scsv\n        x1 = s1.toCSV()\n        s2 = $model.Survey.load x1\n        x2 = s2.toCSV()\n        @compareCsvs(x1, x2)\n\n    it \"breaks with an unk qtype\", ->\n      # makeInvalidTypeSurvey = =>\n      #   @createSurvey [\"telegram,a,a,a\"]\n      # expect(makeInvalidTypeSurvey).toThrow()\n\n    it \"exports and imports without breaking\", ->\n      # this is _the one_ that breaks :|\n      # scsv = @createSurveyCsv [\"text,text,text,text\"]\n      # @dumpAndLoad scsv\n\n    it \"reflects correct required value\", ->\n      processed_required = (val)->\n        $model.Survey.loadDict({\n          survey: [\n              {type: 'text',\n              name: 'nm',\n              required: val}\n            ]\n          }).toFlatJSON().survey[0].required\n\n      # being very thorough in the things that can reflect required\n      # true/false values\n      expect(processed_required('true')).toEqual('true')\n      expect(processed_required('TRUE')).toEqual('true')\n      expect(processed_required('yes')).toEqual('true')\n      expect(processed_required('YES')).toEqual('true')\n      expect(processed_required(true)).toEqual('true')\n\n      expect(processed_required('false')).toEqual('false')\n      expect(processed_required('FALSE')).toEqual('false')\n      expect(processed_required('NO')).toEqual('false')\n      expect(processed_required('no')).toEqual('false')\n      expect(processed_required(false)).toEqual('false')\n\n      expect(processed_required(`undefined`)).toEqual('false')\n      expect(processed_required('')).toEqual('false')\n\n\n    it \"captures required values\", ->\n      srv = $model.Survey.loadDict({\n          survey: [\n            {\n              type: 'text',\n              name: 'q1',\n              required: true\n            },\n            {\n              type: 'text',\n              name: 'q2',\n              required: false\n            }\n          ]\n        })\n      exported = srv.toJSON()\n      expect(exported.survey[0]['required']).toEqual('true')\n      expect(exported.survey[1]['required']).toEqual('false')\n\n    it \"tries a few question types\", ->\n      srv = @createSurvey [\"text,text,text,text\"]\n      row1 = srv.rows.at(0)\n\n      r1type = row1.get(\"type\")\n      expect(r1type.get(\"rowType\").name).toBe(\"text\")\n\n      # # a survey with 2 lists: \"x\" and \"y\"\n      srv = @createSurvey [\"\"\"\"select_multiple x\",a,a,a\"\"\"],\n                          [\"x,ax,ax\",\"x,bx,bx,\",\"y,ay,ay\",\"y,by,by\"]\n\n      row1 = srv.rows.at(0)\n      r1type = row1.get(\"type\")\n      expect(r1type.get(\"typeId\")).toBe(\"select_multiple\")\n      expect(r1type.get(\"list\").get(\"name\")).toBe(\"x\")\n      expect(row1.getList().get(\"name\")).toBe(\"x\")\n      # change row to to \"select_multiple y\".\n\n      r1type.set(\"value\", \"select_multiple y\")\n      expect(r1type.get(\"typeId\")).toBe(\"select_multiple\")\n      expect(r1type.get(\"list\").get(\"name\")).toBe(\"y\")\n      expect(row1.toJSON().type).toBe(\"select_multiple y\")\n      expect(row1.getList().get(\"name\")).toBe(\"y\")\n\n      # change row to \"text\"\n      row1.get(\"type\").set(\"value\", \"text\")\n      expect(row1.get(\"type\").get(\"value\")).toBe(\"text\")\n\n      # Right now, thinking that we should keep the list around\n      # and test to make sure the exported value doesn't have a list\n      expect(row1.get(\"type\").get(\"list\").get(\"name\")).toBeDefined()\n      expect(row1.getList().get(\"name\")).toBeDefined()\n      expect(row1.toJSON().type).toBe(\"text\")\n\n      # # adding an invalid list will break things.\n      #\n      # I'm thinking: adding an invalid list will only break validation of\n      # the survey. If it's not defined, it will prompt the user to make\n      # the row valid.\n      #\n      # setToInvalidList = ()->\n      #   row1.get(\"type\").set(\"value\", \"select_one badlist\")\n      # expect(setToInvalidList).toThrow()\n      ``\n  describe \"groups\", ->\n    it \"cannot add a group by adding a row type=group\", ->\n      @pizzaSurvey.addRow type: \"text\", name: \"pizza\", hint: \"pizza\", label: \"pizza\"\n      expect(@pizzaSurvey.rows.last() instanceof $model.Row).toBe(true)\n      expect(@pizzaSurvey.rows.length).toBe(2)\n      @pizzaSurvey.addRow type: \"group\", name: \"group\"\n      expect(@pizzaSurvey.rows.length).toBe(3)\n      grp = @pizzaSurvey.rows.last()\n      expect(grp instanceof $model.BaseRow).toBe(true)\n\n    it \"exports group to json\", ->\n      @pizzaSurvey.addRow type: \"text\", name: \"pizza\", hint: \"pizza\", label: \"pizza\"\n      expect(@pizzaSurvey.rows.last() instanceof $model.Row).toBe(true)\n      expect(@pizzaSurvey.rows.length).toBe(2)\n      @pizzaSurvey.addRow type: \"group\", name: \"group\"\n      expect(@pizzaSurvey.rows.length).toBe(3)\n      grp = @pizzaSurvey.rows.last()\n      _as_json = @pizzaSurvey.toFlatJSON()\n      survey_kuids = _as_json.survey.map((r)=>r['$kuid'])\n      for kuid in survey_kuids\n        expect(kuid).toBeDefined()\n\n  describe \"automatic naming\", ->\n    it \"can import questions without names\", ->\n      survey = @createSurvey([\n        \"text,,\\\"Label with no name\\\"\"\n        ])\n      expect(survey.rows.at(0)?.get(\"name\").getValue()).not.toBeTruthy()\n    it \"can finalize survey and generate names\", ->\n      survey = @createSurvey([\n        \"text,,\\\"Label with no name\\\"\"\n        ])\n      expect(survey.rows.at(0)?.get(\"name\").getValue()).not.toBeTruthy()\n      survey.rows.at(0).finalize()\n      expect(survey.rows.at(0)?.get(\"name\").getValue()).toBe(\"Label_with_no_name\")\n    it \"increments names that are already taken\", ->\n      survey = @createSurvey([\n        \"text,question_one,\\\"already named question_one\\\"\",\n        \"text,,\\\"question one\\\"\"\n        ])\n      # as imported\n      expect(survey.rows.at(0)?.get(\"name\").getValue()).toBe(\"question_one\")\n      # incremented from other question\n      expect(survey.finalize().rows.at(1)?.get(\"name\").getValue()).toBe(\"question_one_001\")\n\n  describe \"lists\", ->\n    it \"can change a list for a question\", ->\n      # add a new list. \"yes, no, maybe\"\n      @pizzaSurvey.choices.add(name: \"yes_no_maybe\")\n      ynm = @pizzaSurvey.choices.get(\"yes_no_maybe\")\n      expect(ynm).toBeDefined()\n\n      # test original state\n      firstRow = @pizzaSurvey.rows.first()\n      expect(firstRow.getList().get(\"name\")).toBe(\"yes_no\")\n\n      # change the list for first question to be \"yes_no_maybe\" instead of \"yes_no\"\n      expect(firstRow.getList().get(\"name\")).toBe(\"yes_no\")\n      firstRow.setList(ynm)\n      expect(firstRow.getList().get(\"name\")).toBe(\"yes_no_maybe\")\n\n      # change it back\n      firstRow.setList(\"yes_no\")\n      expect(firstRow.getList().get(\"name\")).toBe(\"yes_no\")\n\n      # cannot change it to a nonexistant list\n      expect(-> firstRow.setList(\"nonexistant_list\")).toThrow()\n\n      # changing name of list object will not unlink the list\n      list = firstRow.getList()\n      list.set(\"name\", \"no_yes\")\n      expect(firstRow.getList()).toBeDefined()\n      expect(firstRow.getList()?.get(\"name\")).toBe(\"no_yes\")\n\n    it \"can change options for a list\", ->\n      yn = @pizzaSurvey.choices.get(\"yes_no\")\n      expect(yn.options).toBeDefined()\n\n      @pizzaSurvey.choices.add(name: \"yes_no_maybe\")\n      ynm = @pizzaSurvey.choices.get(\"yes_no_maybe\")\n      expect(ynm).toBeDefined()\n\n      expect(ynm.options.length).toBe(0)\n      ynm.options.add name: \"maybe\", label: \"Maybe\"\n      ynm.options.add [{name: \"yes\", label: \"Yes\"}, {name: \"no\", label: \"No\"}]\n      expect(ynm.options.length).toBe(3)\n\n  describe \"census xlform\", ->\n    beforeEach ->\n      @census = $model.Survey.load(CENSUS_SURVEY)\n    it \"looks good\", ->\n      expect(@census).toBeDefined()\n\n# simple fixtures for tests above\nPIZZA_SURVEY = \"\"\"\n  survey,,,\n  ,type,name,label\n  ,select_one yes_no,likes_pizza,Do you like pizza?\n  choices,,,\n  ,list name,name,label\n  ,yes_no,yes,Yes\n  ,yes_no,no,No\n  \"\"\"\n\nCENSUS_SURVEY = \"\"\"\n  \"survey\",\"type\",\"name\",\"label\"\n  ,\"integer\",\"q1\",\"How many people were living or staying in this house, apartment, or mobile home on April 1, 2010?\"\n  ,\"select_one yes_no\",\"q2\",\"Were there any additional people staying here April 1, 2010 that you did not include in Question 1?\"\n  ,\"select_one ownership_type or_other\",\"q3\",\"Is this house, apartment, or mobile home: owned with mortgage, owned without mortgage, rented, occupied without rent?\"\n  ,\"text\",\"q4\",\"What is your telephone number?\"\n  ,\"text\",\"q5\",\"Please provide information for each person living here. Start with a person here who owns or rents this house, apartment, or mobile home. If the owner or renter lives somewhere else, start with any adult living here. This will be Person 1. What is Person 1's name?\"\n  ,\"select_one male_female\",\"q6\",\"What is Person 1's sex?\"\n  ,\"date\",\"q7\",\"What is Person 1's age and Date of Birth?\"\n  ,\"text\",\"q8\",\"Is Person 1 of Hispanic, Latino or Spanish origin?\"\n  ,\"text\",\"q9\",\"What is Person 1's race?\"\n  ,\"select_one yes_no\",\"q10\",\"Does Person 1 sometimes live or stay somewhere else?\"\n  \"choices\",\"list name\",\"name\",\"label\"\n  ,\"yes_no\",\"yes\",\"Yes\"\n  ,\"yes_no\",\"no\",\"No\"\n  ,\"male_female\",\"male\",\"Male\"\n  ,\"male_female\",\"female\",\"Female\"\n  ,\"ownership_type\",\"owned_with_mortgage\",\"owned with mortgage\",\n  ,\"ownership_type\",\"owned_without_mortgage\",\"owned without mortgage\"\n  ,\"ownership_type\",\"rented\",\"rented\"\n  ,\"ownership_type\",\"occupied_without_rent\",\"occupied without rent\"\n  \"settings\"\n  ,\"form_title\",\"form_id\"\n  ,\"Census Questions (2010)\",\"census2010\"\n  \"\"\"\n\nLISTS =\n  yes_no:\n    name: \"yes_no\"\n    options: [\n      {\"list name\": \"yes_no\", name: \"yes\", label: \"Yes\"},\n      {\"list name\": \"yes_no\", name: \"no\", label: \"No\"}\n    ]\n  gender:\n    name: \"gender\"\n    options: [\n      {\"list name\": \"gender\", name: \"f\", label: \"Female\"},\n      {\"list name\": \"gender\", name: \"m\", label: \"Male\"}\n    ]\n\ndescribe \"xlform survey model\", -> xlform_survey_model.call(@, $model)\n","{expect} = require('../helper/fauxChai')\n\n$model = require(\"../../jsapp/xlform/src/_model\")\n\ndo ->\n  surveys = {}\n  surveys.group = \"\"\"\n      survey,,,\n      ,type,name,label\n      ,text,q1,Question1\n      ,begin group,grp,\n      ,text,g1q1,Group1Question1\n      ,text,g1q2,Group1Question2\n      ,end group,,\n      \"\"\"\n  surveys.iterateOver = \"\"\"\n      survey,,,\n      ,type,name,label\n      ,text,q1,Question1\n      ,begin group,grp,\n      ,text,g1q1,Group1Question1\n      ,text,g1q2,Group1Question2\n      ,end group,,\n      ,text,q8,Question8\n      ,text,q9,Question9\n      ,err,err,err\n      \"\"\"\n  surveys.singleQ = \"\"\"\n      survey,,,\n      ,type,name,label\n      ,text,q1,Question1\n      \"\"\"\n  surveys.withChoices = \"\"\"\n      survey,,,\n      ,type,name,label\n      ,select_one yesno,yn,YesNo\n      choices,,,\n      ,list name,label,name\n      ,yesno,Yes,yes\n      ,yesno,No,no\n      \"\"\"\n  describe 'survey.tests: Row content', ->\n    it 'properly sluggifies row labels', ->\n      survey = new $model.Survey()\n      survey.rows.add(type: 'text', label: 'how many people?')\n      expect(survey.rows.length).toBe(1)\n      lastRow = survey.rows.at(0)\n      expect(lastRow.get('name').get('value')).toBe('')\n      expect(lastRow.get('label').get('value')).toBe('how many people?')\n      lastRow.finalize()\n      expect(lastRow.get('name').get('value')).toBe('how_many_people')\n\n  describe 'survey.tests: Row types', ->\n    beforeEach ->\n      window.xlfHideWarnings = true\n      @survey = new $model.Survey()\n    afterEach -> window.xlfHideWarnings = false\n\n    describe 'populates default values properly', ->\n      beforeEach ->\n        @populateRow = (opts={})=>\n          @survey.rows.add(opts)\n          @row = @survey.rows.at(0)\n        @expectValue = (key)->\n          expect(@row.get(key).get('value'))\n      it 'text is required', ->\n        @populateRow(type: 'text')\n        @expectValue('required').toBe(false)\n      it 'select one is required', ->\n        @populateRow(type: 'select_one')\n        @expectValue('required').toBe(false)\n      it 'integer is required', ->\n        @populateRow(type: 'integer')\n        @expectValue('required').toBe(false)\n      it 'geopoint is not required', ->\n        @populateRow(type: 'geopoint')\n        @expectValue('required').toBe(false)\n      it 'geotrace is not required', ->\n        @populateRow(type: 'geotrace')\n        @expectValue('required').toBe(false)\n      it 'geoshape is not required', ->\n        @populateRow(type: 'geoshape')\n        @expectValue('required').toBe(false)\n      it 'note is not required', ->\n        @populateRow(type: 'note')\n        @expectValue('required').toBe(false)\n\n    it 'has a valid empty survey', ->\n      expect(@survey.toCSV()).toBeDefined()\n    it 'can add rows to the survey', ->\n      @survey.rows.add type: 'text', name: 'q1'\n      expect(@survey.rows.at(0).toJSON().name).toBe('q1')\n      @survey.rows.add type: '_errortype', name: 'q2'\n      expect(@survey.rows.at(1).toJSON().type).toBe('_errortype')\n      @survey.rows.add type: 'note', name: 'q3'\n      expect(@survey.rows.at(2).toJSON().type).toBe('note')\n\n  describe 'Survey load', ->\n    beforeEach ->\n      @_load_csv = (scsv)=>\n        @survey = $model.Survey.load(scsv)\n      @_load_md = (md)=>\n        @survey = $model.Survey.load.md(md)\n      @expectKeys = (obj, keys)->\n        expect (obj[key]  for key in keys)\n\n    it 'loads a single question survey', ->\n      @_load_csv(surveys.singleQ)\n      @expectKeys(@survey.toCsvJson().survey.rowObjects[0],\n          ['type', 'name', 'label']).toEqual(['text', 'q1', 'Question1'])\n\n    it 'loads a multiple choice survey', ->\n      @_load_csv(surveys.withChoices)\n      _results = @survey.toJSON()\n      for row in _results.survey\n        expect(row['$kuid']).toBeDefined()\n        delete row['$kuid']\n      expect(_results).toEqual({\n          'survey': [\n            {\n              'type': 'select_one',\n              'select_from_list_name': 'yesno',\n              'name': 'yn',\n              'label': 'YesNo',\n              'required': 'false'\n            }\n          ],\n          'choices': {\n            'yesno': [\n              {\n                'label': 'Yes',\n                'name': 'yes'\n              },\n              {\n                'label': 'No',\n                'name': 'no'\n              }\n            ]\n          }\n        })\n    describe 'survey row reordering', ->\n      beforeEach ->\n        @surveyNames = ->\n          names = []\n          getName = (r)-> names.push r.get('name').get('value')\n          @survey.forEachRow(getName, includeGroups: true)\n          names\n      it 'can switch ABC -> ACB', ->\n        @_load_csv \"\"\"\n        survey,,,\n        ,type,name,label\n        ,text,qa,QuestionA\n        ,text,qb,QuestionB\n        ,text,qc,QuestionC\n        \"\"\"\n        expect(@surveyNames()).toEqual(['qa', 'qb', 'qc'])\n        [qa, qb, qc] = @survey.rows.models\n        _parent = qa._parent\n        @survey._insertRowInPlace(qc, previous: qa)\n        expect(qc._parent).toBe(_parent)\n        expect(@surveyNames()).toEqual(['qa', 'qc', 'qb'])\n\n    describe 'forEachRow iterator tests', ->\n      beforeEach ->\n        window.xlfHideWarnings = true\n\n        @_load_csv surveys.iterateOver\n        @getProp = (propName, arr)->\n          (r)->\n            arr.push r.get(propName)?.get('value')\n      afterEach -> window.xlfHideWarnings = false\n\n      it 'runs normally', ->\n        # without any options, it will skip the group but iterate\n        # through the rows of the group\n        @survey.forEachRow @getProp('name', names = [])\n        expect(names).toEqual('q1 g1q1 g1q2 q8 q9'.split(' '))\n\n      it 'runs flat', ->\n        # when flat:true option is passed, it will not iterate through\n        # any nested groups\n        options =\n          flat: true\n\n        @survey.forEachRow @getProp('name', names = []), options\n        expect(names).toEqual('q1 q8 q9'.split(' '))\n\n      it 'runs with includeGroups', ->\n        # when includeGroups:true , it will include the group and the nested\n        # values\n        options =\n          includeGroups: true\n\n        @survey.forEachRow @getProp('name', names = []), options\n        expect(names).toEqual('q1 grp g1q1 g1q2 q8 q9'.split(' '))\n\n      it 'runs with includeGroups', ->\n        # when includeGroups:true , it will include the group and the nested\n        # values\n        options =\n          includeGroups: true\n\n        @survey.forEachRow @getProp('name', names = []), options\n        expect(names).toEqual('q1 grp g1q1 g1q2 q8 q9'.split(' '))\n\n      it 'runs with includeErrors', ->\n        # when includeErrors:true, it will include erroneous rows\n        options =\n          includeErrors: true\n\n        @survey.forEachRow @getProp('name', names = []), options\n        expect(names).toEqual('q1 g1q1 g1q2 q8 q9 err'.split(' '))\n\n\n  describe 'survey.tests: form_id auto-naming', () ->\n    describe 'initialization', () ->\n      it 'enables auto-naming when form is new', () ->\n        survey = new $model.Survey()\n        expect(survey.settings.auto_name).toBe true\n    describe 'change:form_id', () ->\n      it 'disables auto naming when changed manually', () ->\n        settings = new $model.Settings()\n        settings.enable_auto_name()\n        settings.set 'form_id', 'test'\n\n        expect(settings.auto_name).toBe false\n      it 'ignores when changed as part of a title change', () ->\n        settings = new $model.Settings()\n        settings.enable_auto_name()\n        settings.set 'form_title', 'test'\n\n        expect(settings.auto_name).toBe true\n    describe 'change:form_title', () ->\n      it 'sets the form id when form in auto naming mode', () ->\n        settings = new $model.Settings()\n        settings.enable_auto_name()\n        settings.set 'form_title', 'test'\n\n        expect(settings.get('form_id')).toBe 'test'\n      it 'sluggifies label before setting id', () ->\n        settings = new $model.Settings()\n        settings.enable_auto_name()\n        settings.set 'form_title', 'test me'\n\n        expect(settings.get('form_id')).toBe 'test_me'\n\n  describe 'survey.tests: prep_cols', () ->\n    it 'flattens and deduplicates arrays of strings', () ->\n      survey = new $model.Survey()\n      expect(survey.prepCols [['a', 'b'], ['b', 'c'], ['e', 'a', 'd']]).toEqual ['a', 'b', 'c', 'e', 'd']\n\n    it 'excludes passed array of strings from result', () ->\n      survey = new $model.Survey()\n      expect(survey.prepCols [['a', 'b'], ['b', 'c'], ['e', 'a', 'de']], exclude: ['de']).toEqual ['a', 'b', 'c', 'e']\n\n    it 'add passed string to result', () ->\n      survey = new $model.Survey()\n      expect(survey.prepCols [['a', 'b'], ['b', 'c'], ['e', 'a', 'de']], exclude: ['de'], add: ['abc']).toEqual ['a', 'b', 'c', 'e', 'abc']\n","{expect} = require('../helper/fauxChai')\n$utils = require(\"../../jsapp/xlform/src/model.utils\")\n\npasted = [\n            [\"list_name\", \"name\", \"label\", \"state\", \"county\"],\n            [\"state\", \"texas\", \"Texas\", \"\"],\n            [\"state\", \"washington\", \"Washington\", \"\"],\n            [\"county\", \"king 1\", \"King\", \"washington\", \"\"],\n            [\"county\", \"pierce\", \"Pierce\", \"washington\", \"\"],\n            [\"county\", \"king 2\", \"King\", \"texas\", \"\"],\n            [\"county\", \"cameron\", \"Cameron\", \"texas\", \"\"],\n            [\"city\", \"dumont\", \"Dumont\", \"texas\", \"king 2\"],\n            [\"city\", \"finney\", \"Finney\", \"texas\", \"king 2\"],\n            [\"city\", \"brownsville\", \"brownsville\", \"texas\", \"cameron\"],\n            [\"city\", \"harlingen\", \"harlingen\", \"texas\", \"cameron\"],\n            [\"city\", \"seattle\", \"Seattle\", \"washington\", \"king 1\"],\n            [\"city\", \"redmond\", \"Redmond\", \"washington\", \"king 1\"],\n            [\"city\", \"tacoma\", \"Tacoma\", \"washington\", \"pierce\"],\n            [\"city\", \"puyallup\", \"Puyallup\", \"washington\", \"pierce\"]\n        ].map((r)-> r.join(\"\\t\")).join(\"\\n\")\n\nexpectation = JSON.parse(\"\"\"\n[\n    {\n        \"list_name\": \"state\",\n        \"name\": \"texas\",\n        \"label\": \"Texas\"\n    },\n    {\n        \"list_name\": \"state\",\n        \"name\": \"washington\",\n        \"label\": \"Washington\"\n    },\n    {\n        \"list_name\": \"county\",\n        \"name\": \"king 1\",\n        \"label\": \"King\",\n        \"state\": \"washington\"\n    },\n    {\n        \"list_name\": \"county\",\n        \"name\": \"pierce\",\n        \"label\": \"Pierce\",\n        \"state\": \"washington\"\n    },\n    {\n        \"list_name\": \"county\",\n        \"name\": \"king 2\",\n        \"label\": \"King\",\n        \"state\": \"texas\"\n    },\n    {\n        \"list_name\": \"county\",\n        \"name\": \"cameron\",\n        \"label\": \"Cameron\",\n        \"state\": \"texas\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"dumont\",\n        \"label\": \"Dumont\",\n        \"state\": \"texas\",\n        \"county\": \"king 2\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"finney\",\n        \"label\": \"Finney\",\n        \"state\": \"texas\",\n        \"county\": \"king 2\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"brownsville\",\n        \"label\": \"brownsville\",\n        \"state\": \"texas\",\n        \"county\": \"cameron\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"harlingen\",\n        \"label\": \"harlingen\",\n        \"state\": \"texas\",\n        \"county\": \"cameron\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"seattle\",\n        \"label\": \"Seattle\",\n        \"state\": \"washington\",\n        \"county\": \"king 1\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"redmond\",\n        \"label\": \"Redmond\",\n        \"state\": \"washington\",\n        \"county\": \"king 1\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"tacoma\",\n        \"label\": \"Tacoma\",\n        \"state\": \"washington\",\n        \"county\": \"pierce\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"puyallup\",\n        \"label\": \"Puyallup\",\n        \"state\": \"washington\",\n        \"county\": \"pierce\"\n    }\n]\n\"\"\")\n\n\ndo ->\n  describe 'model.utils', ->\n    describe 'pasted', ->\n      _eqKeyVals = (a, b)->\n        expect(_.keys(a).sort().join(',')).toEqual(_.keys(b).sort().join(','))\n        expect(_.values(a).sort().join(',')).toEqual(_.values(b).sort().join(','))\n\n      it 'splits pasted code into appropriate chunks', ->\n        splitted = $utils.split_paste(pasted)\n        expect(splitted.length).toEqual(expectation.length)\n        for i in [0..splitted.length]\n            _eqKeyVals(splitted[i], expectation[i])\n\n    describe 'sluggify', ->\n      it 'lowerCases: true', ->\n        expect($utils.sluggify(\"TESTING LOWERCASE TRUE\", lowerCase: true)).toEqual('testing_lowercase_true')\n      it 'lowerCases: false', ->\n        expect($utils.sluggify(\"TESTING LOWERCASE FALSE\", lowerCase: false)).toEqual('TESTING_LOWERCASE_FALSE')\n      it 'isValidXmlTag passes with valid strings', ->\n        valid_xml = [\n          'abc',\n          '_123',\n          'a456',\n          '_.',\n        ]\n        for str in valid_xml\n          expect($utils.isValidXmlTag(str)).toBeTruthy()\n      it 'isValidXmlTag fails with invalid strings', ->\n        invalid_xml = [\n          '1xyz',\n          ' startswithspace',\n          '._',\n        ]\n        for str in invalid_xml\n          expect($utils.isValidXmlTag(str)).not.toBeTruthy()\n\n      it 'handles a number of strings consistenly', ->\n        inp_exps = [\n            [[\"asdf jkl\"],              \"asdf_jkl\"],\n            [[\"asdf\", [\"asdf\"]],        \"asdf_001\"],\n            [[\"2. asdf\"],               \"_2_asdf\"],\n            [[\"2. asdf\", [\"_2_asdf\"]],  \"_2_asdf_001\"],\n            [[\"asdf#123\"],              \"asdf_123\"],\n            [[\" hello \"],               \"hello\"],\n        ]\n        for [inps, exps], i in inp_exps\n          [str, additionals] = inps\n          _out = $utils.sluggifyLabel(str, additionals)\n          expect(_out).toBe(exps)\n\n","import {\n  readParameters,\n  writeParameters,\n  getLangAsObject,\n  getLangString,\n  nullifyTranslations,\n  unnullifyTranslations\n} from 'utils';\n\ndescribe('utils', () => {\n  describe('getLangAsObject', () => {\n    it('should return object for valid langString', () => {\n      const langObj = getLangAsObject('English (en)');\n      chai.expect(langObj.name).to.equal('English');\n      chai.expect(langObj.code).to.equal('en');\n    });\n\n    it('should return undefined for invalid langString', () => {\n      chai.expect(getLangAsObject('English')).to.equal(undefined);\n      chai.expect(getLangAsObject('(en)')).to.equal(undefined);\n      chai.expect(getLangAsObject('English [en]')).to.equal(undefined);\n      chai.expect(getLangAsObject('English, en')).to.equal(undefined);\n      chai.expect(getLangAsObject('English: en')).to.equal(undefined);\n      chai.expect(getLangAsObject('(en) English')).to.equal(undefined);\n      chai.expect(getLangAsObject('English (en) (fr) (de)')).to.equal(undefined);\n      chai.expect(getLangAsObject('Pizza time!')).to.equal(undefined);\n    });\n\n    it('should work properly with getLangString', () => {\n      const langObj = getLangAsObject(getLangString({\n        name: 'English',\n        code: 'en'\n      }));\n      chai.expect(langObj.name).to.equal('English');\n      chai.expect(langObj.code).to.equal('en');\n    });\n  });\n\n  describe('getLangString', () => {\n    it('should return valid langString from langObj', () => {\n      const langString = getLangString({\n        name: 'English',\n        code: 'en'\n      });\n      chai.expect(langString).to.equal('English (en)');\n    });\n\n    it('should return nothing for invalid object', () => {\n      const langString = getLangString({\n        pizzaType: 2,\n        delivery: false\n      });\n      chai.expect(langString).to.equal(undefined);\n    });\n\n    it('should work properly with getLangAsObject', () => {\n      const langString = getLangString(getLangAsObject('English (en)'));\n      chai.expect(langString).to.equal('English (en)');\n    });\n  });\n});\n\n//  TRANSLATIONS HACK tests\n\ndescribe('translations hack', () => {\n  describe('nullifyTranslations', () => {\n    it('should return array with null for no translations', () => {\n      const test = {\n        survey: [{\n          'label': ['Hello']\n        }]\n      };\n      const target = {\n        survey: [{'label': ['Hello']}],\n        translations: [null]\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should throw if there are unnamed translations', () => {\n      const test = {\n        survey: [{\n          'label': ['Hello']}\n        ],\n        translations: [\n          null,\n          'English (en)'\n        ]\n      };\n      expect(() => {\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey);\n      }).to.throw();\n    });\n\n    it('should not reorder anything if survey has same default language as base survey', () => {\n      const test = {\n        baseSurvey: {_initialParams: {translations_0: 'English (en)'}},\n        survey: [{\n          'label': [\n            'Hello',\n            'Cześć'\n          ]\n        }],\n        translations: [\n          'English (en)',\n          'Polski (pl)'\n        ],\n        translated: [\n          'label'\n        ]\n      };\n      const target = {\n        survey: [{\n          'label': [\n            'Hello',\n            'Cześć'\n          ]\n        }],\n        translations: [\n          null,\n          'Polski (pl)'\n        ],\n        translations_0: 'English (en)'\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should reorder translated props if survey has same default language as base survey but in different order', () => {\n      const test = {\n        baseSurvey: {_initialParams: {translations_0: 'English (en)'}},\n        survey: [{\n          'label': [\n            'Allo',\n            'Cześć',\n            'Hello'\n          ]\n        }],\n        translations: [\n          'Francais (fr)',\n          'Polski (pl)',\n          'English (en)'\n        ],\n        translated: [\n          'label'\n        ]\n      };\n      const target = {\n        survey: [{\n          'label': [\n            'Hello' ,\n            'Allo',\n            'Cześć'\n          ]\n        }],\n        translations: [\n          null,\n          'Francais (fr)',\n          'Polski (pl)'\n        ],\n        translations_0: 'English (en)'\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should add base survey\\'s default language if survey doesn\\'t have it', () => {\n      const test = {\n        baseSurvey: {_initialParams: {translations_0: 'English (en)'}},\n        survey: [{\n          'label': [\n            'Allo',\n            'Cześć'\n          ],\n          name: 'welcome_message'\n        }],\n        translations: [\n          'Francais (fr)',\n          'Polski (pl)'\n        ],\n        translated: [\n          'label'\n        ]\n      };\n      const target = {\n        survey: [{\n          'label': [\n            'welcome_message',\n            'Allo',\n            'Cześć'\n          ],\n          name: 'welcome_message'\n        }],\n        translations: [\n          null,\n          'Francais (fr)',\n          'Polski (pl)'\n        ],\n        translations_0: 'English (en)'\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should add null language if base survey has no translations but survey does', () => {\n      const test = {\n        baseSurvey: {_initialParams: {}},\n        survey: [{\n          'label': [\n            'Allo',\n            'Cześć'\n          ],\n          name: 'welcome_message'\n        }],\n        translations: [\n          'Francais (fr)',\n          'Polski (pl)'\n        ],\n        translated: [\n          'label'\n        ]\n      };\n      const target = {\n        survey: [{\n          'label': [\n            'welcome_message',\n            'Allo',\n            'Cześć'\n          ],\n          name: 'welcome_message'\n        }],\n        translations: [\n          null,\n          'Francais (fr)',\n          'Polski (pl)'\n        ]\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should do nothing if neither base survey nor survey have translations', () => {\n      const test = {\n        baseSurvey: {_initialParams: {}},\n        survey: [{\n          'label': ['Hello']\n        }],\n        translations: [\n          null\n        ],\n        translated: []\n      };\n      const target = {\n        survey: [{\n          'label': ['Hello']\n        }],\n        translations: [\n          null\n        ]\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n  });\n\n  describe('unnullifyTranslations', () => {\n    it('should set default language if it\\'s not set already', () => {\n      const test = {\n        surveyDataJSON: JSON.stringify({\n          survey: [\n            {\n              label: 'Cheese?'\n            }\n          ],\n          settings: [\n            {}\n          ]\n        }),\n        assetContent: {\n          translated: ['label'],\n          translations_0: 'English (en)'\n        },\n      };\n      const target = JSON.stringify({\n        survey: [\n          {\n            'label::English (en)': 'Cheese?'\n          }\n        ],\n        settings: [\n          {\n            default_language: 'English (en)'\n          }\n        ]\n      });\n      expect(\n        unnullifyTranslations(test.surveyDataJSON, test.assetContent)\n      ).to.deep.equal(target);\n    });\n\n    it('should replace nullified props with translated ones', () => {\n      const test = {\n        surveyDataJSON: JSON.stringify({\n          survey: [\n            {\n              label: 'Cheese?',\n              'label::Polski (pl)': 'Ser?'\n            }\n          ],\n          choices: [\n            {\n              label: 'Yes'\n            },\n            {\n              label: 'No',\n              'label::Polski (pl)': 'Nie'\n            }\n          ],\n          settings: [\n            {\n              default_language: 'English (en)'\n            }\n          ]\n        }),\n        assetContent: {\n          translated: ['label'],\n          translations_0: 'English (en)'\n        },\n      };\n      const target = JSON.stringify({\n        survey: [\n          {\n            'label::Polski (pl)': 'Ser?',\n            'label::English (en)': 'Cheese?'\n          }\n        ],\n        choices: [\n          {\n            'label::English (en)': 'Yes'\n          },\n          {\n            'label::Polski (pl)': 'Nie',\n            'label::English (en)': 'No'\n          }\n        ],\n        settings: [\n          {\n            default_language: 'English (en)'\n          }\n        ]\n      });\n      expect(\n        unnullifyTranslations(test.surveyDataJSON, test.assetContent)\n      ).to.deep.equal(target);\n    });\n  });\n});\n\ndescribe('readParameters', () => {\n  const validReadPairs = [\n    {\n      str:'foo=',\n      obj: {foo: ''},\n      note: 'empty parameter'\n    },\n    {\n      str:'foo=;bar=1;fum=;baz=',\n      obj: {foo: '', bar: '1', fum: '', baz: ''},\n      note: 'empty parameters'\n    },\n    {\n      str:'foo=bar',\n      obj: {foo: 'bar'},\n      note: 'single parameter'\n    },\n    {\n      str:'foo=1 bar=10 fum=1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'space-separated parameters'\n    },\n    {\n      str:'foo=1,bar=10,fum=1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'comma-separated parameters'\n    },\n    {\n      str:'foo=1;bar=10;fum=1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'semicolon-separated parameters'\n    },\n    {\n      str:'foo  = 1    bar  =  10    fum  =  1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'space-dirty space-separated parameters'\n    },\n    {\n      str:'foo = 1 , bar = 10 , fum = 1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'space-dirty comma-separated parameters'\n    },\n    {\n      str:'foo = 1  ; bar = 10 ; fum = 1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'space-dirty semicolon-separated parameters'\n    },\n    {\n      str:'foo=1 bar=10,fum=1;baz=0',\n      obj: {foo: '1 bar=10,fum=1', baz: '0'},\n      note: 'parameters with mixed separators'\n    },\n    {\n      str:'foo    =2',\n      obj: {foo: '2'},\n      note: 'left-space-dirty single parameter'\n    },\n    {\n      str:'foo     =   2',\n      obj: {foo: '2'},\n      note: 'both-space-dirty single parameter'\n    },\n    {\n      str:'foo=      2',\n      obj: {foo: '2'},\n      note: 'right-space-dirty single parameter'\n    },\n    {\n      str:'foo = 2, 4  ; bar =  4 , , 4 a   ,  ; fum=baz',\n      obj: {foo: '2, 4', bar: '4 , , 4 a', fum: 'baz'},\n      note: 'dirty parameters with mixed separators'\n    },\n  ];\n\n  validReadPairs.forEach((pair) => {\n    it(`should return valid object from ${pair.note}`, () => {\n      chai.expect(readParameters(pair.str)).to.deep.equal(pair.obj);\n    });\n  });\n\n  it('should read parameters values as strings', () => {\n    const obj = readParameters('foo=1;bar=false;fum=0.5;baz=[1,2,3]');\n    chai.expect(typeof obj.foo).to.equal('string');\n    chai.expect(typeof obj.bar).to.equal('string');\n    chai.expect(typeof obj.fum).to.equal('string');\n    chai.expect(typeof obj.baz).to.equal('string');\n  });\n\n  it('should return null for invalid parameter string', () => {\n    chai.expect(readParameters('abc:1')).to.equal(null);\n    chai.expect(readParameters('1')).to.equal(null);\n    chai.expect(readParameters('')).to.equal(null);\n    chai.expect(readParameters(0)).to.equal(null);\n    chai.expect(readParameters(false)).to.equal(null);\n    chai.expect(readParameters(null)).to.equal(null);\n    chai.expect(readParameters(undefined)).to.equal(null);\n    chai.expect(readParameters({})).to.equal(null);\n    chai.expect(readParameters([])).to.equal(null);\n  });\n});\n\ndescribe('writeParameters', () => {\n  const validWritePairs = [\n    {\n      str: 'foo=1;bar=10;fum=1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'valid string from object with multiple parameters'\n    },\n    {\n      str: 'foo=2',\n      obj: {foo: '2'},\n      note: 'valid string from object with single parameter'\n    },\n    {\n      str: 'bar=0;baz=false',\n      obj: {foo: null, bar: 0, fum: undefined, baz: false},\n      note: 'valid string omitting empty values from object with multiple parameters'\n    },\n    {\n      str: 'foo={\"bar\":\"a\",\"fum\":{\"baz\":\"b\"}}',\n      obj: {foo: {bar: 'a', fum: {baz: 'b'}}},\n      note: 'valid string from nested object'\n    },\n  ];\n\n  validWritePairs.forEach((pair) => {\n    it(`should return ${pair.note}`, () => {\n      chai.expect(writeParameters(pair.obj)).to.equal(pair.str);\n    });\n  });\n});\n","export const surveyWithGroups = [\n  {\n    '$autoname': 'start',\n    '$kuid': 'RCRVJs6v8',\n    'type': 'start',\n    'name': 'start'\n  }, {\n    '$autoname': 'end',\n    '$kuid': 'Oaffb3Ce1',\n    'type': 'end',\n    'name': 'end'\n  }, {\n    '$autoname': 'Your_place',\n    '$kuid': 'ry17h97',\n    'required': false,\n    'type': 'geopoint',\n    'label': ['Your place']\n  }, {\n    '$autoname': 'Your_name',\n    '$kuid': 'bp66l95',\n    'required': false,\n    'type': 'text',\n    'label': ['Your name']\n  }, {\n    '$autoname': 'group_breakfast',\n    '$kuid': 'eu4rd78',\n    'type': 'begin_group',\n    'name': 'group_breakfast',\n    'label': ['Breakfast']\n  }, {\n    '$autoname': 'When_did_you_eat',\n    '$kuid': 'sn0ll77',\n    'required': false,\n    'type': 'time',\n    'label': ['When did you eat?']\n  }, {\n    '$autoname': 'What_did_you_eat',\n    '$kuid': 'lh5jq54',\n    'required': false,\n    'type': 'text',\n    'label': ['What did you eat?']\n  }, {\n    '$kuid': '/eu4rd78',\n    'type': 'end_group'\n  }, {\n    '$autoname': 'group_snacks',\n    '$kuid': 'yq4bo29',\n    'type': 'begin_repeat',\n    'name': 'group_snacks',\n    'label': ['Snacks during the day']\n  }, {\n    '$autoname': 'Snack_name',\n    '$kuid': 'tb3mh66',\n    'required': false,\n    'type': 'text',\n    'label': ['Snack name']\n  }, {\n    '$autoname': 'Time_of_consumption',\n    '$kuid': 'tq2zv81',\n    'required': false,\n    'type': 'time',\n    'label': ['Time of consumption']\n  }, {\n    '$autoname': 'group_nutrients',\n    '$kuid': 'su3ww56',\n    'type': 'begin_group',\n    'name': 'group_nutrients',\n    'label': ['Nutrients']\n  }, {\n    '$autoname': 'How_much_protein_was_it',\n    '$kuid': 'bg5yt06',\n    'required': false,\n    'type': 'integer',\n    'label': ['How much protein was it?']\n  }, {\n    '$autoname': 'How_much_H2O_was_it',\n    '$kuid': 'iz5bf84',\n    'required': false,\n    'type': 'integer',\n    'label': ['How much H2O was it?']\n  }, {\n    '$kuid': '/su3ww56',\n    'type': 'end_group'\n  }, {\n    '$kuid': '/yq4bo29',\n    'type': 'end_repeat'\n  }, {\n    '$autoname': 'group_favs',\n    '$kuid': 'vy2km60',\n    'type': 'begin_group',\n    'name': 'group_favs',\n    'label': ['Favourites']\n  }, {\n    '$autoname': 'Favourite_food',\n    '$kuid': 'yt3yl96',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite food']\n  }, {\n    '$autoname': 'group_favplant',\n    '$kuid': 'vj5yb24',\n    'type': 'begin_group',\n    'name': 'group_favplant',\n    'label': ['Favourite plant food']\n  }, {\n    '$autoname': 'Favourite_fruit',\n    '$kuid': 'wa1gp21',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite fruit']\n  }, {\n    '$autoname': 'group_favveg',\n    '$kuid': 'qq1rn39',\n    'type': 'begin_group',\n    'name': 'group_favveg',\n    'label': ['Favourite vegetables']\n  }, {\n    '$autoname': 'Favourite_carrot',\n    '$kuid': 'ik3zw20',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite carrot']\n  }, {\n    '$autoname': 'Favourite_potato',\n    '$kuid': 'ea5uq17',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite potato']\n  }, {\n    '$kuid': '/qq1rn39',\n    'type': 'end_group'\n  }, {\n    '$kuid': '/vj5yb24',\n    'type': 'end_group'\n  }, {\n    '$autoname': 'group_favvegan',\n    '$kuid': 'oe2bb55',\n    'type': 'begin_group',\n    'name': 'group_favvegan',\n    'label': ['Favourite vegan stuff']\n  }, {\n    '$autoname': 'Favourite_vegan_hummus',\n    '$kuid': 'lk4jn23',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite vegan hummus']\n  }, {\n    '$kuid': '/oe2bb55',\n    'type': 'end_group'\n  }, {\n    '$autoname': 'Favourite_spiece',\n    '$kuid': 'zv21a26',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite spiece']\n  }, {\n    '$kuid': '/vy2km60',\n    'type': 'end_group'\n  }, {\n    '$autoname': 'Comments',\n    '$kuid': 'sm0pu34',\n    'required': false,\n    'type': 'text',\n    'label': ['Comments']\n  }\n];\n","import {surveyWithGroups} from 'js/assetUtils.mocks';\nimport {getSurveyFlatPaths} from 'js/assetUtils';\n\ndescribe('getSurveyFlatPaths', () => {\n  it('should return a list of paths for all questions', () => {\n    const test = getSurveyFlatPaths(surveyWithGroups);\n    const target = {\n      Your_place: 'Your_place',\n      Your_name: 'Your_name',\n      When_did_you_eat: 'group_breakfast/When_did_you_eat',\n      What_did_you_eat: 'group_breakfast/What_did_you_eat',\n      Snack_name: 'group_snacks/Snack_name',\n      Time_of_consumption: 'group_snacks/Time_of_consumption',\n      How_much_protein_was_it: 'group_snacks/group_nutrients/How_much_protein_was_it',\n      How_much_H2O_was_it: 'group_snacks/group_nutrients/How_much_H2O_was_it',\n      Favourite_food: 'group_favs/Favourite_food',\n      Favourite_fruit: 'group_favs/group_favplant/Favourite_fruit',\n      Favourite_carrot: 'group_favs/group_favplant/group_favveg/Favourite_carrot',\n      Favourite_potato: 'group_favs/group_favplant/group_favveg/Favourite_potato',\n      Favourite_vegan_hummus: 'group_favs/group_favvegan/Favourite_vegan_hummus',\n      Favourite_spiece: 'group_favs/Favourite_spiece',\n      Comments: 'Comments'\n    };\n    expect(test).to.deep.equal(target);\n  });\n});\n","/**\n* Mock permissions endpoints responses for tests.\n*\n* NOTE: For simplicity we assume that ROOT_URL is empty string.\n*/\n\n// /api/v2/permissions/\nconst permissions = {\n  'count': 9,\n  'next': null,\n  'previous': null,\n  'results': [\n    {\n      'url': '/api/v2/permissions/add_submissions/',\n      'codename': 'add_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/'\n      ],\n      'contradictory': [],\n      'name': '',\n      'description': 'Can submit data to asset'\n    },\n    {\n      'url': '/api/v2/permissions/change_asset/',\n      'codename': 'change_asset',\n      'implied': [\n        '/api/v2/permissions/view_asset/'\n      ],\n      'contradictory': [],\n      'name': '',\n      'description': 'Can change asset'\n    },\n    {\n      'url': '/api/v2/permissions/change_submissions/',\n      'codename': 'change_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/',\n        '/api/v2/permissions/view_submissions/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/partial_submissions/'\n      ],\n      'name': '',\n      'description': 'Can modify submitted data for asset'\n    },\n    {\n      'url': '/api/v2/permissions/partial_submissions/',\n      'codename': 'partial_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/view_submissions/',\n        '/api/v2/permissions/change_submissions/',\n        '/api/v2/permissions/validate_submissions/'\n      ],\n      'name': '',\n      'description': 'Can make partial actions on submitted data for asset for specific users'\n    },\n    {\n      'url': '/api/v2/permissions/validate_submissions/',\n      'codename': 'validate_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/',\n        '/api/v2/permissions/view_submissions/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/partial_submissions/'\n      ],\n      'name': '',\n      'description': 'Can validate submitted data asset'\n    },\n    {\n      'url': '/api/v2/permissions/view_asset/',\n      'codename': 'view_asset',\n      'implied': [],\n      'contradictory': [],\n      'name': '',\n      'description': 'Can view asset'\n    },\n    {\n      'url': '/api/v2/permissions/view_submissions/',\n      'codename': 'view_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/partial_submissions/'\n      ],\n      'name': '',\n      'description': 'Can view submitted data for asset'\n    },\n    {\n      'url': '/api/v2/permissions/change_collection/',\n      'codename': 'change_collection',\n      'implied': [\n        '/api/v2/permissions/view_collection/'\n      ],\n      'contradictory': [],\n      'name': '',\n      'description': 'Can change collection'\n    },\n    {\n      'url': '/api/v2/permissions/view_collection/',\n      'codename': 'view_collection',\n      'implied': [],\n      'contradictory': [],\n      'name': '',\n      'description': 'Can view collection'\n    }\n  ]\n};\n\n// /api/v2/assets/<uid>/permission-assignments/\nconst assetWithAnonymousUser = {\n  'count': 7,\n  'next': null,\n  'previous': null,\n  'results': [\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pTi9qyEax49ZA5RP9KnNHB/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/add_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pATUgtDW6v44QG4dDDpnEV/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pUUcqTtQ6FgEDfHUiQbS24/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p5BjfEz9JDQtQTzkT7fHA5/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/validate_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pBjfyz5Zxj95866GtEtsR2/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pQGiudmuLvN6iHEdH8dJAs/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pV9kCoWAQT9QUeV2EsTLqj/',\n      'user': '/api/v2/users/AnonymousUser/',\n      'permission': '/api/v2/permissions/view_asset/'\n    }\n  ]\n};\n\n// /api/v2/assets/<uid>/permission-assignments/\nconst assetWithMultipleUsers = {\n  'count': 9,\n  'next': null,\n  'previous': null,\n  'results': [\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pTi9qyEax49ZA5RP9KnNHB/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/add_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pATUgtDW6v44QG4dDDpnEV/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pUUcqTtQ6FgEDfHUiQbS24/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p5BjfEz9JDQtQTzkT7fHA5/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/validate_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pBjfyz5Zxj95866GtEtsR2/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pQGiudmuLvN6iHEdH8dJAs/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pETvxGayAJwvPaCnt5biVD/',\n      'user': '/api/v2/users/olivier/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p6KekjhZabd7ao9MBQwN7X/',\n      'user': '/api/v2/users/john/',\n      'permission': '/api/v2/permissions/view_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pxp7BPnP9fohF5ZoH5Uwfa/',\n      'user': '/api/v2/users/john/',\n      'permission': '/api/v2/permissions/view_asset/'\n    }\n  ]\n};\n\n// /api/v2/assets/<uid>/permission-assignments/\nconst assetWithPartial = {\n  'count': 8,\n  'next': null,\n  'previous': null,\n  'results': [\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pTi9qyEax49ZA5RP9KnNHB/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/add_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pATUgtDW6v44QG4dDDpnEV/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pUUcqTtQ6FgEDfHUiQbS24/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p5BjfEz9JDQtQTzkT7fHA5/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/validate_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pBjfyz5Zxj95866GtEtsR2/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pQGiudmuLvN6iHEdH8dJAs/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p6KekjhZabd7ao9MBQwN7X/',\n      'user': '/api/v2/users/leszek/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pxp7BPnP9fohF5ZoH5Uwfa/',\n      'user': '/api/v2/users/leszek/',\n      'permission': '/api/v2/permissions/partial_submissions/',\n      'partial_permissions': [\n        {\n          'url': '/api/v2/permissions/view_submissions/',\n          'filters': [\n            {'_submitted_by': {'$in': ['john', 'olivier']}}\n          ]\n        },\n      ]\n    }\n  ]\n};\n\nexport const endpoints = {\n  permissions,\n  assetWithAnonymousUser,\n  assetWithMultipleUsers,\n  assetWithPartial,\n};\n","import {permParser} from './permParser';\nimport permConfig from './permConfig';\nimport {endpoints} from './permissionsMocks';\nimport constants from 'js/constants';\n\ndescribe('permParser', () => {\n  beforeEach(() => {\n    // bootstraping\n    permConfig.onGetConfigCompleted(endpoints.permissions);\n    constants.ROOT_URL = '';\n  });\n\n  describe('parseBackendData', () => {\n    it('should hide anonymous user permissions from output by default', () => {\n      // in original data there are total 7 permissions (6 of asset owner and\n      // one of anonymous user)\n      chai.expect(endpoints.assetWithAnonymousUser.results.length).to.equal(7);\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithAnonymousUser.results,\n        endpoints.assetWithAnonymousUser.results[0].user\n      );\n      // parsed data should only contain data of owner\n      chai.expect(parsed.length).to.equal(1);\n      chai.expect(parsed[0].user.name).to.equal('kobo');\n    });\n\n    it('should show anonymous user permissions from output when ordered to', () => {\n      // in original data there are total 7 permissions (6 of asset owner and\n      // one of anonymous user)\n      chai.expect(endpoints.assetWithAnonymousUser.results.length).to.equal(7);\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithAnonymousUser.results,\n        endpoints.assetWithAnonymousUser.results[0].user,\n        true\n      );\n      // parsed data should contain data of owner and anonymous user\n      chai.expect(parsed.length).to.equal(2);\n      chai.expect(parsed[0].user.name).to.equal('kobo');\n      chai.expect(parsed[1].user.name).to.equal(constants.ANON_USERNAME);\n    });\n\n    it('should group permissions by users properly', () => {\n      // in original data there are total 9 permissions (6 of asset owner,\n      // 2 of one user and 1 of another)\n      chai.expect(endpoints.assetWithMultipleUsers.results.length).to.equal(9);\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithMultipleUsers.results,\n        endpoints.assetWithMultipleUsers.results[0].user\n      );\n\n      // parsed data should contain data of 3 users\n      chai.expect(parsed.length).to.equal(3);\n      chai.expect(parsed[0].user.name).to.equal('kobo');\n      chai.expect(parsed[0].permissions.length).to.equal(6);\n      chai.expect(parsed[1].user.name).to.equal('john');\n      chai.expect(parsed[1].permissions.length).to.equal(2);\n      chai.expect(parsed[2].user.name).to.equal('olivier');\n      chai.expect(parsed[2].permissions.length).to.equal(1);\n    });\n  });\n\n  describe('sortParseBackendOutput', () => {\n    it('should sort alphabetically with owner always first', () => {\n      const sortedOutput = permParser.sortParseBackendOutput([\n        {user: {url: '/api/v2/users/frank', isOwner: false}},\n        {user: {url: '/api/v2/users/bob', isOwner: false}},\n        {user: {url: '/api/v2/users/diana', isOwner: true}},\n        {user: {url: '/api/v2/users/arthur', isOwner: false}},\n        {user: {url: '/api/v2/users/esther', isOwner: false}},\n        {user: {url: '/api/v2/users/christian', isOwner: false}}\n      ]);\n      chai.expect(sortedOutput).to.deep.equal([\n        {user: {url: '/api/v2/users/diana', isOwner: true}},\n        {user: {url: '/api/v2/users/arthur', isOwner: false}},\n        {user: {url: '/api/v2/users/bob', isOwner: false}},\n        {user: {url: '/api/v2/users/christian', isOwner: false}},\n        {user: {url: '/api/v2/users/esther', isOwner: false}},\n        {user: {url: '/api/v2/users/frank', isOwner: false}}\n      ]);\n    });\n  });\n\n  describe('buildFormData', () => {\n    it('should check proper options', () => {\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithMultipleUsers.results,\n        endpoints.assetWithMultipleUsers.results[0].user\n      );\n\n      const built = permParser.buildFormData(parsed[1].permissions);\n\n      chai.expect(built).to.deep.equal({\n        formView: true,\n        submissionsView: true\n      });\n    });\n\n    it('should handle partial permissions', () => {\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithPartial.results,\n        endpoints.assetWithPartial.results[0].user\n      );\n\n      const built = permParser.buildFormData(parsed[1].permissions);\n\n      chai.expect(built).to.deep.equal({\n        formView: true,\n        submissionsView: true,\n        submissionsViewPartial: true,\n        submissionsViewPartialUsers: ['john', 'olivier']\n      });\n    });\n  });\n\n  describe('parseFormData', () => {\n    it('should exclude all implied permissions as they are not needed', () => {\n      const parsed = permParser.parseFormData({\n        username: 'leszek',\n        formView: true,\n        formEdit: true,\n        submissionsView: true,\n        submissionsViewPartial: false,\n        submissionsViewPartialUsers: [],\n        submissionsAdd: false,\n        submissionsEdit: false,\n        submissionsValidate: true\n      });\n\n      chai.expect(parsed).to.deep.equal([\n        {\n          user: '/api/v2/users/leszek/',\n          permission: '/api/v2/permissions/change_asset/'\n        },\n        {\n          user: '/api/v2/users/leszek/',\n          permission: '/api/v2/permissions/validate_submissions/'\n        }\n      ]);\n    });\n\n    it('should add partial_permissions property for partial submissions permission', () => {\n      const parsed = permParser.parseFormData({\n        username: 'leszek',\n        formView: true,\n        formEdit: false,\n        submissionsView: true,\n        submissionsViewPartial: true,\n        submissionsViewPartialUsers: ['john', 'olivier', 'eric'],\n        submissionsAdd: false,\n        submissionsEdit: false,\n        submissionsValidate: false\n      });\n\n      chai.expect(parsed).to.deep.equal([\n        {\n          user: '/api/v2/users/leszek/',\n          permission: '/api/v2/permissions/partial_submissions/',\n          partial_permissions: [\n            {\n              url: '/api/v2/permissions/view_submissions/',\n              filters: [\n                {'_submitted_by': {'$in': ['john', 'olivier', 'eric']}}\n              ]\n            }\n          ]\n        }\n      ]);\n    });\n  });\n\n  describe('parseUserWithPermsList', () => {\n    it('should return flat list of permissions', () => {\n      const userWithPermsList = permParser.parseBackendData(\n        endpoints.assetWithMultipleUsers.results,\n        endpoints.assetWithMultipleUsers.results[0].user\n      );\n      const parsed = permParser.parseUserWithPermsList(userWithPermsList);\n\n      chai.expect(parsed).to.deep.equal([\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/add_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/change_asset/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/change_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/validate_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/view_submissions/'\n        },\n        {\n          'user': '/api/v2/users/john/',\n          'permission': '/api/v2/permissions/view_submissions/'\n        },\n        {\n          'user': '/api/v2/users/john/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n        {\n          'user': '/api/v2/users/olivier/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n      ]);\n    });\n\n    it('should not omit partial permissions', () => {\n      const userWithPermsList = permParser.parseBackendData(\n        endpoints.assetWithPartial.results,\n        endpoints.assetWithPartial.results[0].user\n      );\n      const parsed = permParser.parseUserWithPermsList(userWithPermsList);\n\n      chai.expect(parsed).to.deep.equal([\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/add_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/change_asset/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/change_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/validate_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/view_submissions/'\n        },\n        {\n          'user': '/api/v2/users/leszek/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n        {\n          'user': '/api/v2/users/leszek/',\n          'permission': '/api/v2/permissions/partial_submissions/',\n          'partial_permissions': [\n            {\n              url: '/api/v2/permissions/view_submissions/',\n              filters: [\n                {'_submitted_by': {'$in': ['john', 'olivier']}}\n              ]\n            }\n          ]\n        }\n      ]);\n    });\n  });\n});\n"],"sourceRoot":""}